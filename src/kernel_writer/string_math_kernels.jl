
# String versions of math_kernels_short_inputs.jl

# These functions return strings of the inside portion
# of the original kernel, where the inputs are the
# variables being used and, optionally, whether the
# output is summed or simply set equal to the calculation
# result. The `sum_output` option may be useful for reducing
# the number of temporary variables being used, since,
# for example, McCormick information can be added to an
# existing temporary variable instead of making a new one.

# Order for inputs of generated kernels is: 
# [cv, cc, lo, hi, cvgrad, ccgrad].

#=
Unitary Rules
=#
# Addition of a constant
function SCMC_cadd_kernel(OUT::String, v1::String, CONST::Real, varlist::Vector{String}, sparsity::Vector{Int}; sum_output::Bool=false)
    if sum_output
        eq = "+="
    else
        eq = "="
    end

    if startswith(v1, "temp")
        v1_cv = "$(v1)_cv"
        v1_cc = "$(v1)_cc"
        v1_lo = "$(v1)_lo"
        v1_hi = "$(v1)_hi"
        v1_cvgrad = "$(v1)_cvgrad[col]"
        v1_ccgrad = "$(v1)_ccgrad[col]"
    elseif startswith(v1, "aux")
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,2]"
        v1_lo = "$(v1)[idx,3]"
        v1_hi = "$(v1)[idx,4]"
        v1_cvgrad = "$(v1)[idx,end-2*colmax+col]"
        v1_ccgrad = "$(v1)[idx,end-1*colmax+col]"
    else
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,1]"
        v1_lo = "$(v1)[idx,2]"
        v1_hi = "$(v1)[idx,3]"
        v1_cvgrad = "1.0"
        v1_ccgrad = "1.0"
        # Saving this here, for future kernels, in case this breaks something
        # v1_cv = "$(v1)[idx,1]"
        # v1_cc = "$(v1)[idx,2]"
        # v1_lo = "$(v1)[idx,3]"
        # v1_hi = "$(v1)[idx,4]"
        # v1_cvgrad = "$(v1)[idx,end-2*colmax+col]"
        # v1_ccgrad = "$(v1)[idx,end-1*colmax+col]"
    end
    if startswith(OUT, "temp")
        OUT_cv = "$(OUT)_cv"
        OUT_cc = "$(OUT)_cc"
        OUT_lo = "$(OUT)_lo"
        OUT_hi = "$(OUT)_hi"
        OUT_cvgrad = "$(OUT)_cvgrad["
        OUT_ccgrad = "$(OUT)_ccgrad["
    else
        OUT_cv = "$(OUT)[idx,1]"
        OUT_cc = "$(OUT)[idx,2]"
        OUT_lo = "$(OUT)[idx,3]"
        OUT_hi = "$(OUT)[idx,4]"
        OUT_cvgrad = "$(OUT)[idx,end-2*colmax+"
        OUT_ccgrad = "$(OUT)[idx,end-1*colmax+"
    end

    # Get the anti-sparsity list (elements NOT being used)
    antisparsity = collect(1:length(varlist))
    antisparsity = antisparsity[antisparsity .∉ Ref(sparsity)]  
    
    # Determine the sparsity case:
    # 1) Use sparsity list
    # 2) Use antisparsity list (because it's shorter than the sparsity list)
    # 3) Don't use either, simply calculate all elements
    if length(sparsity) <= length(antisparsity)
        sparsity_case = 1
        sparsity_string = join(["col == Int32($(x))" for x in sparsity], " || ")
    elseif length(antisparsity) > 0
        antisparsity_string = join(["col == Int32($(x))" for x in antisparsity], " || ")
        sparsity_case = 2
    else
        sparsity_case = 3
    end

    # Create the buffer that we will write to
    buffer = Base.IOBuffer()

    # Write all the lines to the buffer
    write(buffer, "        ############################\n")
    write(buffer, "        ## Addition of a constant ##\n")
    write(buffer, "        ############################\n")
    write(buffer, "\n")
    write(buffer, "        # Reset the column counter\n")
    write(buffer, "        col = Int32(1)\n")
    write(buffer, "\n")
    write(buffer, "        # Begin rule\n")
    write(buffer, "        $OUT_lo $eq $v1_lo + $CONST\n")
    write(buffer, "        $OUT_hi $eq $v1_hi + $CONST\n")
    write(buffer, "        $OUT_cv $eq $v1_cv + $CONST\n")
    write(buffer, "        $OUT_cc $eq $v1_cc + $CONST\n")
    write(buffer, "        while col <= colmax\n")
    if sparsity_case == 1
        write(buffer, "            if $sparsity_string\n")
        write(buffer, "                $(OUT_cvgrad)col] = $v1_cvgrad\n")
        write(buffer, "                $(OUT_ccgrad)col] = $v1_ccgrad\n")
        write(buffer, "            else\n")
        write(buffer, "                $(OUT_cvgrad)col] = 0.0\n")
        write(buffer, "                $(OUT_ccgrad)col] = 0.0\n")
        write(buffer, "            end\n")
    elseif sparsity_case == 2
        write(buffer, "            if $antisparsity_string\n")
        write(buffer, "                $(OUT_cvgrad)col] = 0.0\n")
        write(buffer, "                $(OUT_ccgrad)col] = 0.0\n")
        write(buffer, "            else\n")
        write(buffer, "                $(OUT_cvgrad)col] = $v1_cvgrad\n")
        write(buffer, "                $(OUT_ccgrad)col] = $v1_ccgrad\n")
        write(buffer, "            end\n")
    else
        write(buffer, "            $(OUT_cvgrad)col] = $v1_cvgrad\n")
        write(buffer, "            $(OUT_ccgrad)col] = $v1_ccgrad\n")
    end
    write(buffer, "            col += Int32(1)\n")
    write(buffer, "        end\n")
    write(buffer, "\n")
    write(buffer, "        # Cut\n")
    write(buffer, "        if $OUT_cv < $OUT_lo\n")
    write(buffer, "            $OUT_cv = $OUT_lo\n")
    write(buffer, "            col = Int32(1)\n")
    write(buffer, "            while col <= colmax\n")
    write(buffer, "                $(OUT_cvgrad)col] = 0.0\n")
    write(buffer, "                col += Int32(1)\n")
    write(buffer, "            end\n")
    write(buffer, "        end\n")
    write(buffer, "        if $OUT_cc > $OUT_hi\n")
    write(buffer, "            $OUT_cc = $OUT_hi\n")
    write(buffer, "            col = Int32(1)\n")
    write(buffer, "            while col <= colmax\n")
    write(buffer, "                $(OUT_ccgrad)col] = 0.0\n")
    write(buffer, "                col += Int32(1)\n")
    write(buffer, "            end\n")
    write(buffer, "        end\n")
    write(buffer, "\n")
    return String(take!(buffer))
end

# Addition to an existing variable
# max threads: 1024
function SCMC_add_to_kernel(OUT::String, v1::String, varlist::Vector{String}, sparsity::Vector{Int})
    if startswith(v1, "temp")
        v1_cv = "$(v1)_cv"
        v1_cc = "$(v1)_cc"
        v1_lo = "$(v1)_lo"
        v1_hi = "$(v1)_hi"
        v1_cvgrad = "$(v1)_cvgrad[col]"
        v1_ccgrad = "$(v1)_ccgrad[col]"
    elseif startswith(v1, "aux")
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,2]"
        v1_lo = "$(v1)[idx,3]"
        v1_hi = "$(v1)[idx,4]"
        v1_cvgrad = "$(v1)[idx,end-2*colmax+col]"
        v1_ccgrad = "$(v1)[idx,end-1*colmax+col]"
    else
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,1]"
        v1_lo = "$(v1)[idx,2]"
        v1_hi = "$(v1)[idx,3]"
        v1_cvgrad = "1.0"
        v1_ccgrad = "1.0"
    end
    if startswith(OUT, "temp")
        OUT_cv = "$(OUT)_cv"
        OUT_cc = "$(OUT)_cc"
        OUT_lo = "$(OUT)_lo"
        OUT_hi = "$(OUT)_hi"
        OUT_cvgrad = "$(OUT)_cvgrad[" # THIS IS INTENTIONAL. We can shorten subgradient calculations if
        OUT_ccgrad = "$(OUT)_ccgrad[" # v1 is a base-level variable.
    else
        OUT_cv = "$(OUT)[idx,1]"
        OUT_cc = "$(OUT)[idx,2]"
        OUT_lo = "$(OUT)[idx,3]"
        OUT_hi = "$(OUT)[idx,4]"
        OUT_cvgrad = "$(OUT)[idx,end-2*colmax+"
        OUT_ccgrad = "$(OUT)[idx,end-1*colmax+"
    end

    # Get the anti-sparsity list (elements NOT being used)
    antisparsity = collect(1:length(varlist))
    antisparsity = antisparsity[antisparsity .∉ Ref(sparsity)]  
    
    # Determine the sparsity case:
    # 1) Use sparsity list
    # 2) Use antisparsity list (because it's shorter than the sparsity list)
    # 3) Don't use either, simply calculate all elements
    if length(sparsity) <= length(antisparsity)
        sparsity_case = 1
        sparsity_string = join(["col == Int32($(x))" for x in sparsity], " || ")
    elseif length(antisparsity) > 0
        antisparsity_string = join(["col == Int32($(x))" for x in antisparsity], " || ")
        sparsity_case = 2
    else
        sparsity_case = 3
    end
    
    # Create the buffer that we will write to
    buffer = Base.IOBuffer()

    # Write all the lines to the buffer
    write(buffer, "        ############################\n")
    write(buffer, "        ## Addition to a variable ##\n")
    write(buffer, "        ############################\n")
    write(buffer, "\n")
    write(buffer, "        # Reset the column counter\n")
    write(buffer, "        col = Int32(1)\n")
    write(buffer, "\n")
    write(buffer, "        # Begin rule\n")
    write(buffer, "        $OUT_lo += $v1_lo\n")
    write(buffer, "        $OUT_hi += $v1_hi\n")
    write(buffer, "        $OUT_cv += $v1_cv\n")
    write(buffer, "        $OUT_cc += $v1_cc\n")
    write(buffer, "        while col <= colmax\n")
    if sparsity_case == 1
        write(buffer, "            if $sparsity_string\n")
        write(buffer, "                $(OUT_cvgrad)col] += $v1_cvgrad\n")
        write(buffer, "                $(OUT_ccgrad)col] += $v1_ccgrad\n")
        write(buffer, "            end\n")
    elseif sparsity_case == 2
        write(buffer, "            if $antisparsity_string\n")
        write(buffer, "                nothing\n")
        write(buffer, "            else\n")
        write(buffer, "                $(OUT_cvgrad)col] += $v1_cvgrad\n")
        write(buffer, "                $(OUT_ccgrad)col] += $v1_ccgrad\n")
        write(buffer, "            end\n")
    else
        write(buffer, "            $(OUT_cvgrad)col] += $v1_cvgrad\n")
        write(buffer, "            $(OUT_ccgrad)col] += $v1_ccgrad\n")
    end
    write(buffer, "            col += Int32(1)\n")
    write(buffer, "        end\n")
    write(buffer, "\n")
    write(buffer, "        # Cut\n")
    write(buffer, "        if $OUT_cv < $OUT_lo\n")
    write(buffer, "            $OUT_cv = $OUT_lo\n")
    write(buffer, "            col = Int32(1)\n")
    write(buffer, "            while col <= colmax\n")
    write(buffer, "                $(OUT_cvgrad)col] = 0.0\n")
    write(buffer, "                col += Int32(1)\n")
    write(buffer, "            end\n")
    write(buffer, "        end\n")
    write(buffer, "        if $OUT_cc > $OUT_hi\n")
    write(buffer, "            $OUT_cc = $OUT_hi\n")
    write(buffer, "            col = Int32(1)\n")
    write(buffer, "            while col <= colmax\n")
    write(buffer, "                $(OUT_ccgrad)col] = 0.0\n")
    write(buffer, "                col += Int32(1)\n")
    write(buffer, "            end\n")
    write(buffer, "        end\n")
    write(buffer, "\n")
    return String(take!(buffer))
end

# Negating (equivalent to multiplication by a constant if constant==-1)
# max threads: 1024
function SCMC_negate_kernel(OUT::String, v1::String, varlist::Vector{String}, sparsity::Vector{Int}; sum_output::Bool=false)
    if sum_output
        eq = "+="
    else
        eq = "="
    end
    
    if startswith(v1, "temp")
        v1_cv = "$(v1)_cv"
        v1_cc = "$(v1)_cc"
        v1_lo = "$(v1)_lo"
        v1_hi = "$(v1)_hi"
        v1_cvgrad = "$(v1)_cvgrad[col]"
        v1_ccgrad = "$(v1)_ccgrad[col]"
    elseif startswith(v1, "aux")
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,2]"
        v1_lo = "$(v1)[idx,3]"
        v1_hi = "$(v1)[idx,4]"
        v1_cvgrad = "$(v1)[idx,end-2*colmax+col]"
        v1_ccgrad = "$(v1)[idx,end-1*colmax+col]"
    else
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,1]"
        v1_lo = "$(v1)[idx,2]"
        v1_hi = "$(v1)[idx,3]"
        v1_cvgrad = "1.0"
        v1_ccgrad = "1.0"
    end
    if startswith(OUT, "temp")
        OUT_cv = "$(OUT)_cv"
        OUT_cc = "$(OUT)_cc"
        OUT_lo = "$(OUT)_lo"
        OUT_hi = "$(OUT)_hi"
        OUT_cvgrad = "$(OUT)_cvgrad[col]"
        OUT_ccgrad = "$(OUT)_ccgrad[col]"
    else
        OUT_cv = "$(OUT)[idx,1]"
        OUT_cc = "$(OUT)[idx,2]"
        OUT_lo = "$(OUT)[idx,3]"
        OUT_hi = "$(OUT)[idx,4]"
        OUT_cvgrad = "$(OUT)[idx,end-2*colmax+col]"
        OUT_ccgrad = "$(OUT)[idx,end-1*colmax+col]"
    end

    # Get the anti-sparsity list (elements NOT being used)
    antisparsity = collect(1:length(varlist))
    antisparsity = antisparsity[antisparsity .∉ Ref(sparsity)]
    
    # Determine the sparsity case:
    # 1) Use sparsity list
    # 2) Use antisparsity list (because it's shorter than the sparsity list)
    # 3) Don't use either, simply calculate all elements
    if length(sparsity) <= length(antisparsity)
        sparsity_case = 1
        sparsity_string = join(["col == Int32($(x))" for x in sparsity], " || ")
    elseif length(antisparsity) > 0
        antisparsity_string = join(["col == Int32($(x))" for x in antisparsity], " || ")
        sparsity_case = 2
    else
        sparsity_case = 3
    end
    
    # Create the buffer that we will write to
    buffer = Base.IOBuffer()

    # Write all the lines to the buffer 
    write(buffer, "        ##############\n")
    write(buffer, "        ## Negation ##\n")
    write(buffer, "        ##############\n")
    write(buffer, "\n")
    write(buffer, "        # Reset the column counter\n")
    write(buffer, "        col = Int32(1)\n")
    write(buffer, "\n")
    write(buffer, "        # Begin rule\n")
    write(buffer, "        $OUT_lo $eq -$v1_hi\n")
    write(buffer, "        $OUT_hi $eq -$v1_lo\n")
    write(buffer, "        $OUT_cv $eq -$v1_cc\n")
    write(buffer, "        $OUT_cc $eq -$v1_cv\n")
    write(buffer, "        while col <= colmax\n")
    if sparsity_case == 1
        write(buffer, "            if $sparsity_string\n")
        write(buffer, "                $OUT_cvgrad $eq -$v1_ccgrad\n")
        write(buffer, "                $OUT_ccgrad $eq -$v1_cvgrad\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                $OUT_ccgrad $eq 0.0\n")
        write(buffer, "            end\n")
    elseif sparsity_case == 2
        write(buffer, "            if $antisparsity_string\n")
        write(buffer, "                $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                $OUT_ccgrad $eq 0.0\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_cvgrad $eq -$v1_ccgrad\n")
        write(buffer, "                $OUT_ccgrad $eq -$v1_cvgrad\n")
        write(buffer, "            end\n")
    else
        write(buffer, "            $OUT_cvgrad $eq -$v1_ccgrad\n")
        write(buffer, "            $OUT_ccgrad $eq -$v1_cvgrad\n")
    end
    write(buffer, "            col += Int32(1)\n")
    write(buffer, "        end\n")
    write(buffer, "\n")
    write(buffer, "        # Cut\n")
    write(buffer, "        if $OUT_cv < $OUT_lo\n")
    write(buffer, "            $OUT_cv = $OUT_lo\n")
    write(buffer, "            col = Int32(1)\n")
    write(buffer, "            while col <= colmax\n")
    write(buffer, "                $OUT_cvgrad = 0.0\n")
    write(buffer, "                col += Int32(1)\n")
    write(buffer, "            end\n")
    write(buffer, "        end\n")
    write(buffer, "        if $OUT_cc > $OUT_hi\n")
    write(buffer, "            $OUT_cc = $OUT_hi\n")
    write(buffer, "            col = Int32(1)\n")
    write(buffer, "            while col <= colmax\n")
    write(buffer, "                $OUT_ccgrad = 0.0\n")
    write(buffer, "                col += Int32(1)\n")
    write(buffer, "            end\n")
    write(buffer, "        end\n")
    write(buffer, "\n")
    return String(take!(buffer))
end

# Exponential (Note: Can't do sum output, because of the degeneracy check at the end)
# max threads: 896
function SCMC_exp_kernel(OUT::String, v1::String, varlist::Vector{String}, sparsity::Vector{Int})
    if startswith(v1, "temp")
        v1_cv = "$(v1)_cv"
        v1_cc = "$(v1)_cc"
        v1_lo = "$(v1)_lo"
        v1_hi = "$(v1)_hi"
        v1_cvgrad = "$(v1)_cvgrad[col]"
        v1_ccgrad = "$(v1)_ccgrad[col]"
    elseif startswith(v1, "aux")
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,2]"
        v1_lo = "$(v1)[idx,3]"
        v1_hi = "$(v1)[idx,4]"
        v1_cvgrad = "$(v1)[idx,end-2*colmax+col]"
        v1_ccgrad = "$(v1)[idx,end-1*colmax+col]"
    else
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,1]"
        v1_lo = "$(v1)[idx,2]"
        v1_hi = "$(v1)[idx,3]"
        v1_cvgrad = "1.0"
        v1_ccgrad = "1.0"
    end
    if startswith(OUT, "temp")
        OUT_cv = "$(OUT)_cv"
        OUT_cc = "$(OUT)_cc"
        OUT_lo = "$(OUT)_lo"
        OUT_hi = "$(OUT)_hi"
        OUT_cvgrad = "$(OUT)_cvgrad[col]"
        OUT_ccgrad = "$(OUT)_ccgrad[col]"
    else
        OUT_cv = "$(OUT)[idx,1]"
        OUT_cc = "$(OUT)[idx,2]"
        OUT_lo = "$(OUT)[idx,3]"
        OUT_hi = "$(OUT)[idx,4]"
        OUT_cvgrad = "$(OUT)[idx,end-2*colmax+col]"
        OUT_ccgrad = "$(OUT)[idx,end-1*colmax+col]"
    end

    # Get the anti-sparsity list (elements NOT being used)
    antisparsity = collect(1:length(varlist))
    antisparsity = antisparsity[antisparsity .∉ Ref(sparsity)]
    
    # Determine the sparsity case:
    # 1) Use sparsity list
    # 2) Use antisparsity list (because it's shorter than the sparsity list)
    # 3) Don't use either, simply calculate all elements
    if length(sparsity) <= length(antisparsity)
        sparsity_case = 1
        sparsity_string = join(["col == Int32($(x))" for x in sparsity], " || ")
    elseif length(antisparsity) > 0
        antisparsity_string = join(["col == Int32($(x))" for x in antisparsity], " || ")
        sparsity_case = 2
    else
        sparsity_case = 3
    end
    
    # Create the buffer that we will write to
    buffer = Base.IOBuffer()

    # Write all the lines to the buffer
    if startswith(v1, r"aux|temp")
        # If the variable is an auxiliary, we can't necessarily simplify the if-else tree
        write(buffer, "        #################\n")
        write(buffer, "        ## Exponential ##\n")
        write(buffer, "        #################\n")
        write(buffer, "\n")
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        # Begin rule\n")
        write(buffer, "        $OUT_lo = exp($v1_lo)\n")
        write(buffer, "        $OUT_hi = exp($v1_hi)\n")
        write(buffer, "        if $v1_cc >= $v1_cv\n")
        write(buffer, "            if $v1_cv >= $v1_hi\n")
        write(buffer, "                if $v1_cv >= $v1_lo\n")
        write(buffer, "                    $OUT_cv = exp($v1_cv)\n")
        write(buffer, "                    $OUT_cc = (exp($v1_lo)*($v1_hi - $v1_cv) + exp($v1_hi)*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc == $v1_cv\n")
        write(buffer, "                    $OUT_cv = exp($v1_cv)\n")
        write(buffer, "                    $OUT_cc = (exp($v1_lo)*($v1_hi - $v1_cv) + exp($v1_hi)*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                    $OUT_cv = exp($v1_cc)\n")
        write(buffer, "                    $OUT_cc = (exp($v1_lo)*($v1_hi - $v1_cv) + exp($v1_hi)*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv = exp($v1_lo)\n")
        write(buffer, "                    $OUT_cc = (exp($v1_lo)*($v1_hi - $v1_cv) + exp($v1_hi)*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_cc == $v1_cv\n")
        write(buffer, "                $OUT_cv = exp($v1_cv)\n")
        write(buffer, "                $OUT_cc = (exp($v1_lo)*($v1_hi - $v1_cv) + exp($v1_hi)*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                    if $sparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    end\n")
        elseif sparsity_case == 2
            write(buffer, "                    if $antisparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
            write(buffer, "                    end\n")
        else
            write(buffer, "                    $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                    $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
        end
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_hi >= $v1_cc\n")
        write(buffer, "                if $v1_cv >= $v1_lo\n")
        write(buffer, "                    $OUT_cv = exp($v1_cv)\n")
        write(buffer, "                    $OUT_cc = (exp($v1_lo)*($v1_hi - $v1_cc) + exp($v1_hi)*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                    $OUT_cv = exp($v1_cc)\n")
        write(buffer, "                    $OUT_cc = (exp($v1_lo)*($v1_hi - $v1_cc) + exp($v1_hi)*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv = exp($v1_lo)\n")
        write(buffer, "                    $OUT_cc = (exp($v1_lo)*($v1_hi - $v1_cc) + exp($v1_hi)*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                if $v1_cv >= $v1_lo\n")
        write(buffer, "                    $OUT_cv = exp($v1_cv)\n")
        write(buffer, "                    $OUT_cc = exp($v1_hi)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                    $OUT_cv = exp($v1_cc)\n")
        write(buffer, "                    $OUT_cc = exp($v1_hi)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv = exp($v1_lo)\n")
        write(buffer, "                    $OUT_cc = exp($v1_hi)\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        $OUT_cvgrad = 0.0\n")
        write(buffer, "                        $OUT_ccgrad = 0.0\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        elseif $v1_hi >= $v1_cv\n")
        write(buffer, "            if $v1_lo >= $v1_cv\n")
        write(buffer, "                $OUT_cv = exp($v1_cv)\n")
        write(buffer, "                $OUT_cc = (exp($v1_lo)*($v1_hi - $v1_cv) + exp($v1_hi)*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                    if $sparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    end\n")
        elseif sparsity_case == 2
            write(buffer, "                    if $antisparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
            write(buffer, "                    end\n")
        else
            write(buffer, "                    $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                    $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
        end
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                $OUT_cv = exp($v1_cc)\n")
        write(buffer, "                $OUT_cc = (exp($v1_lo)*($v1_hi - $v1_cv) + exp($v1_hi)*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                    if $sparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    end\n")
        elseif sparsity_case == 2
            write(buffer, "                    if $antisparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
            write(buffer, "                    end\n")
        else
            write(buffer, "                    $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                    $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
        end
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_cv = exp($v1_lo)\n")
        write(buffer, "                $OUT_cc = (exp($v1_lo)*($v1_hi - $v1_cv) + exp($v1_hi)*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                    if $sparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    end\n")
        elseif sparsity_case == 2
            write(buffer, "                    if $antisparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
            write(buffer, "                    end\n")
        else
            write(buffer, "                    $OUT_cvgrad = 0.0\n")
            write(buffer, "                    $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_cvgrad\n")
        end
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        elseif $v1_cc >= $v1_hi\n")
        write(buffer, "            if $v1_lo >= $v1_cv\n")
        write(buffer, "                $OUT_cv = exp($v1_cv)\n")
        write(buffer, "                $OUT_cc = (exp($v1_lo)*($v1_hi - $v1_cc) + exp($v1_hi)*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                    if $sparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    end\n")
        elseif sparsity_case == 2
            write(buffer, "                    if $antisparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
            write(buffer, "                    end\n")
        else
            write(buffer, "                    $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                    $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
        end
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                $OUT_cv = exp($v1_cc)\n")
        write(buffer, "                $OUT_cc = (exp($v1_lo)*($v1_hi - $v1_cc) + exp($v1_hi)*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                    if $sparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    end\n")
        elseif sparsity_case == 2
            write(buffer, "                    if $antisparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
            write(buffer, "                    end\n")
        else
            write(buffer, "                    $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                    $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
        end
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_cv = exp($v1_lo)\n")
        write(buffer, "                $OUT_cc = (exp($v1_lo)*($v1_hi - $v1_cc) + exp($v1_hi)*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                    if $sparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    end\n")
        elseif sparsity_case == 2
            write(buffer, "                    if $antisparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
            write(buffer, "                    end\n")
        else
            write(buffer, "                    $OUT_cvgrad = 0.0\n")
            write(buffer, "                    $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)*$v1_ccgrad\n")
        end
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        else\n")
        write(buffer, "            if $v1_lo >= $v1_cv\n")
        write(buffer, "                $OUT_cv = exp($v1_cv)\n")
        write(buffer, "                $OUT_cc = exp($v1_hi)\n")
        write(buffer, "                while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                    if $sparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    end\n")
        elseif sparsity_case == 2
            write(buffer, "                    if $antisparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    end\n")
        else
            write(buffer, "                    $OUT_cvgrad = exp($v1_cv)*$v1_cvgrad\n")
            write(buffer, "                    $OUT_ccgrad = 0.0\n")
        end
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                $OUT_cv = exp($v1_cc)\n")
        write(buffer, "                $OUT_cc = exp($v1_hi)\n")
        write(buffer, "                while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                    if $sparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    end\n")
        elseif sparsity_case == 2
            write(buffer, "                    if $antisparsity_string\n")
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
            write(buffer, "                    end\n")
        else
            write(buffer, "                    $OUT_cvgrad = exp($v1_cc)*$v1_ccgrad\n")
            write(buffer, "                    $OUT_ccgrad = 0.0\n")
        end
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_cv = exp($v1_lo)\n")
        write(buffer, "                $OUT_cc = exp($v1_hi)\n")
        write(buffer, "                while col <= colmax\n")
        write(buffer, "                    $OUT_cvgrad = 0.0\n")
        write(buffer, "                    $OUT_ccgrad = 0.0\n")
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Check if interval is degenerate, and if so, set the concave relaxation subgradient to 0.0\n")
        write(buffer, "        if $v1_hi == $v1_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv = $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc = $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
    else
        ID = findfirst(==(v1), varlist)
        isnothing(ID) && error("Empty varlist")
        write(buffer, "        #################\n")
        write(buffer, "        ## Exponential ##\n")
        write(buffer, "        #################\n")
        write(buffer, "\n")
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        # Begin rule\n")
        write(buffer, "        $OUT_lo = exp($v1_lo)\n")
        write(buffer, "        $OUT_hi = exp($v1_hi)\n")
        write(buffer, "        $OUT_cv = exp($v1_cv)\n")
        write(buffer, "        $OUT_cc = (exp($v1_lo)*($v1_hi - $v1_cv) + exp($v1_hi)*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "        while col <= colmax\n")
        write(buffer, "            if col == Int32($ID)\n")
        write(buffer, "                $OUT_cvgrad = exp($v1_cv)\n")
        write(buffer, "                $OUT_ccgrad = (exp($v1_hi) - exp($v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "            end\n")
        write(buffer, "            col += Int32(1)\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Check if interval is degenerate, and if so, set the concave relaxation subgradient to 0.0\n")
        write(buffer, "        if $v1_hi == $v1_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv = $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc = $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    end
    return String(take!(buffer))
end


# Logarithm
# max threads: 896
function SCMC_log_kernel(OUT::String, v1::String, varlist::Vector{String}, sparsity::Vector{Int}; sum_output::Bool=false)
    if sum_output
        eq = "+="
    else
        eq = "="
    end

    if startswith(v1, "temp")
        v1_cv = "$(v1)_cv"
        v1_cc = "$(v1)_cc"
        v1_lo = "$(v1)_lo"
        v1_hi = "$(v1)_hi"
        v1_cvgrad = "$(v1)_cvgrad[col]"
        v1_ccgrad = "$(v1)_ccgrad[col]"
    elseif startswith(v1, "aux")
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,2]"
        v1_lo = "$(v1)[idx,3]"
        v1_hi = "$(v1)[idx,4]"
        v1_cvgrad = "$(v1)[idx,end-2*colmax+col]"
        v1_ccgrad = "$(v1)[idx,end-1*colmax+col]"
    else
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,1]"
        v1_lo = "$(v1)[idx,2]"
        v1_hi = "$(v1)[idx,3]"
    end
    if startswith(OUT, "temp")
        OUT_cv = "$(OUT)_cv"
        OUT_cc = "$(OUT)_cc"
        OUT_lo = "$(OUT)_lo"
        OUT_hi = "$(OUT)_hi"
        OUT_cvgrad = "$(OUT)_cvgrad[col]"
        OUT_ccgrad = "$(OUT)_ccgrad[col]"
    else
        OUT_cv = "$(OUT)[idx,1]"
        OUT_cc = "$(OUT)[idx,2]"
        OUT_lo = "$(OUT)[idx,3]"
        OUT_hi = "$(OUT)[idx,4]"
        OUT_cvgrad = "$(OUT)[idx,end-2*colmax+col]"
        OUT_ccgrad = "$(OUT)[idx,end-1*colmax+col]"
    end

    # Get the anti-sparsity list (elements NOT being used)
    antisparsity = collect(1:length(varlist))
    antisparsity = antisparsity[antisparsity .∉ Ref(sparsity)]
    
    # Determine the sparsity case:
    # 1) Use sparsity list
    # 2) Use antisparsity list (because it's shorter than the sparsity list)
    # 3) Don't use either, simply calculate all elements
    if length(sparsity) <= length(antisparsity)
        sparsity_case = 1
        sparsity_string = join(["col == Int32($(x))" for x in sparsity], " || ")
    elseif length(antisparsity) > 0
        antisparsity_string = join(["col == Int32($(x))" for x in antisparsity], " || ")
        sparsity_case = 2
    else
        sparsity_case = 3
    end
    
    # Create the buffer that we will write to
    buffer = Base.IOBuffer()

    # Write all the lines to the buffer
    if startswith(v1, r"aux|temp")
        write(buffer, "        ###############\n")
        write(buffer, "        ## Logarithm ##\n")
        write(buffer, "        ###############\n")
        write(buffer, "\n")
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        # Begin rule\n")
        write(buffer, "        $OUT_lo $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "        $OUT_hi $eq log(max($v1_hi, 0.0))\n")
        write(buffer, "        if $v1_cc >= $v1_cv\n")
        write(buffer, "            if $v1_cv >= $v1_hi\n")
        write(buffer, "                if $v1_cv >= $v1_lo\n")
        write(buffer, "                    if $v1_hi > $v1_lo\n")
        write(buffer, "                        $OUT_cv $eq (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo) * ($v1_cv - $v1_lo) + log(max($v1_lo, 0.0))\n")
        write(buffer, "                        $OUT_cc $eq log(max($v1_cv, 0.0))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                        $OUT_cc $eq log(max($v1_cv, 0.0))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc == $v1_cv\n")
        write(buffer, "                    if $v1_hi > $v1_lo\n")
        write(buffer, "                        $OUT_cv $eq (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo) * ($v1_cv - $v1_lo) + log(max($v1_lo, 0.0))\n")
        write(buffer, "                        $OUT_cc $eq log(max($v1_cv, 0.0))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                        $OUT_cc $eq log(max($v1_cv, 0.0))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                    if $v1_hi > $v1_lo\n")
        write(buffer, "                        $OUT_cv $eq (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo) * ($v1_cc - $v1_lo) + log(max($v1_lo, 0.0))\n")
        write(buffer, "                        $OUT_cc $eq log(max($v1_cv, 0.0))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                        $OUT_cc $eq log(max($v1_cv, 0.0))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_cv, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_cc == $v1_cv\n")
        write(buffer, "                if $v1_hi > $v1_lo\n")
        write(buffer, "                    $OUT_cv $eq (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo) * ($v1_cv - $v1_lo) + log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_cv, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_cv, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_hi >= $v1_cc\n")
        write(buffer, "                if $v1_cv >= $v1_lo\n")
        write(buffer, "                    if $v1_hi > $v1_lo\n")
        write(buffer, "                        $OUT_cv $eq (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo) * ($v1_cv - $v1_lo) + log(max($v1_lo, 0.0))\n")
        write(buffer, "                        $OUT_cc $eq log(max($v1_cc, 0.0))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                        $OUT_cc $eq log(max($v1_cc, 0.0))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                    if $v1_hi > $v1_lo\n")
        write(buffer, "                        $OUT_cv $eq (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo) * ($v1_cc - $v1_lo) + log(max($v1_lo, 0.0))\n")
        write(buffer, "                        $OUT_cc $eq log(max($v1_cc, 0.0))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                        $OUT_cc $eq log(max($v1_cc, 0.0))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_cc, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                if $v1_cv >= $v1_lo\n")
        write(buffer, "                    if $v1_hi > $v1_lo\n")
        write(buffer, "                        $OUT_cv $eq (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo) * ($v1_cv - $v1_lo) + log(max($v1_lo, 0.0))\n")
        write(buffer, "                        $OUT_cc $eq log(max($v1_hi, 0.0))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                        $OUT_cc $eq log(max($v1_hi, 0.0))\n")
        write(buffer, "                        while col <= colmax\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                    if $v1_hi > $v1_lo\n")
        write(buffer, "                        $OUT_cv $eq (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo) * ($v1_cc - $v1_lo) + log(max($v1_lo, 0.0))\n")
        write(buffer, "                        $OUT_cc $eq log(max($v1_hi, 0.0))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                        $OUT_cc $eq log(max($v1_hi, 0.0))\n")
        write(buffer, "                        while col <= colmax\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_hi, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        elseif $v1_hi >= $v1_cv\n")
        write(buffer, "            if $v1_lo >= $v1_cv\n")
        write(buffer, "                if $v1_hi > $v1_lo\n")
        write(buffer, "                    $OUT_cv $eq (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo) * ($v1_cv - $v1_lo) + log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_cv, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_cv, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                if $v1_hi > $v1_lo\n")
        write(buffer, "                    $OUT_cv $eq (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo) * ($v1_cc - $v1_lo) + log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_cv, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
        end
        write(buffer, "                       col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_cv, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                $OUT_cc $eq log(max($v1_cv, 0.0))\n")
        write(buffer, "                while col <= colmax\n")
        if sparsity_case == 1    
            write(buffer, "                    if $sparsity_string\n")
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                    end\n")
        elseif sparsity_case == 2
            write(buffer, "                    if $antisparsity_string\n")
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
            write(buffer, "                    end\n")
        else
            write(buffer, "                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                    $OUT_ccgrad $eq $v1_cvgrad * (1/$v1_cv)\n")
        end
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        elseif $v1_cc >= $v1_hi\n")
        write(buffer, "            if $v1_lo >= $v1_cv\n")
        write(buffer, "                if $v1_hi > $v1_lo\n")
        write(buffer, "                    $OUT_cv $eq (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo) * ($v1_cv - $v1_lo) + log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_cc, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_cc, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                if $v1_hi > $v1_lo\n")
        write(buffer, "                    $OUT_cv $eq (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo) * ($v1_cc - $v1_lo) + log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_cc, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_cc, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                $OUT_cc $eq log(max($v1_cc, 0.0))\n")
        write(buffer, "                while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                    if $sparsity_string\n")
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                    end\n")
        elseif sparsity_case == 2
            write(buffer, "                    if $antisparsity_string\n")
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                    else\n")
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
            write(buffer, "                    end\n")
        else
            write(buffer, "                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                    $OUT_ccgrad $eq $v1_ccgrad * (1/$v1_cc)\n")
        end
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        else\n")
        write(buffer, "            if $v1_lo >= $v1_cv\n")
        write(buffer, "                if $v1_hi > $v1_lo\n")
        write(buffer, "                    $OUT_cv $eq (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo) * ($v1_cv - $v1_lo) + log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_hi, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_hi, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                if $v1_hi > $v1_lo\n")
        write(buffer, "                    $OUT_cv $eq (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo) * ($v1_cc - $v1_lo) + log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_hi, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                    $OUT_cc $eq log(max($v1_hi, 0.0))\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "                $OUT_cc $eq log(max($v1_hi, 0.0))\n")
        write(buffer, "                while col <= colmax\n")
        write(buffer, "                    $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                    $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Convert domain errors to NaNs\n")
        write(buffer, "        if $v1_lo < 0.0\n")
        write(buffer, "            $OUT_cv = NaN\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = NaN\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $v1_cv < 0.0\n")
        write(buffer, "            $OUT_cv = NaN\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = NaN\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $v1_cc < 0.0\n")
        write(buffer, "            $OUT_cc = NaN\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = NaN\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $v1_hi < 0.0\n")
        write(buffer, "            $OUT_cc = NaN\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = NaN\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv = $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc = $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    else
        ID = findfirst(==(v1), varlist)
        isnothing(ID) && error("Empty varlist")
        write(buffer, "        ###############\n")
        write(buffer, "        ## Logarithm ##\n")
        write(buffer, "        ###############\n")
        write(buffer, "\n")
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        # Begin rule\n")
        write(buffer, "        $OUT_lo $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "        $OUT_hi $eq log(max($v1_hi, 0.0))\n")
        write(buffer, "        if $v1_hi > $v1_lo\n")
        write(buffer, "            $OUT_cv $eq (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo) * ($v1_cv - $v1_lo) + log(max($v1_lo, 0.0))\n")
        write(buffer, "            $OUT_cc $eq log(max($v1_cv, 0.0))\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                if col == Int32($ID)\n")
        write(buffer, "                    $OUT_cvgrad $eq (log(max($v1_hi, 0.0)) - log(max($v1_lo, 0.0)))/($v1_hi - $v1_lo)\n")
        write(buffer, "                    $OUT_ccgrad $eq (1/$v1_cv)\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                    $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                end\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        else\n")
        write(buffer, "            $OUT_cv $eq log(max($v1_lo, 0.0))\n")
        write(buffer, "            $OUT_cc $eq log(max($v1_cv, 0.0))\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                if col == Int32($ID)\n")
        write(buffer, "                    $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                    $OUT_ccgrad $eq (1/$v1_cv)\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                    $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                end\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Convert domain errors to NaNs\n")
        write(buffer, "        if $v1_lo < 0.0\n")
        write(buffer, "            $OUT_cv = NaN\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = NaN\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $v1_cv < 0.0\n")
        write(buffer, "            $OUT_cv = NaN\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = NaN\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $v1_cc < 0.0\n")
        write(buffer, "            $OUT_cc = NaN\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = NaN\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $v1_hi < 0.0\n")
        write(buffer, "            $OUT_cc = NaN\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = NaN\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv = $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc = $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    end
    return String(take!(buffer))
end

# Inversion (DONE)
# max threads: 768
function SCMC_inv_kernel(OUT::String, v1::String, varlist::Vector{String}, sparsity::Vector{Int}; sum_output::Bool=false)
    if sum_output
        eq = "+="
    else
        eq = "="
    end

    if startswith(v1, "temp")
        v1_cv = "$(v1)_cv"
        v1_cc = "$(v1)_cc"
        v1_lo = "$(v1)_lo"
        v1_hi = "$(v1)_hi"
        v1_cvgrad = "$(v1)_cvgrad[col]"
        v1_ccgrad = "$(v1)_ccgrad[col]"
    elseif startswith(v1, "aux")
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,2]"
        v1_lo = "$(v1)[idx,3]"
        v1_hi = "$(v1)[idx,4]"
        v1_cvgrad = "$(v1)[idx,end-2*colmax+col]"
        v1_ccgrad = "$(v1)[idx,end-1*colmax+col]"
    else
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,1]"
        v1_lo = "$(v1)[idx,2]"
        v1_hi = "$(v1)[idx,3]"
    end
    if startswith(OUT, "temp")
        OUT_cv = "$(OUT)_cv"
        OUT_cc = "$(OUT)_cc"
        OUT_lo = "$(OUT)_lo"
        OUT_hi = "$(OUT)_hi"
        OUT_cvgrad = "$(OUT)_cvgrad[col]"
        OUT_ccgrad = "$(OUT)_ccgrad[col]"
    else
        OUT_cv = "$(OUT)[idx,1]"
        OUT_cc = "$(OUT)[idx,2]"
        OUT_lo = "$(OUT)[idx,3]"
        OUT_hi = "$(OUT)[idx,4]"
        OUT_cvgrad = "$(OUT)[idx,end-2*colmax+col]"
        OUT_ccgrad = "$(OUT)[idx,end-1*colmax+col]"
    end

    # Get the anti-sparsity list (elements NOT being used)
    antisparsity = collect(1:length(varlist))
    antisparsity = antisparsity[antisparsity .∉ Ref(sparsity)]
    
    # Determine the sparsity case:
    # 1) Use sparsity list
    # 2) Use antisparsity list (because it's shorter than the sparsity list)
    # 3) Don't use either, simply calculate all elements
    if length(sparsity) <= length(antisparsity)
        sparsity_case = 1
        sparsity_string = join(["col == Int32($(x))" for x in sparsity], " || ")
    elseif length(antisparsity) > 0
        antisparsity_string = join(["col == Int32($(x))" for x in antisparsity], " || ")
        sparsity_case = 2
    else
        sparsity_case = 3
    end
    
    # Create the buffer that we will write to
    buffer = Base.IOBuffer()

    # Write all the lines to the buffer
    if startswith(v1, r"aux|temp")
        write(buffer, "        ##############################\n")
        write(buffer, "        ## Multiplicative Inversion ##\n")
        write(buffer, "        ##############################\n")
        write(buffer, "\n")
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        # Begin rule\n")
        write(buffer, "        if $v1_lo > 0.0 # inv1(x)\n")
        write(buffer, "            $OUT_lo = inv($v1_hi)\n")
        write(buffer, "            $OUT_hi = inv($v1_lo)\n")
        write(buffer, "            if $v1_cc >= $v1_cv\n")
        write(buffer, "                if $v1_cv >= $v1_hi\n")
        write(buffer, "                    if $v1_cv >= $v1_lo\n")
        write(buffer, "                        $OUT_cv = (1.0 / $v1_cv)\n")
        write(buffer, "                        $OUT_cc = ($v1_hi + $v1_lo - $v1_cv)/($v1_lo*$v1_hi)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                                $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                                $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_cc == $v1_cv\n")
        write(buffer, "                        $OUT_cv = (1.0 / $v1_cv)\n")
        write(buffer, "                        $OUT_cc = ($v1_hi + $v1_lo - $v1_cv)/($v1_lo*$v1_hi)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                                $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                                $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                        $OUT_cv = (1.0 / $v1_cv)\n")
        write(buffer, "                        $OUT_cc = ($v1_hi + $v1_lo - $v1_cc)/($v1_lo*$v1_hi)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                                $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                                $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv = (1.0 / $v1_cv)\n")
        write(buffer, "                        $OUT_cc = (1.0 / $v1_lo)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                                $OUT_ccgrad = 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                                $OUT_ccgrad = 0.0\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc == $v1_cv\n")
        write(buffer, "                    $OUT_cv = (1.0 / $v1_cv)\n")
        write(buffer, "                    $OUT_cc = ($v1_hi + $v1_lo - $v1_cv)/($v1_lo*$v1_hi)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_hi >= $v1_cc\n")
        write(buffer, "                    if $v1_cv >= $v1_lo\n")
        write(buffer, "                        $OUT_cv = (1.0 / $v1_cc)\n")
        write(buffer, "                        $OUT_cc = ($v1_hi + $v1_lo - $v1_cv)/($v1_lo*$v1_hi)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                                $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                                $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                        $OUT_cv = (1.0 / $v1_cc)\n")
        write(buffer, "                        $OUT_cc = ($v1_hi + $v1_lo - $v1_cc)/($v1_lo*$v1_hi)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                                $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                                $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv = (1.0 / $v1_cc)\n")
        write(buffer, "                        $OUT_cc = (1.0 / $v1_lo)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                                $OUT_ccgrad = 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                                $OUT_ccgrad = 0.0\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    if $v1_cv >= $v1_lo\n")
        write(buffer, "                        $OUT_cv = (1.0 / $v1_hi)\n")
        write(buffer, "                        $OUT_cc = ($v1_hi + $v1_lo - $v1_cv)/($v1_lo*$v1_hi)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = 0.0\n")
            write(buffer, "                                $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = 0.0\n")
            write(buffer, "                                $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                        $OUT_cv = (1.0 / $v1_hi)\n")
        write(buffer, "                        $OUT_cc = ($v1_hi + $v1_lo - $v1_cc)/($v1_lo*$v1_hi)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = 0.0\n")
            write(buffer, "                                $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = 0.0\n")
            write(buffer, "                                $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv = (1.0 / $v1_hi)\n")
        write(buffer, "                        $OUT_cc = (1.0 / $v1_lo)\n")
        write(buffer, "                        while col <= colmax\n")
        write(buffer, "                            $OUT_cvgrad = 0.0\n")
        write(buffer, "                            $OUT_ccgrad = 0.0\n")
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_hi >= $v1_cv\n")
        write(buffer, "                if $v1_lo >= $v1_cv\n")
        write(buffer, "                    $OUT_cv = (1.0 / $v1_cv)\n")
        write(buffer, "                    $OUT_cc = ($v1_hi + $v1_lo - $v1_cv)/($v1_lo*$v1_hi)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                    $OUT_cv = (1.0 / $v1_cv)\n")
        write(buffer, "                    $OUT_cc = ($v1_hi + $v1_lo - $v1_cc)/($v1_lo*$v1_hi)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv = (1.0 / $v1_cv)\n")
        write(buffer, "                    $OUT_cc = (1.0 / $v1_lo)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = -1.0/($v1_cv*$v1_cv) * $v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_cc >= $v1_hi\n")
        write(buffer, "                if $v1_lo >= $v1_cv\n")
        write(buffer, "                    $OUT_cv = (1.0 / $v1_cc)\n")
        write(buffer, "                    $OUT_cc = ($v1_hi + $v1_lo - $v1_cv)/($v1_lo*$v1_hi)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                        $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                    $OUT_cv = (1.0 / $v1_cc)\n")
        write(buffer, "                    $OUT_cc = ($v1_hi + $v1_lo - $v1_cc)/($v1_lo*$v1_hi)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                        $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv = (1.0 / $v1_cc)\n")
        write(buffer, "                    $OUT_cc = (1.0 / $v1_lo)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = -1.0/($v1_cc*$v1_cc) * $v1_ccgrad\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                if $v1_lo >= $v1_cv\n")
        write(buffer, "                    $OUT_cv = (1.0 / $v1_hi)\n")
        write(buffer, "                    $OUT_cc = ($v1_hi + $v1_lo - $v1_cv)/($v1_lo*$v1_hi)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                    $OUT_cv = (1.0 / $v1_hi)\n")
        write(buffer, "                    $OUT_cc = ($v1_hi + $v1_lo - $v1_cc)/($v1_lo*$v1_hi)\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = -1.0/($v1_lo*$v1_hi) * $v1_ccgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv = (1.0 / $v1_hi)\n")
        write(buffer, "                    $OUT_cc = (1.0 / $v1_lo)\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        $OUT_cvgrad = 0.0\n")
        write(buffer, "                        $OUT_ccgrad = 0.0\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        elseif $v1_hi < 0.0 # -inv(-x)\n")
        write(buffer, "            $OUT_lo = -inv(-$v1_hi)\n")
        write(buffer, "            $OUT_hi = -inv(-$v1_lo)\n")
        write(buffer, "            if $v1_cv <= $v1_cc\n")
        write(buffer, "                if $v1_cc== $v1_cv\n")
        write(buffer, "                    $OUT_cv = ($v1_lo + $v1_hi - $v1_cc)/($v1_lo*$v1_hi)\n")
        write(buffer, "                    $OUT_cc = 1.0/$v1_cc\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                        $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc <= $v1_hi\n")
        write(buffer, "                    if $v1_cc <= $v1_lo\n")
        write(buffer, "                        $OUT_cv = ($v1_lo + $v1_hi - $v1_cc)/($v1_lo*$v1_hi)\n")
        write(buffer, "                        $OUT_cc = 1.0/$v1_cc\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                                $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                                $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_lo <= $v1_cv\n")
        write(buffer, "                        $OUT_cv = ($v1_lo + $v1_hi - $v1_cc)/($v1_lo*$v1_hi)\n")
        write(buffer, "                        $OUT_cc = 1.0/$v1_cv\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                                $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                                $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv = ($v1_lo + $v1_hi - $v1_cc)/($v1_lo*$v1_hi)\n")
        write(buffer, "                        $OUT_cc = 1.0/$v1_lo \n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                                $OUT_ccgrad = 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                                $OUT_ccgrad = 0.0\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_hi <= $v1_cv\n")
        write(buffer, "                    if $v1_cc <= $v1_lo\n")
        write(buffer, "                        $OUT_cv = ($v1_lo + $v1_hi - $v1_cv)/($v1_lo*$v1_hi)\n")
        write(buffer, "                        $OUT_cc = 1.0/$v1_cc\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                                $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                                $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_lo <= $v1_cv\n")
        write(buffer, "                        $OUT_cv = ($v1_lo + $v1_hi - $v1_cv)/($v1_lo*$v1_hi)\n")
        write(buffer, "                        $OUT_cc = 1.0/$v1_cv\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                                $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                                $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv = ($v1_lo + $v1_hi - $v1_cv)/($v1_lo*$v1_hi)\n")
        write(buffer, "                        $OUT_cc = 1.0/$v1_lo \n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                                $OUT_ccgrad = 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                                $OUT_ccgrad = 0.0\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    if $v1_cc <= $v1_lo\n")
        write(buffer, "                        $OUT_cv = 1.0/$v1_hi\n")
        write(buffer, "                        $OUT_cc = 1.0/$v1_cc\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = 0.0\n")
            write(buffer, "                                $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = 0.0\n")
            write(buffer, "                                $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_lo <= $v1_cv\n")
        write(buffer, "                        $OUT_cv = 1.0/$v1_hi\n")
        write(buffer, "                        $OUT_cc = 1.0/$v1_cv\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad = 0.0\n")
            write(buffer, "                                $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad = 0.0\n")
            write(buffer, "                                $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv = 1.0/$v1_hi\n")
        write(buffer, "                        $OUT_cc = 1.0/$v1_lo\n")
        write(buffer, "                        while col <= colmax\n")
        write(buffer, "                            $OUT_cvgrad = 0.0\n")
        write(buffer, "                            $OUT_ccgrad = 0.0\n")
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_hi <= $v1_cc\n")
        write(buffer, "                if $v1_lo <= $v1_cc\n")
        write(buffer, "                    $OUT_cv = ($v1_lo + $v1_hi - $v1_cc)/($v1_lo*$v1_hi)\n")
        write(buffer, "                    $OUT_cc = 1.0/$v1_cc\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                        $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cv <= $v1_lo\n")
        write(buffer, "                    $OUT_cv = ($v1_lo + $v1_hi - $v1_cc)/($v1_lo*$v1_hi)\n")
        write(buffer, "                    $OUT_cc = 1.0/$v1_cv\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                        $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv = ($v1_lo + $v1_hi - $v1_cc)/($v1_lo*$v1_hi)\n")
        write(buffer, "                    $OUT_cc = 1.0/$v1_lo \n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_ccgrad\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_cv <= $v1_hi\n")
        write(buffer, "                if $v1_lo <= $v1_cc\n")
        write(buffer, "                    $OUT_cv = ($v1_lo + $v1_hi - $v1_cv)/($v1_lo*$v1_hi)\n")
        write(buffer, "                    $OUT_cc = 1.0/$v1_cc\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cv <= $v1_lo\n")
        write(buffer, "                    $OUT_cv = ($v1_lo + $v1_hi - $v1_cv)/($v1_lo*$v1_hi)\n")
        write(buffer, "                    $OUT_cc = 1.0/$v1_cv\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv = ($v1_lo + $v1_hi - $v1_cv)/($v1_lo*$v1_hi)\n")
        write(buffer, "                    $OUT_cc = 1.0/$v1_lo \n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                            $OUT_ccgrad = 0.0\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi)) * $v1_cvgrad\n")
            write(buffer, "                        $OUT_ccgrad = 0.0\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                if $v1_lo <= $v1_cc\n")
        write(buffer, "                    $OUT_cv = 1.0/$v1_hi\n")
        write(buffer, "                    $OUT_cc = 1.0/$v1_cc\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc)) * $v1_ccgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cv <= $v1_lo\n")
        write(buffer, "                    $OUT_cv = 1.0/$v1_hi\n")
        write(buffer, "                    $OUT_cc = 1.0/$v1_cv\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad = 0.0\n")
            write(buffer, "                            $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad = 0.0\n")
            write(buffer, "                        $OUT_ccgrad = (-1.0/($v1_cv*$v1_cv)) * $v1_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv = 1.0/$v1_hi\n")
        write(buffer, "                    $OUT_cc = 1.0/$v1_lo\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        $OUT_cvgrad = 0.0\n")
        write(buffer, "                        $OUT_ccgrad = 0.0\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        else #invalid\n")
        write(buffer, "            $OUT_lo = NaN\n")
        write(buffer, "            $OUT_hi = NaN\n")
        write(buffer, "            $OUT_cv = NaN\n")
        write(buffer, "            $OUT_cc = NaN\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = NaN\n")
        write(buffer, "                $OUT_ccgrad = NaN\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv = $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc = $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    else
        ID = findfirst(==(v1), varlist)
        isnothing(ID) && error("Empty varlist")
        write(buffer, "        ##############################\n")
        write(buffer, "        ## Multiplicative Inversion ##\n")
        write(buffer, "        ##############################\n")
        write(buffer, "\n")
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        # Begin rule\n")
        write(buffer, "        if $v1_lo > 0.0 # inv1(x)\n")
        write(buffer, "            $OUT_lo = inv($v1_hi)\n")
        write(buffer, "            $OUT_hi = inv($v1_lo)\n")
        write(buffer, "            $OUT_cv = (1.0 / $v1_cv)\n")
        write(buffer, "            $OUT_cc = ($v1_hi + $v1_lo - $v1_cv)/($v1_lo*$v1_hi)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                if col == Int32($ID)\n")
        write(buffer, "                    $OUT_cvgrad = -1.0/($v1_cv*$v1_cv)\n")
        write(buffer, "                    $OUT_ccgrad = -1.0/($v1_lo*$v1_hi)\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                    $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                end\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        elseif $v1_hi < 0.0 # -inv(-x)\n")
        write(buffer, "            $OUT_lo = -inv(-$v1_hi)\n")
        write(buffer, "            $OUT_hi = -inv(-$v1_lo)\n")
        write(buffer, "            $OUT_cv = ($v1_lo + $v1_hi - $v1_cc)/($v1_lo*$v1_hi)\n")
        write(buffer, "            $OUT_cc = 1.0/$v1_cc\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                if col == Int32($ID)\n")
        write(buffer, "                    $OUT_cvgrad = (-1.0/($v1_lo*$v1_hi))\n")
        write(buffer, "                    $OUT_ccgrad = (-1.0/($v1_cc*$v1_cc))\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                    $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                end\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        else #invalid\n")
        write(buffer, "            $OUT_lo = NaN\n")
        write(buffer, "            $OUT_hi = NaN\n")
        write(buffer, "            $OUT_cv = NaN\n")
        write(buffer, "            $OUT_cc = NaN\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = NaN\n")
        write(buffer, "                $OUT_ccgrad = NaN\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv = $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc = $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    end
    return String(take!(buffer))
end

# Multiplication by a constant
# max threads: 640
function SCMC_cmul_kernel(OUT::String, v1::String, CONST::Real, varlist::Vector{String}, sparsity::Vector{Int}; sum_output::Bool=false)
    if sum_output
        eq = "+="
    else
        eq = "="
    end

    if startswith(v1, "temp")
        v1_cv = "$(v1)_cv"
        v1_cc = "$(v1)_cc"
        v1_lo = "$(v1)_lo"
        v1_hi = "$(v1)_hi"
        v1_cvgrad = "$(v1)_cvgrad[col]"
        v1_ccgrad = "$(v1)_ccgrad[col]"
    elseif startswith(v1, "aux")
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,2]"
        v1_lo = "$(v1)[idx,3]"
        v1_hi = "$(v1)[idx,4]"
        v1_cvgrad = "$(v1)[idx,end-2*colmax+col]"
        v1_ccgrad = "$(v1)[idx,end-1*colmax+col]"
    else
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,1]"
        v1_lo = "$(v1)[idx,2]"
        v1_hi = "$(v1)[idx,3]"
    end
    if startswith(OUT, "temp")
        OUT_cv = "$(OUT)_cv"
        OUT_cc = "$(OUT)_cc"
        OUT_lo = "$(OUT)_lo"
        OUT_hi = "$(OUT)_hi"
        OUT_cvgrad = "$(OUT)_cvgrad[col]"
        OUT_ccgrad = "$(OUT)_ccgrad[col]"
    else
        OUT_cv = "$(OUT)[idx,1]"
        OUT_cc = "$(OUT)[idx,2]"
        OUT_lo = "$(OUT)[idx,3]"
        OUT_hi = "$(OUT)[idx,4]"
        OUT_cvgrad = "$(OUT)[idx,end-2*colmax+col]"
        OUT_ccgrad = "$(OUT)[idx,end-1*colmax+col]"
    end

    # Get the anti-sparsity list (elements NOT being used)
    antisparsity = collect(1:length(varlist))
    antisparsity = antisparsity[antisparsity .∉ Ref(sparsity)]
    
    # Determine the sparsity case:
    # 1) Use sparsity list
    # 2) Use antisparsity list (because it's shorter than the sparsity list)
    # 3) Don't use either, simply calculate all elements
    if length(sparsity) <= length(antisparsity)
        sparsity_case = 1
        sparsity_string = join(["col == Int32($(x))" for x in sparsity], " || ")
    elseif length(antisparsity) > 0
        antisparsity_string = join(["col == Int32($(x))" for x in antisparsity], " || ")
        sparsity_case = 2
    else
        sparsity_case = 3
    end
    
    # Create the buffer that we will write to
    buffer = Base.IOBuffer()

    # Write all the lines to the buffer

    if CONST >= 0.0
        if startswith(v1, r"aux|temp")
            write(buffer, "        ###########################################\n")
            write(buffer, "        ## Multiplication by a Positive Constant ##\n")
            write(buffer, "        ###########################################\n")
            write(buffer, "\n")
            write(buffer, "        # Reset the column counter\n")
            write(buffer, "        col = Int32(1)\n")
            write(buffer, "\n")
            write(buffer, "        # Begin rule\n")
            write(buffer, "        $OUT_lo $eq $CONST*$v1_lo\n")
            write(buffer, "        $OUT_hi $eq $CONST*$v1_hi\n")
            write(buffer, "        $OUT_cv $eq $CONST*$v1_cv\n")
            write(buffer, "        $OUT_cc $eq $CONST*$v1_cc\n")
            write(buffer, "        while col <= colmax\n")
            if sparsity_case == 1
                write(buffer, "            if $sparsity_string\n")
                write(buffer, "                $OUT_cvgrad $eq $CONST*$v1_cvgrad\n")
                write(buffer, "                $OUT_ccgrad $eq $CONST*$v1_ccgrad\n")
                write(buffer, "            else\n")
                write(buffer, "                $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                $OUT_ccgrad $eq 0.0\n")
                write(buffer, "            end\n")
            elseif sparsity_case == 2
                write(buffer, "            if $antisparsity_string\n")
                write(buffer, "                $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                $OUT_ccgrad $eq 0.0\n")
                write(buffer, "            else\n")
                write(buffer, "                $OUT_cvgrad $eq $CONST*$v1_cvgrad\n")
                write(buffer, "                $OUT_ccgrad $eq $CONST*$v1_ccgrad\n")
                write(buffer, "            end\n")
            else
                write(buffer, "            $OUT_cvgrad $eq $CONST*$v1_cvgrad\n")
                write(buffer, "            $OUT_ccgrad $eq $CONST*$v1_ccgrad\n")
            end
            write(buffer, "            col += Int32(1)\n")
            write(buffer, "        end\n")
            write(buffer, "\n")
            write(buffer, "        # Cut\n")
            write(buffer, "        if $OUT_cv < $OUT_lo\n")
            write(buffer, "            $OUT_cv = $OUT_lo\n")
            write(buffer, "            col = Int32(1)\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                $OUT_cvgrad = 0.0\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
            write(buffer, "        end\n")
            write(buffer, "        if $OUT_cc > $OUT_hi\n")
            write(buffer, "            $OUT_cc = $OUT_hi\n")
            write(buffer, "            col = Int32(1)\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                $OUT_ccgrad = 0.0\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
            write(buffer, "        end\n")
            write(buffer, "\n")
        else
            ID = findfirst(==(v1), varlist)
            isnothing(ID) && error("Empty varlist")
            write(buffer, "        ###########################################\n")
            write(buffer, "        ## Multiplication by a Positive Constant ##\n")
            write(buffer, "        ###########################################\n")
            write(buffer, "\n")
            write(buffer, "        # Reset the column counter\n")
            write(buffer, "        col = Int32(1)\n")
            write(buffer, "\n")
            write(buffer, "        # Begin rule\n")
            write(buffer, "        $OUT_lo $eq $CONST*$v1_lo\n")
            write(buffer, "        $OUT_hi $eq $CONST*$v1_hi\n")
            write(buffer, "        $OUT_cv $eq $CONST*$v1_cv\n")
            write(buffer, "        $OUT_cc $eq $CONST*$v1_cc\n")
            write(buffer, "        while col <= colmax\n")
            write(buffer, "            if col == Int32($ID)\n")
            write(buffer, "                $OUT_cvgrad $eq $CONST\n")
            write(buffer, "                $OUT_ccgrad $eq $CONST\n")
            write(buffer, "            else\n")
            write(buffer, "                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "            end\n")
            write(buffer, "            col += Int32(1)\n")
            write(buffer, "        end\n")
            write(buffer, "\n")
            write(buffer, "        # Cut\n")
            write(buffer, "        if $OUT_cv < $OUT_lo\n")
            write(buffer, "            $OUT_cv = $OUT_lo\n")
            write(buffer, "            col = Int32(1)\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                $OUT_cvgrad = 0.0\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
            write(buffer, "        end\n")
            write(buffer, "        if $OUT_cc > $OUT_hi\n")
            write(buffer, "            $OUT_cc = $OUT_hi\n")
            write(buffer, "            col = Int32(1)\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                $OUT_ccgrad = 0.0\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
            write(buffer, "        end\n")
            write(buffer, "\n")
        end
    else
        if startswith(v1, r"aux|temp")
            write(buffer, "        ###########################################\n")
            write(buffer, "        ## Multiplication by a Negative Constant ##\n")
            write(buffer, "        ###########################################\n")
            write(buffer, "\n")
            write(buffer, "        # Reset the column counter\n")
            write(buffer, "        col = Int32(1)\n")
            write(buffer, "\n")
            write(buffer, "        # Begin rule\n")
            write(buffer, "        $OUT_lo $eq $CONST*$v1_hi\n")
            write(buffer, "        $OUT_hi $eq $CONST*$v1_lo\n")
            write(buffer, "        $OUT_cv $eq $CONST*$v1_cc\n")
            write(buffer, "        $OUT_cc $eq $CONST*$v1_cv\n")
            write(buffer, "        while col <= colmax\n")
            if sparsity_case == 1
                write(buffer, "            if $sparsity_string\n")
                write(buffer, "                $OUT_cvgrad $eq $CONST*$v1_ccgrad\n")
                write(buffer, "                $OUT_ccgrad $eq $CONST*$v1_cvgrad\n")
                write(buffer, "            else\n")
                write(buffer, "                $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                $OUT_ccgrad $eq 0.0\n")
                write(buffer, "            end\n")
            elseif sparsity_case == 2
                write(buffer, "            if $antisparsity_string\n")
                write(buffer, "                $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                $OUT_ccgrad $eq 0.0\n")
                write(buffer, "            else\n")
                write(buffer, "                $OUT_cvgrad $eq $CONST*$v1_ccgrad\n")
                write(buffer, "                $OUT_ccgrad $eq $CONST*$v1_cvgrad\n")
                write(buffer, "            end\n")
            else
                write(buffer, "            $OUT_cvgrad $eq $CONST*$v1_ccgrad\n")
                write(buffer, "            $OUT_ccgrad $eq $CONST*$v1_cvgrad\n")
            end
            write(buffer, "            col += Int32(1)\n")
            write(buffer, "        end\n")
            write(buffer, "\n")
            write(buffer, "        # Cut\n")
            write(buffer, "        if $OUT_cv < $OUT_lo\n")
            write(buffer, "            $OUT_cv = $OUT_lo\n")
            write(buffer, "            col = Int32(1)\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                $OUT_cvgrad = 0.0\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
            write(buffer, "        end\n")
            write(buffer, "        if $OUT_cc > $OUT_hi\n")
            write(buffer, "            $OUT_cc = $OUT_hi\n")
            write(buffer, "            col = Int32(1)\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                $OUT_ccgrad = 0.0\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
            write(buffer, "        end\n")
            write(buffer, "\n")
        else
            ID = findfirst(==(v1), varlist)
            isnothing(ID) && error("Empty varlist")
            write(buffer, "        ###########################################\n")
            write(buffer, "        ## Multiplication by a Negative Constant ##\n")
            write(buffer, "        ###########################################\n")
            write(buffer, "\n")
            write(buffer, "        # Reset the column counter\n")
            write(buffer, "        col = Int32(1)\n")
            write(buffer, "\n")
            write(buffer, "        # Begin rule\n")
            write(buffer, "        $OUT_lo $eq $CONST*$v1_hi\n")
            write(buffer, "        $OUT_hi $eq $CONST*$v1_lo\n")
            write(buffer, "        $OUT_cv $eq $CONST*$v1_cc\n")
            write(buffer, "        $OUT_cc $eq $CONST*$v1_cv\n")
            write(buffer, "        while col <= colmax\n")
            write(buffer, "            if col == Int32($ID)\n")
            write(buffer, "                $OUT_cvgrad $eq $CONST\n")
            write(buffer, "                $OUT_ccgrad $eq $CONST\n")
            write(buffer, "            else\n")
            write(buffer, "                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "            end\n")
            write(buffer, "            col += Int32(1)\n")
            write(buffer, "        end\n")
            write(buffer, "\n")
            write(buffer, "        # Cut\n")
            write(buffer, "        if $OUT_cv < $OUT_lo\n")
            write(buffer, "            $OUT_cv = $OUT_lo\n")
            write(buffer, "            col = Int32(1)\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                $OUT_cvgrad = 0.0\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
            write(buffer, "        end\n")
            write(buffer, "        if $OUT_cc > $OUT_hi\n")
            write(buffer, "            $OUT_cc = $OUT_hi\n")
            write(buffer, "            col = Int32(1)\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                $OUT_ccgrad = 0.0\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
            write(buffer, "        end\n")
            write(buffer, "\n")
        end
    end
    return String(take!(buffer))
end

# Sigmoid function
# max threads: 640
function SCMC_sigmoid_kernel(OUT::String, v1::String, varlist::Vector{String}, sparsity::Vector{Int}; sum_output::Bool=false)
    if sum_output
        eq = "+="
    else
        eq = "="
    end

    if startswith(v1, "temp")
        v1_cv = "$(v1)_cv"
        v1_cc = "$(v1)_cc"
        v1_lo = "$(v1)_lo"
        v1_hi = "$(v1)_hi"
        v1_cvgrad = "$(v1)_cvgrad[col]"
        v1_ccgrad = "$(v1)_ccgrad[col]"
    elseif startswith(v1, "aux")
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,2]"
        v1_lo = "$(v1)[idx,3]"
        v1_hi = "$(v1)[idx,4]"
        v1_cvgrad = "$(v1)[idx,end-2*colmax+col]"
        v1_ccgrad = "$(v1)[idx,end-1*colmax+col]"
    else
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,1]"
        v1_lo = "$(v1)[idx,2]"
        v1_hi = "$(v1)[idx,3]"
    end
    if startswith(OUT, "temp")
        OUT_cv = "$(OUT)_cv"
        OUT_cc = "$(OUT)_cc"
        OUT_lo = "$(OUT)_lo"
        OUT_hi = "$(OUT)_hi"
        OUT_cvgrad = "$(OUT)_cvgrad[col]"
        OUT_ccgrad = "$(OUT)_ccgrad[col]"
    else
        OUT_cv = "$(OUT)[idx,1]"
        OUT_cc = "$(OUT)[idx,2]"
        OUT_lo = "$(OUT)[idx,3]"
        OUT_hi = "$(OUT)[idx,4]"
        OUT_cvgrad = "$(OUT)[idx,end-2*colmax+col]"
        OUT_ccgrad = "$(OUT)[idx,end-1*colmax+col]"
    end

    # Get the anti-sparsity list (elements NOT being used)
    antisparsity = collect(1:length(varlist))
    antisparsity = antisparsity[antisparsity .∉ Ref(sparsity)]
    
    # Determine the sparsity case:
    # 1) Use sparsity list
    # 2) Use antisparsity list (because it's shorter than the sparsity list)
    # 3) Don't use either, simply calculate all elements
    if length(sparsity) <= length(antisparsity)
        sparsity_case = 1
        sparsity_string = join(["col == Int32($(x))" for x in sparsity], " || ")
    elseif length(antisparsity) > 0
        antisparsity_string = join(["col == Int32($(x))" for x in antisparsity], " || ")
        sparsity_case = 2
    else
        sparsity_case = 3
    end
    
    # Create the buffer that we will write to
    buffer = Base.IOBuffer()

    # Write all the lines to the buffer
    
    if startswith(v1, r"aux|temp")
        write(buffer, "        #############\n")
        write(buffer, "        ## Sigmoid ##\n")
        write(buffer, "        #############\n")
        write(buffer, "\n")
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        # Calculate the interval separately\n")
        write(buffer, "        $OUT_lo $eq 1.0/(1.0+exp(-$v1_lo))\n")
        write(buffer, "        $OUT_hi $eq 1.0/(1.0+exp(-$v1_hi))\n")
        write(buffer, "\n")
        write(buffer, "        # Begin rule\n")
        write(buffer, "        if $v1_lo >= 0.0\n")
        write(buffer, "            if $v1_cc >= $v1_cv\n")
        write(buffer, "                if $v1_cv >= $v1_hi\n")
        write(buffer, "                    if $v1_cv >= $v1_lo\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_cc == $v1_cv\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cc) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_lo) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_lo - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc == $v1_cv\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
        write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_hi >= $v1_cc\n")
        write(buffer, "                    if $v1_cv >= $v1_lo\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cc) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_lo) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_lo - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    if $v1_cv >= $v1_lo\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cc) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                            while col <= colmax\n")
        write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_lo) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_lo - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                            while col <= colmax\n")
        write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_hi >= $v1_cv\n")
        write(buffer, "                if $v1_lo >= $v1_cv\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cc) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_lo) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_lo - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_cc >= $v1_hi\n")
        write(buffer, "                if $v1_lo >= $v1_cv\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cc) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_lo) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_lo - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                if $v1_lo >= $v1_cv\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cc) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                        while col <= colmax\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_lo) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_lo - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                        while col <= colmax\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        elseif $v1_hi <= 0.0\n")
        write(buffer, "            if $v1_cc >= $v1_cv\n")
        write(buffer, "                if $v1_cv >= $v1_hi\n")
        write(buffer, "                    if $v1_cv >= $v1_lo\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_cc == $v1_cv\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                            $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc == $v1_cv\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_hi >= $v1_cc\n")
        write(buffer, "                    if $v1_cv >= $v1_lo\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
        write(buffer, "                                if $sparsity_string\n")
        write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                                else\n")
        write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                                end\n")
        elseif sparsity_case == 2        
        write(buffer, "                                if $antisparsity_string\n")
        write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                                else\n")
        write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                                end\n")
        else
        write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cc) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
        write(buffer, "                                if $sparsity_string\n")
        write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        write(buffer, "                                else\n")
        write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                                end\n")
        elseif sparsity_case == 2        
        write(buffer, "                                if $antisparsity_string\n")
        write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                                else\n")
        write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        write(buffer, "                                end\n")
        else
        write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cc) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                            $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cc) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    if $v1_cv >= $v1_lo\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_hi)))*($v1_hi - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_hi)))*($v1_hi - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_hi)))*($v1_hi - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                                if $sparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        elseif sparsity_case == 2        
            write(buffer, "                                if $antisparsity_string\n")
            write(buffer, "                                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                else\n")
            write(buffer, "                                    $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                                end\n")
        else
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if $v1_lo == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                            while col <= colmax\n")
        write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                            $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_hi)))*($v1_hi - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                            while col <= colmax\n")
        write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                                col += Int32(1)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_hi >= $v1_cv\n")
        write(buffer, "                if $v1_lo >= $v1_cv\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                        $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_cc >= $v1_hi\n")
        write(buffer, "                if $v1_lo >= $v1_cv\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cc) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cc) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                        $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cc) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cc - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                if $v1_lo >= $v1_cv\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_hi)))*($v1_hi - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_hi)))*($v1_hi - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    if $v1_lo == $v1_hi\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                        while col <= colmax\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                        $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_hi)))*($v1_hi - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        while col <= colmax\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        else\n")
        write(buffer, "            # FOR CV\n")
        write(buffer, "            xkm = $v1_lo # max(x_lo, min(x_hi, x_lo)). x_lo<x_hi by definition, so max(x_lo, x_lo)\n")
        write(buffer, "            xk_cv = 0.0 # max(x_lo, min(x_hi, 0.0)). x_hi is positive and x_lo is negative in this condition, so 0.0\n")
        write(buffer, "            fkm = (xkm - $v1_hi)*exp(-xkm)/(1.0 + exp(-xkm))^2 - (1.0/(1.0 + exp(-xkm)) - 1.0/(1.0 + exp(-$v1_hi)))\n")
        write(buffer, "            flag = true\n")
        write(buffer, "            iter = Int32(1)\n")
        write(buffer, "            while iter <= Int32(100)\n")
        write(buffer, "                fk = (xk_cv - $v1_hi)*exp(-xk_cv)/(1.0 + exp(-xk_cv))^2 - (1.0/(1.0 + exp(-xk_cv)) - 1.0/(1.0 + exp(-$v1_hi)))\n")
        write(buffer, "                Bk = (fk - fkm)/(xk_cv - xkm)\n")
        write(buffer, "                if (abs(fk) < 1.0e-10)\n")
        write(buffer, "                    flag = false\n")
        write(buffer, "                    break\n")
        write(buffer, "                elseif (Bk == 0.0)\n")
        write(buffer, "                    xk_cv = 0.0\n")
        write(buffer, "                    break\n")
        write(buffer, "                elseif (xk_cv == $v1_lo) && (fk/Bk > 0.0)\n")
        write(buffer, "                    flag = false\n")
        write(buffer, "                    break\n")
        write(buffer, "                elseif (xk_cv == 0.0) && (fk/Bk < 0.0)\n")
        write(buffer, "                    flag = false\n")
        write(buffer, "                    break\n")
        write(buffer, "                end\n")
        write(buffer, "                xkm = xk_cv\n")
        write(buffer, "                fkm = fk\n")
        write(buffer, "                xk_cv = max($v1_lo, min(0.0, xk_cv - fk/Bk))\n")
        write(buffer, "                iter += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "\n")
        write(buffer, "            # If flag, we need to do golden section instead.\n")
        write(buffer, "            if flag\n")
        write(buffer, "                a_sigmoid = $v1_lo\n")
        write(buffer, "                fa_sigmoid = ($v1_lo - $v1_hi)*exp(-$v1_lo)/(1.0 + exp(-$v1_lo))^2 - (1.0/(1.0 + exp(-$v1_lo)) - 1.0/(1.0 + exp(-$v1_hi)))\n")
        write(buffer, "                c_sigmoid = 0.0\n")
        write(buffer, "                fc_sigmoid = (0.0 - $v1_hi)*exp(0.0)/(1.0 + exp(0.0))^2 - (1.0/(1.0 + exp(0.0)) - 1.0/(1.0 + exp(-$v1_hi)))\n")
        write(buffer, "\n")
        write(buffer, "                if fa_sigmoid*fc_sigmoid > 0.0\n")
        write(buffer, "                    xk_cv = NaN\n")
        write(buffer, "                end\n")
        write(buffer, "                b_sigmoid = 0.0 - (2.0 - Base.MathConstants.golden)*(0.0 - $v1_lo)\n")
        write(buffer, "                fb_sigmoid = (b_sigmoid - $v1_hi)*exp(-b_sigmoid)/(1.0 + exp(-b_sigmoid))^2 - (1.0/(1.0 + exp(-b_sigmoid)) - 1.0/(1.0 + exp(-$v1_hi)))\n")
        write(buffer, "\n")
        write(buffer, "                iter = Int32(1)\n")
        write(buffer, "                while iter <= Int32(100)\n")
        write(buffer, "                    if (c_sigmoid - b_sigmoid > b_sigmoid - a_sigmoid)\n")
        write(buffer, "                        x_sigmoid = b_sigmoid + (2.0 - Base.MathConstants.golden)*(c_sigmoid - b_sigmoid)\n")
        write(buffer, "                        if abs(c_sigmoid-a_sigmoid) < 1.0e-10*(abs(b_sigmoid) + abs(x_sigmoid)) || iter == Int32(100)\n")
        write(buffer, "                            xk_cv = (c_sigmoid + a_sigmoid)/2.0\n")
        write(buffer, "                            break\n")
        write(buffer, "                        end\n")
        write(buffer, "                        iter += Int32(1)\n")
        write(buffer, "                        fx_sigmoid = (x_sigmoid - $v1_hi)*exp(-x_sigmoid)/(1.0 + exp(-x_sigmoid))^2 - (1.0/(1.0 + exp(-x_sigmoid)) - 1.0/(1.0 + exp(-$v1_hi)))\n")
        write(buffer, "                        if fa_sigmoid*fx_sigmoid < 0.0\n")
        write(buffer, "                            c_sigmoid = x_sigmoid\n")
        write(buffer, "                            fc_sigmoid = fx_sigmoid\n")
        write(buffer, "                        else\n")
        write(buffer, "                            a_sigmoid = b_sigmoid\n")
        write(buffer, "                            fa_sigmoid = fb_sigmoid\n")
        write(buffer, "                            b_sigmoid = x_sigmoid\n")
        write(buffer, "                            fb_sigmoid = fx_sigmoid\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        x_sigmoid = b_sigmoid - (2.0 - Base.MathConstants.golden)*(b_sigmoid - a_sigmoid)\n")
        write(buffer, "                        if abs(c_sigmoid-a_sigmoid) < 1.0e-10*(abs(b_sigmoid) + abs(x_sigmoid)) || iter == Int32(100)\n")
        write(buffer, "                            xk_cv = (c_sigmoid + a_sigmoid)/2.0\n")
        write(buffer, "                            break\n")
        write(buffer, "                        end\n")
        write(buffer, "                        iter += Int32(1)\n")
        write(buffer, "                        fx_sigmoid = (x_sigmoid - $v1_hi)*exp(-x_sigmoid)/(1.0 + exp(-x_sigmoid))^2 - (1.0/(1.0 + exp(-x_sigmoid)) - 1.0/(1.0 + exp(-$v1_hi)))\n")
        write(buffer, "                        if fa_sigmoid*fb_sigmoid < 0.0\n")
        write(buffer, "                            c_sigmoid = b_sigmoid\n")
        write(buffer, "                            fc_sigmoid = fb_sigmoid\n")
        write(buffer, "                            b_sigmoid = x_sigmoid\n")
        write(buffer, "                            fb_sigmoid = fx_sigmoid\n")
        write(buffer, "                        else\n")
        write(buffer, "                            a_sigmoid = x_sigmoid\n")
        write(buffer, "                            fa_sigmoid = fx_sigmoid\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "\n")
        write(buffer, "            # FOR CC\n")
        write(buffer, "            xkm = 0.0 # max(x_lo, min(x_hi, 0.0)). x_hi is positive in this condition, and x_lo is negative. So 0.0.\n")
        write(buffer, "            xk_cc = $v1_hi # max(x_lo, min(x_hi, x_hi)) == max(x_lo, x_hi), and x_hi>x_lo by definition.\n")
        write(buffer, "            fkm = (xkm - $v1_lo)*exp(-xkm)/(1.0 + exp(-xkm))^2 - (1.0/(1.0 + exp(-xkm)) - 1.0/(1.0 + exp(-$v1_lo)))\n")
        write(buffer, "            flag = true\n")
        write(buffer, "            iter = Int32(1)\n")
        write(buffer, "            while iter <= Int32(100)\n")
        write(buffer, "                fk = (xk_cc - $v1_lo)*exp(-xk_cc)/(1.0 + exp(-xk_cc))^2 - (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))\n")
        write(buffer, "                Bk = (fk - fkm)/(xk_cc - xkm)\n")
        write(buffer, "                if (abs(fk) < 1.0e-10)\n")
        write(buffer, "                    flag = false\n")
        write(buffer, "                    break\n")
        write(buffer, "                elseif (Bk == 0.0)\n")
        write(buffer, "                    xk_cc = 0.0\n")
        write(buffer, "                    break\n")
        write(buffer, "                elseif (xk_cc == 0.0) && (fk/Bk > 0.0)\n")
        write(buffer, "                    flag = false\n")
        write(buffer, "                    break\n")
        write(buffer, "                elseif (xk_cc == $v1_hi) && (fk/Bk < 0.0)\n")
        write(buffer, "                    flag = false\n")
        write(buffer, "                    break\n")
        write(buffer, "                end\n")
        write(buffer, "                xkm = xk_cc\n")
        write(buffer, "                fkm = fk\n")
        write(buffer, "                xk_cc = max(0.0, min($v1_hi, xk_cc - fk/Bk))\n")
        write(buffer, "                iter += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "\n")
        write(buffer, "            # If flag, we need to do golden section instead.\n")
        write(buffer, "            if flag\n")
        write(buffer, "                a_sigmoid = 0.0\n")
        write(buffer, "                fa_sigmoid = (0.0 - $v1_lo)*exp(0.0)/(1.0 + exp(0.0))^2 - (1.0/(1.0 + exp(0.0)) - 1.0/(1.0 + exp(-$v1_lo)))\n")
        write(buffer, "                c_sigmoid = $v1_hi\n")
        write(buffer, "                fc_sigmoid = ($v1_hi - $v1_lo)*exp(-$v1_hi)/(1.0 + exp(-$v1_hi))^2 - (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))\n")
        write(buffer, "\n")
        write(buffer, "                if fa_sigmoid*fc_sigmoid > 0.0\n")
        write(buffer, "                    xk_cc = NaN\n")
        write(buffer, "                end\n")
        write(buffer, "\n")
        write(buffer, "                b_sigmoid = $v1_hi - (2.0 - Base.MathConstants.golden)*($v1_hi - 0.0)\n")
        write(buffer, "                fb_sigmoid = (b_sigmoid - $v1_lo)*exp(-b_sigmoid)/(1.0 + exp(-b_sigmoid))^2 - (1.0/(1.0 + exp(-b_sigmoid)) - 1.0/(1.0 + exp(-$v1_lo)))\n")
        write(buffer, "\n")
        write(buffer, "                iter = Int32(1)\n")
        write(buffer, "                while iter <= Int32(100)\n")
        write(buffer, "                    if (c_sigmoid - b_sigmoid > b_sigmoid - a_sigmoid)\n")
        write(buffer, "                        x_sigmoid = b_sigmoid + (2.0 - Base.MathConstants.golden)*(c_sigmoid - b_sigmoid)\n")
        write(buffer, "                        if abs(c_sigmoid-a_sigmoid) < 1.0e-10*(abs(b_sigmoid) + abs(x_sigmoid)) || iter == Int32(100)\n")
        write(buffer, "                            xk_cc = (c_sigmoid + a_sigmoid)/2.0\n")
        write(buffer, "                            break\n")
        write(buffer, "                        end\n")
        write(buffer, "                        iter += Int32(1)\n")
        write(buffer, "                        fx_sigmoid = (x_sigmoid - $v1_lo)*exp(-x_sigmoid)/(1.0 + exp(-x_sigmoid))^2 - (1.0/(1.0 + exp(-x_sigmoid)) - 1.0/(1.0 + exp(-$v1_lo)))\n")
        write(buffer, "                        if fa_sigmoid*fx_sigmoid < 0.0\n")
        write(buffer, "                            c_sigmoid = x_sigmoid\n")
        write(buffer, "                            fc_sigmoid = fx_sigmoid\n")
        write(buffer, "                        else\n")
        write(buffer, "                            a_sigmoid = b_sigmoid\n")
        write(buffer, "                            fa_sigmoid = fb_sigmoid\n")
        write(buffer, "                            b_sigmoid = x_sigmoid\n")
        write(buffer, "                            fb_sigmoid = fx_sigmoid\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        x_sigmoid = b_sigmoid - (2.0 - Base.MathConstants.golden)*(b_sigmoid - a_sigmoid)\n")
        write(buffer, "                        if abs(c_sigmoid-a_sigmoid) < 1.0e-10*(abs(b_sigmoid) + abs(x_sigmoid)) || iter == Int32(100)\n")
        write(buffer, "                            xk_cc = (c_sigmoid + a_sigmoid)/2.0\n")
        write(buffer, "                            break\n")
        write(buffer, "                        end\n")
        write(buffer, "                        iter += Int32(1)\n")
        write(buffer, "                        fx_sigmoid = (x_sigmoid - $v1_lo)*exp(-x_sigmoid)/(1.0 + exp(-x_sigmoid))^2 - (1.0/(1.0 + exp(-x_sigmoid)) - 1.0/(1.0 + exp(-$v1_lo)))\n")
        write(buffer, "                        if fa_sigmoid*fb_sigmoid < 0.0\n")
        write(buffer, "                            c_sigmoid = b_sigmoid\n")
        write(buffer, "                            fc_sigmoid = fb_sigmoid\n")
        write(buffer, "                            b_sigmoid = x_sigmoid\n")
        write(buffer, "                            fb_sigmoid = fx_sigmoid\n")
        write(buffer, "                        else\n")
        write(buffer, "                            a_sigmoid = x_sigmoid\n")
        write(buffer, "                            fa_sigmoid = fx_sigmoid\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "\n")
        write(buffer, "            # With xk_cv and xk_cc, continue the rules\n")
        write(buffer, "            if $v1_cc >= $v1_cv\n")
        write(buffer, "                if $v1_cv >= $v1_hi\n")
        write(buffer, "                    if $v1_cv >= $v1_lo\n")
        write(buffer, "                        if $v1_cv <= xk_cv\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            if xk_cv == $v1_hi\n")
        write(buffer, "                                $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                                dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_cv) + 1.0/(1.0 + exp(-$v1_hi))*($v1_cv - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                                dcv = (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-xk_cv)))/($v1_hi - xk_cv)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                        if $v1_cv <= xk_cc\n")
        write(buffer, "                            if xk_cc == $v1_lo\n")
        write(buffer, "                                $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                                dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_cv) + 1.0/(1.0 + exp(-xk_cc))*($v1_cv - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                                dcc = (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        end\n")
        write(buffer, "\n")
        write(buffer, "                        # Now use the information about dcv and dcc to calculate subgradients\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_cc == $v1_cv\n")
        write(buffer, "                        if $v1_cv <= xk_cv\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            # cv, dcv = dline_seg(sigmoid, sigmoid_deriv, $v1_cv, p (now xk_cv), xU)\n")
        write(buffer, "                            if xk_cv == $v1_hi\n")
        write(buffer, "                                $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                                dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_cv) + 1.0/(1.0 + exp(-$v1_hi))*($v1_cv - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                                dcv = (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-xk_cv)))/($v1_hi - xk_cv)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "\n")
        write(buffer, "                        if $v1_cv <= xk_cc\n")
        write(buffer, "                            # cc, dcc = dline_seg(ssigmoid, sigmoid_deriv, $v1_cv, xL, p)\n")
        write(buffer, "                            if xk_cc == $v1_lo\n")
        write(buffer, "                                $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                                dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_cv) + 1.0/(1.0 + exp(-xk_cc))*($v1_cv - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                                dcc = (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            end\n")
        write(buffer, "\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        end\n")
        write(buffer, "\n")
        write(buffer, "                        # Now use the information about dcv and dcc to calculate subgradients\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                        # Use the results of xk to determine what OUT_cv and dcv should be\n")
        write(buffer, "                        if $v1_cc <= xk_cv\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            dcv = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            # cv, dcv = dline_seg(sigmoid, sigmoid_deriv, $v1_cc, p (now xk_cv), xU)\n")
        write(buffer, "                            if xk_cv == $v1_hi\n")
        write(buffer, "                                $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                                dcv = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_cc) + 1.0/(1.0 + exp(-$v1_hi))*($v1_cc - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                                dcv = (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-xk_cv)))/($v1_hi - xk_cv)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "\n")
        write(buffer, "                        if $v1_cv <= xk_cc\n")
        write(buffer, "                            # cc, dcc = dline_seg(ssigmoid, sigmoid_deriv, $v1_cv, xL, p)\n")
        write(buffer, "                            if xk_cc == $v1_lo\n")
        write(buffer, "                                $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                                dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_cv) + 1.0/(1.0 + exp(-xk_cc))*($v1_cv - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                                dcc = (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            end\n")
        write(buffer, "\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        end\n")
        write(buffer, "\n")
        write(buffer, "                        # Now use the information about dcv and dcc to calculate subgradients\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        # Use the results of xk to determine what OUT_cv and dcv should be\n")
        write(buffer, "                        if $v1_lo <= xk_cv\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                        else\n")
        write(buffer, "                            # cv, dcv = dline_seg(sigmoid, sigmoid_deriv, $v1_lo, p (now xk_cv), xU)\n")
        write(buffer, "                            if xk_cv == $v1_hi\n")
        write(buffer, "                                $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_lo) + 1.0/(1.0 + exp(-$v1_hi))*($v1_lo - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "\n")
        write(buffer, "                        if $v1_cv <= xk_cc\n")
        write(buffer, "                            # cc, dcc = dline_seg(ssigmoid, sigmoid_deriv, $v1_cv, xL, p)\n")
        write(buffer, "                            if xk_cc == $v1_lo\n")
        write(buffer, "                                $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                                dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_cv) + 1.0/(1.0 + exp(-xk_cc))*($v1_cv - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                                dcc = (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            end\n")
        write(buffer, "\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        end\n")
        write(buffer, "\n")
        write(buffer, "                        # Now use the information about dcv and dcc to calculate subgradients\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc == $v1_cv\n")
        write(buffer, "                    # Use the results of xk to determine what OUT_cv and dcv should be\n")
        write(buffer, "                    if $v1_cv <= xk_cv\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                    else\n")
        write(buffer, "                        # cv, dcv = dline_seg(sigmoid, sigmoid_deriv, $v1_cv, p (now xk_cv), xU)\n")
        write(buffer, "                        if xk_cv == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_cv) + 1.0/(1.0 + exp(-$v1_hi))*($v1_cv - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                            dcv = (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-xk_cv)))/($v1_hi - xk_cv)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "\n")
        write(buffer, "                    if $v1_cv <= xk_cc\n")
        write(buffer, "                        # cc, dcc = dline_seg(ssigmoid, sigmoid_deriv, $v1_cv, xL, p)\n")
        write(buffer, "                        if xk_cc == $v1_lo\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_cv) + 1.0/(1.0 + exp(-xk_cc))*($v1_cv - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            dcc = (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))/(xk_cc - $v1_lo)\n")
        write(buffer, "                        end\n")
        write(buffer, "\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                    end\n")
        write(buffer, "\n")
        write(buffer, "                    # Now use the information about dcv and dcc to calculate subgradients\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_hi >= $v1_cc\n")
        write(buffer, "                    if $v1_cv >= $v1_lo\n")
        write(buffer, "                        # Use the results of xk to determine what OUT_cv and dcv should be\n")
        write(buffer, "                        if $v1_cv <= xk_cv\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            # cv, dcv = dline_seg(sigmoid, sigmoid_deriv, $v1_cv, p (now xk_cv), xU)\n")
        write(buffer, "                            if xk_cv == $v1_hi\n")
        write(buffer, "                                $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                                dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_cv) + 1.0/(1.0 + exp(-$v1_hi))*($v1_cv - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                                dcv = (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-xk_cv)))/($v1_hi - xk_cv)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "\n")
        write(buffer, "                        if $v1_cc <= xk_cc\n")
        write(buffer, "                            # cc, dcc = dline_seg(ssigmoid, sigmoid_deriv, $v1_cc, xL, p)\n")
        write(buffer, "                            if xk_cc == $v1_lo\n")
        write(buffer, "                                $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                                dcc = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_cc) + 1.0/(1.0 + exp(-xk_cc))*($v1_cc - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                                dcc = (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            end\n")
        write(buffer, "\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            dcc = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                        end\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                        if $v1_cc <= xk_cv\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            dcv = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            if xk_cv == $v1_hi\n")
        write(buffer, "                                $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                                dcv = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_cc) + 1.0/(1.0 + exp(-$v1_hi))*($v1_cc - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                                dcv = (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-xk_cv)))/($v1_hi - xk_cv)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                        if $v1_cc <= xk_cc\n")
        write(buffer, "                            if xk_cc == $v1_lo\n")
        write(buffer, "                                $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                                dcc = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_cc) + 1.0/(1.0 + exp(-xk_cc))*($v1_cc - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                                dcc = (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            dcc = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                        end\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if $v1_lo <= xk_cv\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                        else\n")
        write(buffer, "                            if xk_cv == $v1_hi\n")
        write(buffer, "                                $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_lo) + 1.0/(1.0 + exp(-$v1_hi))*($v1_lo - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                        if $v1_cc <= xk_cc\n")
        write(buffer, "                            if xk_cc == $v1_lo\n")
        write(buffer, "                                $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                                dcc = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_cc) + 1.0/(1.0 + exp(-xk_cc))*($v1_cc - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                                dcc = (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            dcc = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                        end\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    if $v1_cv >= $v1_lo\n")
        write(buffer, "                        if $v1_cv <= xk_cv\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            if xk_cv == $v1_hi\n")
        write(buffer, "                                $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                                dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_cv) + 1.0/(1.0 + exp(-$v1_hi))*($v1_cv - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                                dcv = (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-xk_cv)))/($v1_hi - xk_cv)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                        if $v1_hi <= xk_cc\n")
        write(buffer, "                            if xk_cc == $v1_lo\n")
        write(buffer, "                                $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_hi) + 1.0/(1.0 + exp(-xk_cc))*($v1_hi - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                        end\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                        if $v1_cc <= xk_cv\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            dcv = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            if xk_cv == $v1_hi\n")
        write(buffer, "                                $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                                dcv = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_cc) + 1.0/(1.0 + exp(-$v1_hi))*($v1_cc - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                                dcv = (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-xk_cv)))/($v1_hi - xk_cv)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                        if $v1_hi <= xk_cc\n")
        write(buffer, "                            if xk_cc == $v1_lo\n")
        write(buffer, "                                $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_hi) + 1.0/(1.0 + exp(-xk_cc))*($v1_hi - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                        end\n")
        write(buffer, "                        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                            if $sparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        elseif sparsity_case == 2    
            write(buffer, "                            if $antisparsity_string\n")
            write(buffer, "                                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
            write(buffer, "                                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                            end\n")
        else
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if $v1_lo <= xk_cv\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                        else\n")
        write(buffer, "                            if xk_cv == $v1_hi\n")
        write(buffer, "                                $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_lo) + 1.0/(1.0 + exp(-$v1_hi))*($v1_lo - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        end\n")
        write(buffer, "                        if $v1_hi <= xk_cc\n")
        write(buffer, "                            if xk_cc == $v1_lo\n")
        write(buffer, "                                $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                            else\n")
        write(buffer, "                                $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_hi) + 1.0/(1.0 + exp(-xk_cc))*($v1_hi - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            end\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                        end\n")
        write(buffer, "                        while col <= colmax\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                            col += Int32(1)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_hi >= $v1_cv\n")
        write(buffer, "                if $v1_lo >= $v1_cv\n")
        write(buffer, "                    if $v1_cv <= xk_cv\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if xk_cv == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_cv) + 1.0/(1.0 + exp(-$v1_hi))*($v1_cv - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                            dcv = (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-xk_cv)))/($v1_hi - xk_cv)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                    if $v1_cv <= xk_cc\n")
        write(buffer, "                        if xk_cc == $v1_lo\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_cv) + 1.0/(1.0 + exp(-xk_cc))*($v1_cv - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            dcc = (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))/(xk_cc - $v1_lo)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                    end\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                    if $v1_cc <= xk_cv\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        dcv = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if xk_cv == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            dcv = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_cc) + 1.0/(1.0 + exp(-$v1_hi))*($v1_cc - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                            dcv = (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-xk_cv)))/($v1_hi - xk_cv)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                    if $v1_cv <= xk_cc\n")
        write(buffer, "                        if xk_cc == $v1_lo\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_cv) + 1.0/(1.0 + exp(-xk_cc))*($v1_cv - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            dcc = (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))/(xk_cc - $v1_lo)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                    end\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
        write(buffer, "                        if $sparsity_string\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        elseif sparsity_case == 2
        write(buffer, "                        if $antisparsity_string\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
        write(buffer, "                        end\n")
        else
        write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
        write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    if $v1_lo <= xk_cv\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if xk_cv == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_lo) + 1.0/(1.0 + exp(-$v1_hi))*($v1_lo - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                    if $v1_cv <= xk_cc\n")
        write(buffer, "                        if xk_cc == $v1_lo\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_cv) + 1.0/(1.0 + exp(-xk_cc))*($v1_cv - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            dcc = (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))/(xk_cc - $v1_lo)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                    end\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * dcc\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_cc >= $v1_hi\n")
        write(buffer, "                if $v1_lo >= $v1_cv\n")
        write(buffer, "                    if $v1_cv <= xk_cv\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if xk_cv == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_cv) + 1.0/(1.0 + exp(-$v1_hi))*($v1_cv - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                            dcv = (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-xk_cv)))/($v1_hi - xk_cv)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                    if $v1_cc <= xk_cc\n")
        write(buffer, "                        if xk_cc == $v1_lo\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            dcc = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_cc) + 1.0/(1.0 + exp(-xk_cc))*($v1_cc - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            dcc = (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))/(xk_cc - $v1_lo)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        dcc = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                    end\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                    if $v1_cc <= xk_cv\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        dcv = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if xk_cv == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            dcv = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_cc) + 1.0/(1.0 + exp(-$v1_hi))*($v1_cc - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                            dcv = (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-xk_cv)))/($v1_hi - xk_cv)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                    if $v1_cc <= xk_cc\n")
        write(buffer, "                        if xk_cc == $v1_lo\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            dcc = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_cc) + 1.0/(1.0 + exp(-xk_cc))*($v1_cc - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            dcc = (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))/(xk_cc - $v1_lo)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        dcc = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                    end\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    if $v1_lo <= xk_cv\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if xk_cv == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_lo) + 1.0/(1.0 + exp(-$v1_hi))*($v1_lo - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                    if $v1_cc <= xk_cc\n")
        write(buffer, "                        if xk_cc == $v1_lo\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            dcc = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_cc) + 1.0/(1.0 + exp(-xk_cc))*($v1_cc - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                            dcc = (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))/(xk_cc - $v1_lo)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        dcc = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                    end\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * dcc\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                if $v1_lo >= $v1_cv\n")
        write(buffer, "                    if $v1_cv <= xk_cv\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                        dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if xk_cv == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                            dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_cv) + 1.0/(1.0 + exp(-$v1_hi))*($v1_cv - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                            dcv = (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-xk_cv)))/($v1_hi - xk_cv)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                    if $v1_hi <= xk_cc\n")
        write(buffer, "                        if xk_cc == $v1_lo\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_hi) + 1.0/(1.0 + exp(-xk_cc))*($v1_hi - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                    end\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * dcv\n")
            write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                    if $v1_cc <= xk_cv\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                        dcv = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if xk_cv == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cc))\n")
        write(buffer, "                            dcv = exp(-$v1_cc)/(1.0 + exp(-$v1_cc))^2\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_cc) + 1.0/(1.0 + exp(-$v1_hi))*($v1_cc - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                            dcv = (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-xk_cv)))/($v1_hi - xk_cv)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                    if $v1_hi <= xk_cc\n")
        write(buffer, "                        if xk_cc == $v1_lo\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_hi) + 1.0/(1.0 + exp(-xk_cc))*($v1_hi - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                    end\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * dcv\n")
            write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    if $v1_lo <= xk_cv\n")
        write(buffer, "                        $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                    else\n")
        write(buffer, "                        if xk_cv == $v1_hi\n")
        write(buffer, "                            $OUT_cv $eq 1.0/(1.0 + exp(-$v1_lo))\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_lo) + 1.0/(1.0 + exp(-$v1_hi))*($v1_lo - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                    if $v1_hi <= xk_cc\n")
        write(buffer, "                        if xk_cc == $v1_lo\n")
        write(buffer, "                            $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_hi) + 1.0/(1.0 + exp(-xk_cc))*($v1_hi - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cc $eq 1.0/(1.0 + exp(-$v1_hi))\n")
        write(buffer, "                    end\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv = $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc = $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    else
        ID = findfirst(==(v1), varlist)
        isnothing(ID) && error("Empty varlist")
        write(buffer, "        #############\n")
        write(buffer, "        ## Sigmoid ##\n")
        write(buffer, "        #############\n")
        write(buffer, "\n")
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        # Calculate the interval separately\n")
        write(buffer, "        $OUT_lo $eq 1.0/(1.0+exp(-$v1_lo))\n")
        write(buffer, "        $OUT_hi $eq 1.0/(1.0+exp(-$v1_hi))\n")
        write(buffer, "\n")
        write(buffer, "        # Begin rule\n")
        write(buffer, "        if $v1_lo >= 0.0\n")
        write(buffer, "            if $v1_lo == $v1_hi\n")
        write(buffer, "                $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                while col <= colmax\n")
        write(buffer, "                    if col == Int32($ID)\n")
        write(buffer, "                        $OUT_cvgrad $eq exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        $OUT_ccgrad $eq exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                    end\n")
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_cv $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                while col <= colmax\n")
        write(buffer, "                    if col == Int32($ID)\n")
        write(buffer, "                        $OUT_cvgrad $eq (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        write(buffer, "                        $OUT_ccgrad $eq exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                    end\n")
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        elseif $v1_hi <= 0.0\n")
        write(buffer, "            if $v1_lo == $v1_hi\n")
        write(buffer, "                $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                while col <= colmax\n")
        write(buffer, "                    if col == Int32($ID)\n")
        write(buffer, "                        $OUT_cvgrad $eq exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        $OUT_ccgrad $eq exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                    end\n")
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                $OUT_cc $eq ((1.0/(1.0 + exp(-$v1_lo)))*($v1_hi - $v1_cv) + (1.0/(1.0 + exp(-$v1_hi)))*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
        write(buffer, "                while col <= colmax\n")
        write(buffer, "                    if col == Int32($ID)\n")
        write(buffer, "                        $OUT_cvgrad $eq exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                        $OUT_ccgrad $eq (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))/($v1_hi - $v1_lo)\n")
        write(buffer, "                    else\n")
        write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                    end\n")
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        else\n")
        write(buffer, "            # FOR CV\n")
        write(buffer, "            xkm = $v1_lo # max(x_lo, min(x_hi, x_lo)). x_lo<x_hi by definition, so max(x_lo, x_lo)\n")
        write(buffer, "            xk_cv = 0.0 # max(x_lo, min(x_hi, 0.0)). x_hi is positive and x_lo is negative in this condition, so 0.0\n")
        write(buffer, "            fkm = (xkm - $v1_hi)*exp(-xkm)/(1.0 + exp(-xkm))^2 - (1.0/(1.0 + exp(-xkm)) - 1.0/(1.0 + exp(-$v1_hi)))\n")
        write(buffer, "            flag = true\n")
        write(buffer, "            iter = Int32(1)\n")
        write(buffer, "            while iter <= Int32(100)\n")
        write(buffer, "                fk = (xk_cv - $v1_hi)*exp(-xk_cv)/(1.0 + exp(-xk_cv))^2 - (1.0/(1.0 + exp(-xk_cv)) - 1.0/(1.0 + exp(-$v1_hi)))\n")
        write(buffer, "                Bk = (fk - fkm)/(xk_cv - xkm)\n")
        write(buffer, "                if (abs(fk) < 1.0e-10)\n")
        write(buffer, "                    flag = false\n")
        write(buffer, "                    break\n")
        write(buffer, "                elseif (Bk == 0.0)\n")
        write(buffer, "                    xk_cv = 0.0\n")
        write(buffer, "                    break\n")
        write(buffer, "                elseif (xk_cv == $v1_lo) && (fk/Bk > 0.0)\n")
        write(buffer, "                    flag = false\n")
        write(buffer, "                    break\n")
        write(buffer, "                elseif (xk_cv == 0.0) && (fk/Bk < 0.0)\n")
        write(buffer, "                    flag = false\n")
        write(buffer, "                    break\n")
        write(buffer, "                end\n")
        write(buffer, "                xkm = xk_cv\n")
        write(buffer, "                fkm = fk\n")
        write(buffer, "                xk_cv = max($v1_lo, min(0.0, xk_cv - fk/Bk))\n")
        write(buffer, "                iter += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "\n")
        write(buffer, "            # If flag, we need to do golden section instead.\n")
        write(buffer, "            if flag\n")
        write(buffer, "                a_sigmoid = $v1_lo\n")
        write(buffer, "                fa_sigmoid = ($v1_lo - $v1_hi)*exp(-$v1_lo)/(1.0 + exp(-$v1_lo))^2 - (1.0/(1.0 + exp(-$v1_lo)) - 1.0/(1.0 + exp(-$v1_hi)))\n")
        write(buffer, "                c_sigmoid = 0.0\n")
        write(buffer, "                fc_sigmoid = (0.0 - $v1_hi)*exp(0.0)/(1.0 + exp(0.0))^2 - (1.0/(1.0 + exp(0.0)) - 1.0/(1.0 + exp(-$v1_hi)))\n")
        write(buffer, "\n")
        write(buffer, "                if fa_sigmoid*fc_sigmoid > 0.0\n")
        write(buffer, "                    xk_cv = NaN\n")
        write(buffer, "                end\n")
        write(buffer, "                b_sigmoid = 0.0 - (2.0 - Base.MathConstants.golden)*(0.0 - $v1_lo)\n")
        write(buffer, "                fb_sigmoid = (b_sigmoid - $v1_hi)*exp(-b_sigmoid)/(1.0 + exp(-b_sigmoid))^2 - (1.0/(1.0 + exp(-b_sigmoid)) - 1.0/(1.0 + exp(-$v1_hi)))\n")
        write(buffer, "\n")
        write(buffer, "                iter = Int32(1)\n")
        write(buffer, "                while iter <= Int32(100)\n")
        write(buffer, "                    if (c_sigmoid - b_sigmoid > b_sigmoid - a_sigmoid)\n")
        write(buffer, "                        x_sigmoid = b_sigmoid + (2.0 - Base.MathConstants.golden)*(c_sigmoid - b_sigmoid)\n")
        write(buffer, "                        if abs(c_sigmoid-a_sigmoid) < 1.0e-10*(abs(b_sigmoid) + abs(x_sigmoid)) || iter == Int32(100)\n")
        write(buffer, "                            xk_cv = (c_sigmoid + a_sigmoid)/2.0\n")
        write(buffer, "                            break\n")
        write(buffer, "                        end\n")
        write(buffer, "                        iter += Int32(1)\n")
        write(buffer, "                        fx_sigmoid = (x_sigmoid - $v1_hi)*exp(-x_sigmoid)/(1.0 + exp(-x_sigmoid))^2 - (1.0/(1.0 + exp(-x_sigmoid)) - 1.0/(1.0 + exp(-$v1_hi)))\n")
        write(buffer, "                        if fa_sigmoid*fx_sigmoid < 0.0\n")
        write(buffer, "                            c_sigmoid = x_sigmoid\n")
        write(buffer, "                            fc_sigmoid = fx_sigmoid\n")
        write(buffer, "                        else\n")
        write(buffer, "                            a_sigmoid = b_sigmoid\n")
        write(buffer, "                            fa_sigmoid = fb_sigmoid\n")
        write(buffer, "                            b_sigmoid = x_sigmoid\n")
        write(buffer, "                            fb_sigmoid = fx_sigmoid\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        x_sigmoid = b_sigmoid - (2.0 - Base.MathConstants.golden)*(b_sigmoid - a_sigmoid)\n")
        write(buffer, "                        if abs(c_sigmoid-a_sigmoid) < 1.0e-10*(abs(b_sigmoid) + abs(x_sigmoid)) || iter == Int32(100)\n")
        write(buffer, "                            xk_cv = (c_sigmoid + a_sigmoid)/2.0\n")
        write(buffer, "                            break\n")
        write(buffer, "                        end\n")
        write(buffer, "                        iter += Int32(1)\n")
        write(buffer, "                        fx_sigmoid = (x_sigmoid - $v1_hi)*exp(-x_sigmoid)/(1.0 + exp(-x_sigmoid))^2 - (1.0/(1.0 + exp(-x_sigmoid)) - 1.0/(1.0 + exp(-$v1_hi)))\n")
        write(buffer, "                        if fa_sigmoid*fb_sigmoid < 0.0\n")
        write(buffer, "                            c_sigmoid = b_sigmoid\n")
        write(buffer, "                            fc_sigmoid = fb_sigmoid\n")
        write(buffer, "                            b_sigmoid = x_sigmoid\n")
        write(buffer, "                            fb_sigmoid = fx_sigmoid\n")
        write(buffer, "                        else\n")
        write(buffer, "                            a_sigmoid = x_sigmoid\n")
        write(buffer, "                            fa_sigmoid = fx_sigmoid\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "\n")
        write(buffer, "            # FOR CC\n")
        write(buffer, "            xkm = 0.0 # max(x_lo, min(x_hi, 0.0)). x_hi is positive in this condition, and x_lo is negative. So 0.0.\n")
        write(buffer, "            xk_cc = $v1_hi # max(x_lo, min(x_hi, x_hi)) == max(x_lo, x_hi), and x_hi>x_lo by definition.\n")
        write(buffer, "            fkm = (xkm - $v1_lo)*exp(-xkm)/(1.0 + exp(-xkm))^2 - (1.0/(1.0 + exp(-xkm)) - 1.0/(1.0 + exp(-$v1_lo)))\n")
        write(buffer, "            flag = true\n")
        write(buffer, "            iter = Int32(1)\n")
        write(buffer, "            while iter <= Int32(100)\n")
        write(buffer, "                fk = (xk_cc - $v1_lo)*exp(-xk_cc)/(1.0 + exp(-xk_cc))^2 - (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))\n")
        write(buffer, "                Bk = (fk - fkm)/(xk_cc - xkm)\n")
        write(buffer, "                if (abs(fk) < 1.0e-10)\n")
        write(buffer, "                    flag = false\n")
        write(buffer, "                    break\n")
        write(buffer, "                elseif (Bk == 0.0)\n")
        write(buffer, "                    xk_cc = 0.0\n")
        write(buffer, "                    break\n")
        write(buffer, "                elseif (xk_cc == 0.0) && (fk/Bk > 0.0)\n")
        write(buffer, "                    flag = false\n")
        write(buffer, "                    break\n")
        write(buffer, "                elseif (xk_cc == $v1_hi) && (fk/Bk < 0.0)\n")
        write(buffer, "                    flag = false\n")
        write(buffer, "                    break\n")
        write(buffer, "                end\n")
        write(buffer, "                xkm = xk_cc\n")
        write(buffer, "                fkm = fk\n")
        write(buffer, "                xk_cc = max(0.0, min($v1_hi, xk_cc - fk/Bk))\n")
        write(buffer, "                iter += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "\n")
        write(buffer, "            # If flag, we need to do golden section instead.\n")
        write(buffer, "            if flag\n")
        write(buffer, "                a_sigmoid = 0.0\n")
        write(buffer, "                fa_sigmoid = (0.0 - $v1_lo)*exp(0.0)/(1.0 + exp(0.0))^2 - (1.0/(1.0 + exp(0.0)) - 1.0/(1.0 + exp(-$v1_lo)))\n")
        write(buffer, "                c_sigmoid = $v1_hi\n")
        write(buffer, "                fc_sigmoid = ($v1_hi - $v1_lo)*exp(-$v1_hi)/(1.0 + exp(-$v1_hi))^2 - (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-$v1_lo)))\n")
        write(buffer, "\n")
        write(buffer, "                if fa_sigmoid*fc_sigmoid > 0.0\n")
        write(buffer, "                    xk_cc = NaN\n")
        write(buffer, "                end\n")
        write(buffer, "\n")
        write(buffer, "                b_sigmoid = $v1_hi - (2.0 - Base.MathConstants.golden)*($v1_hi - 0.0)\n")
        write(buffer, "                fb_sigmoid = (b_sigmoid - $v1_lo)*exp(-b_sigmoid)/(1.0 + exp(-b_sigmoid))^2 - (1.0/(1.0 + exp(-b_sigmoid)) - 1.0/(1.0 + exp(-$v1_lo)))\n")
        write(buffer, "\n")
        write(buffer, "                iter = Int32(1)\n")
        write(buffer, "                while iter <= Int32(100)\n")
        write(buffer, "                    if (c_sigmoid - b_sigmoid > b_sigmoid - a_sigmoid)\n")
        write(buffer, "                        x_sigmoid = b_sigmoid + (2.0 - Base.MathConstants.golden)*(c_sigmoid - b_sigmoid)\n")
        write(buffer, "                        if abs(c_sigmoid-a_sigmoid) < 1.0e-10*(abs(b_sigmoid) + abs(x_sigmoid)) || iter == Int32(100)\n")
        write(buffer, "                            xk_cc = (c_sigmoid + a_sigmoid)/2.0\n")
        write(buffer, "                            break\n")
        write(buffer, "                        end\n")
        write(buffer, "                        iter += Int32(1)\n")
        write(buffer, "                        fx_sigmoid = (x_sigmoid - $v1_lo)*exp(-x_sigmoid)/(1.0 + exp(-x_sigmoid))^2 - (1.0/(1.0 + exp(-x_sigmoid)) - 1.0/(1.0 + exp(-$v1_lo)))\n")
        write(buffer, "                        if fa_sigmoid*fx_sigmoid < 0.0\n")
        write(buffer, "                            c_sigmoid = x_sigmoid\n")
        write(buffer, "                            fc_sigmoid = fx_sigmoid\n")
        write(buffer, "                        else\n")
        write(buffer, "                            a_sigmoid = b_sigmoid\n")
        write(buffer, "                            fa_sigmoid = fb_sigmoid\n")
        write(buffer, "                            b_sigmoid = x_sigmoid\n")
        write(buffer, "                            fb_sigmoid = fx_sigmoid\n")
        write(buffer, "                        end\n")
        write(buffer, "                    else\n")
        write(buffer, "                        x_sigmoid = b_sigmoid - (2.0 - Base.MathConstants.golden)*(b_sigmoid - a_sigmoid)\n")
        write(buffer, "                        if abs(c_sigmoid-a_sigmoid) < 1.0e-10*(abs(b_sigmoid) + abs(x_sigmoid)) || iter == Int32(100)\n")
        write(buffer, "                            xk_cc = (c_sigmoid + a_sigmoid)/2.0\n")
        write(buffer, "                            break\n")
        write(buffer, "                        end\n")
        write(buffer, "                        iter += Int32(1)\n")
        write(buffer, "                        fx_sigmoid = (x_sigmoid - $v1_lo)*exp(-x_sigmoid)/(1.0 + exp(-x_sigmoid))^2 - (1.0/(1.0 + exp(-x_sigmoid)) - 1.0/(1.0 + exp(-$v1_lo)))\n")
        write(buffer, "                        if fa_sigmoid*fb_sigmoid < 0.0\n")
        write(buffer, "                            c_sigmoid = b_sigmoid\n")
        write(buffer, "                            fc_sigmoid = fb_sigmoid\n")
        write(buffer, "                            b_sigmoid = x_sigmoid\n")
        write(buffer, "                            fb_sigmoid = fx_sigmoid\n")
        write(buffer, "                        else\n")
        write(buffer, "                            a_sigmoid = x_sigmoid\n")
        write(buffer, "                            fa_sigmoid = fx_sigmoid\n")
        write(buffer, "                        end\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "\n")
        write(buffer, "            # With xk_cv and xk_cc, continue the rules\n")
        write(buffer, "            if $v1_cv <= xk_cv\n")
        write(buffer, "                $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "            else\n")
        write(buffer, "                if xk_cv == $v1_hi\n")
        write(buffer, "                    $OUT_cv $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                    dcv = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq (1.0/(1.0 + exp(-xk_cv))*($v1_hi - $v1_cv) + 1.0/(1.0 + exp(-$v1_hi))*($v1_cv - xk_cv))/($v1_hi - xk_cv)\n")
        write(buffer, "                    dcv = (1.0/(1.0 + exp(-$v1_hi)) - 1.0/(1.0 + exp(-xk_cv)))/($v1_hi - xk_cv)\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "            if $v1_cv <= xk_cc\n")
        write(buffer, "                if xk_cc == $v1_lo\n")
        write(buffer, "                    $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                    dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq (1.0/(1.0 + exp(-$v1_lo))*(xk_cc - $v1_cv) + 1.0/(1.0 + exp(-xk_cc))*($v1_cv - $v1_lo))/(xk_cc - $v1_lo)\n")
        write(buffer, "                    dcc = (1.0/(1.0 + exp(-xk_cc)) - 1.0/(1.0 + exp(-$v1_lo)))/(xk_cc - $v1_lo)\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_cc $eq 1.0/(1.0 + exp(-$v1_cv))\n")
        write(buffer, "                dcc = exp(-$v1_cv)/(1.0 + exp(-$v1_cv))^2\n")
        write(buffer, "            end\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                if col == Int32($ID)\n")
        write(buffer, "                    $OUT_cvgrad $eq dcv\n")
        write(buffer, "                    $OUT_ccgrad $eq dcc\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                    $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                end\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv = $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc = $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    end
    return String(take!(buffer))
end

# Positive integer powers
# max threads: ???
function SCMC_int_power_kernel(OUT::String, v1::String, POW::Int, varlist::Vector{String}, sparsity::Vector{Int}; sum_output::Bool=false)
    if sum_output
        eq = "+="
    else
        eq = "="
    end
    
    if startswith(v1, "temp")
        v1_cv = "$(v1)_cv"
        v1_cc = "$(v1)_cc"
        v1_lo = "$(v1)_lo"
        v1_hi = "$(v1)_hi"
        v1_cvgrad = "$(v1)_cvgrad[col]"
        v1_ccgrad = "$(v1)_ccgrad[col]"
    elseif startswith(v1, "aux")
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,2]"
        v1_lo = "$(v1)[idx,3]"
        v1_hi = "$(v1)[idx,4]"
        v1_cvgrad = "$(v1)[idx,end-2*colmax+col]"
        v1_ccgrad = "$(v1)[idx,end-1*colmax+col]"
    else
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,1]"
        v1_lo = "$(v1)[idx,2]"
        v1_hi = "$(v1)[idx,3]"
    end
    if startswith(OUT, "temp")
        OUT_cv = "$(OUT)_cv"
        OUT_cc = "$(OUT)_cc"
        OUT_lo = "$(OUT)_lo"
        OUT_hi = "$(OUT)_hi"
        OUT_cvgrad = "$(OUT)_cvgrad[col]"
        OUT_ccgrad = "$(OUT)_ccgrad[col]"
    else
        OUT_cv = "$(OUT)[idx,1]"
        OUT_cc = "$(OUT)[idx,2]"
        OUT_lo = "$(OUT)[idx,3]"
        OUT_hi = "$(OUT)[idx,4]"
        OUT_cvgrad = "$(OUT)[idx,end-2*colmax+col]"
        OUT_ccgrad = "$(OUT)[idx,end-1*colmax+col]"
    end

    # Get the anti-sparsity list (elements NOT being used)
    antisparsity = collect(1:length(varlist))
    antisparsity = antisparsity[antisparsity .∉ Ref(sparsity)]  
    
    # Determine the sparsity case:
    # 1) Use sparsity list
    # 2) Use antisparsity list (because it's shorter than the sparsity list)
    # 3) Don't use either, simply calculate all elements
    if length(sparsity) <= length(antisparsity)
        sparsity_case = 1
        sparsity_string = join(["col == Int32($(x))" for x in sparsity], " || ")
    elseif length(antisparsity) > 0
        antisparsity_string = join(["col == Int32($(x))" for x in antisparsity], " || ")
        sparsity_case = 2
    else
        sparsity_case = 3
    end
    
    # Create the buffer that we will write to
    buffer = Base.IOBuffer()

    # Write all the lines to the buffer
    if startswith(v1, r"aux|temp")
        if iseven(POW)
            if POW==2
                write(buffer, "        #############\n")
                write(buffer, "        ## Squared ##\n")
                write(buffer, "        #############\n")
                write(buffer, "\n")
            else 
                L = length(string(POW))
                write(buffer, "        ###############$("#"^L)#####\n")
                write(buffer, "        ## Even Power ($POW) ##\n")
                write(buffer, "        ###############$("#"^L)#####\n")
                write(buffer, "\n")
            end
            write(buffer, "        # Reset the column counter\n")
            write(buffer, "        col = Int32(1)\n")
            write(buffer, "\n")
            write(buffer, "        # Begin rule\n")
            write(buffer, "        if $v1_hi <= 0.0\n")   
            write(buffer, "            eps_min = $v1_hi\n")   
            write(buffer, "            eps_max = $v1_lo\n")   
            write(buffer, "        elseif $v1_lo >= 0.0\n")   
            write(buffer, "            eps_min = $v1_lo\n")   
            write(buffer, "            eps_max = $v1_hi\n")   
            write(buffer, "        elseif abs($v1_lo) >= abs($v1_hi)\n")    
            write(buffer, "            eps_min = 0.0\n")    
            write(buffer, "            eps_max = $v1_lo\n")   
            write(buffer, "        else\n") 
            write(buffer, "            eps_min = 0.0\n")    
            write(buffer, "            eps_max = $v1_hi\n")   
            write(buffer, "        end\n")  
            write(buffer, "        $OUT_lo $eq eps_min^$POW\n")   
            write(buffer, "        $OUT_hi $eq eps_max^$POW\n")   
            write(buffer, "\n") 
            write(buffer, "        if $v1_cc >= $v1_cv\n")  
            write(buffer, "            if $v1_cv == $v1_cc\n")  
            write(buffer, "                midcv = $v1_cv\n")    
            write(buffer, "                cv_id = Int32(2)\n") 
            write(buffer, "                midcc = $v1_cv\n")    
            write(buffer, "                cc_id = Int32(2)\n") 
            write(buffer, "            elseif $v1_cv >= eps_max\n")   
            write(buffer, "                if $v1_cv >= eps_min\n")   
            write(buffer, "                    midcv = $v1_cv\n")    
            write(buffer, "                    cv_id = Int32(2)\n") 
            write(buffer, "                    midcc = $v1_cv\n")    
            write(buffer, "                    cc_id = Int32(2)\n") 
            write(buffer, "                elseif eps_min >= $v1_cc\n")   
            write(buffer, "                    midcv = $v1_cc\n")    
            write(buffer, "                    cv_id = Int32(1)\n") 
            write(buffer, "                    midcc = $v1_cv\n")    
            write(buffer, "                    cc_id = Int32(2)\n") 
            write(buffer, "                else\n") 
            write(buffer, "                    midcv = eps_min\n") 
            write(buffer, "                    cv_id = Int32(3)\n") 
            write(buffer, "                    midcc = $v1_cv\n")    
            write(buffer, "                    cc_id = Int32(2)\n") 
            write(buffer, "                end\n")  
            write(buffer, "            elseif eps_max >= $v1_cc\n")   
            write(buffer, "                if $v1_cv >= eps_min\n")   
            write(buffer, "                    midcv = $v1_cv\n")    
            write(buffer, "                    cv_id = Int32(2)\n") 
            write(buffer, "                    midcc = $v1_cc\n")    
            write(buffer, "                    cc_id = Int32(1)\n") 
            write(buffer, "                elseif eps_min >= $v1_cc\n")   
            write(buffer, "                    midcv = $v1_cc\n")    
            write(buffer, "                    cv_id = Int32(1)\n") 
            write(buffer, "                    midcc = $v1_cc\n")    
            write(buffer, "                    cc_id = Int32(1)\n") 
            write(buffer, "                else\n") 
            write(buffer, "                    midcv = eps_min\n") 
            write(buffer, "                    cv_id = Int32(3)\n") 
            write(buffer, "                    midcc = $v1_cc\n")    
            write(buffer, "                    cc_id = Int32(1)\n") 
            write(buffer, "                end\n")  
            write(buffer, "            else\n") 
            write(buffer, "                if $v1_cv >= eps_min\n")   
            write(buffer, "                    midcv = $v1_cv\n")    
            write(buffer, "                    cv_id = Int32(2)\n") 
            write(buffer, "                    midcc = eps_max\n") 
            write(buffer, "                    cc_id = Int32(3)\n") 
            write(buffer, "                elseif eps_min >= $v1_cc\n")   
            write(buffer, "                    midcv = $v1_cc\n")    
            write(buffer, "                    cv_id = Int32(1)\n") 
            write(buffer, "                    midcc = eps_max\n") 
            write(buffer, "                    cc_id = Int32(3)\n") 
            write(buffer, "                else\n") 
            write(buffer, "                    midcv = eps_min\n") 
            write(buffer, "                    cv_id = Int32(3)\n") 
            write(buffer, "                    midcc = eps_max\n") 
            write(buffer, "                    cc_id = Int32(3)\n") 
            write(buffer, "                end\n")  
            write(buffer, "            end\n")  
            write(buffer, "        elseif eps_max >= $v1_cv\n")   
            write(buffer, "            if eps_min >= $v1_cv\n")   
            write(buffer, "                midcv = $v1_cv\n")    
            write(buffer, "                cv_id = Int32(2)\n") 
            write(buffer, "                midcc = $v1_cv\n")    
            write(buffer, "                cc_id = Int32(2)\n") 
            write(buffer, "            elseif $v1_cc >= eps_min\n")   
            write(buffer, "                midcv = $v1_cc\n")    
            write(buffer, "                cv_id = Int32(1)\n") 
            write(buffer, "                midcc = $v1_cv\n")    
            write(buffer, "                cc_id = Int32(2)\n") 
            write(buffer, "            else\n") 
            write(buffer, "                midcv = eps_min\n") 
            write(buffer, "                cv_id = Int32(3)\n") 
            write(buffer, "                midcc = $v1_cv\n")    
            write(buffer, "                cc_id = Int32(2)\n") 
            write(buffer, "            end\n")  
            write(buffer, "        elseif $v1_cc >= eps_max\n")   
            write(buffer, "            if eps_min >= $v1_cv\n")   
            write(buffer, "                midcv = $v1_cv\n")    
            write(buffer, "                cv_id = Int32(2)\n") 
            write(buffer, "                midcc = $v1_cc\n")    
            write(buffer, "                cc_id = Int32(1)\n") 
            write(buffer, "            elseif $v1_cc >= eps_min\n")   
            write(buffer, "                midcv = $v1_cc\n")    
            write(buffer, "                cv_id = Int32(1)\n") 
            write(buffer, "                midcc = $v1_cc\n")    
            write(buffer, "                cc_id = Int32(1)\n") 
            write(buffer, "            else\n") 
            write(buffer, "                midcv = eps_min\n") 
            write(buffer, "                cv_id = Int32(3)\n") 
            write(buffer, "                midcc = $v1_cc\n")    
            write(buffer, "                cc_id = Int32(1)\n") 
            write(buffer, "            end\n")  
            write(buffer, "        else\n") 
            write(buffer, "            if eps_min >= $v1_cv\n")   
            write(buffer, "                midcv = $v1_cv\n")    
            write(buffer, "                cv_id = Int32(2)\n") 
            write(buffer, "                midcc = eps_max\n") 
            write(buffer, "                cc_id = Int32(3)\n") 
            write(buffer, "            elseif $v1_cc >= eps_min\n")   
            write(buffer, "                midcv = $v1_cc\n")    
            write(buffer, "                cv_id = Int32(1)\n") 
            write(buffer, "                midcc = eps_max\n") 
            write(buffer, "                cc_id = Int32(3)\n") 
            write(buffer, "            else\n") 
            write(buffer, "                midcv = eps_min\n") 
            write(buffer, "                cv_id = Int32(3)\n") 
            write(buffer, "                midcc = eps_max\n") 
            write(buffer, "                cc_id = Int32(3)\n") 
            write(buffer, "            end\n")  
            write(buffer, "        end\n")  
            write(buffer, "\n")
            if POW==2
                write(buffer, "        if $v1_lo == $v1_hi\n")  
                write(buffer, "            $OUT_cv $eq midcv*midcv\n")   
                write(buffer, "            $OUT_cc $eq midcc^2\n") 
                write(buffer, "            while col <= colmax\n")
                if sparsity_case == 1
                    write(buffer, "                if $sparsity_string\n")   
                    write(buffer, "                    if cv_id==Int32(1)\n")   
                    write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * 2*midcv\n")  
                    write(buffer, "                    elseif cv_id==Int32(2)\n")   
                    write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * 2*midcv\n")  
                    write(buffer, "                    else\n") 
                    write(buffer, "                        $OUT_cvgrad $eq 0.0\n")  
                    write(buffer, "                    end\n")
                    write(buffer, "                    if cc_id==Int32(1)\n")   
                    write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * 2*midcc\n")  
                    write(buffer, "                    elseif cc_id==Int32(2)\n")   
                    write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * 2*midcc\n")  
                    write(buffer, "                    else\n") 
                    write(buffer, "                        $OUT_ccgrad $eq 0.0\n")  
                    write(buffer, "                    end\n")
                    write(buffer, "                else\n")   
                    write(buffer, "                    $OUT_cvgrad $eq 0.0\n") 
                    write(buffer, "                    $OUT_ccgrad $eq 0.0\n")   
                    write(buffer, "                end\n")
                elseif sparsity_case == 2
                    write(buffer, "                if $antisparsity_string\n")
                    write(buffer, "                    $OUT_cvgrad $eq 0.0\n") 
                    write(buffer, "                    $OUT_ccgrad $eq 0.0\n")   
                    write(buffer, "                else\n")
                    write(buffer, "                    if cv_id==Int32(1)\n")   
                    write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * 2*midcv\n")  
                    write(buffer, "                    elseif cv_id==Int32(2)\n")   
                    write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * 2*midcv\n")  
                    write(buffer, "                    else\n") 
                    write(buffer, "                        $OUT_cvgrad $eq 0.0\n")  
                    write(buffer, "                    end\n")
                    write(buffer, "                    if cc_id==Int32(1)\n")   
                    write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * 2*midcc\n")  
                    write(buffer, "                    elseif cc_id==Int32(2)\n")   
                    write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * 2*midcc\n")  
                    write(buffer, "                    else\n") 
                    write(buffer, "                        $OUT_ccgrad $eq 0.0\n")  
                    write(buffer, "                    end\n")
                    write(buffer, "                end\n")
                else
                    write(buffer, "                if cv_id==Int32(1)\n")   
                    write(buffer, "                    $OUT_cvgrad $eq $v1_ccgrad * 2*midcv\n")  
                    write(buffer, "                elseif cv_id==Int32(2)\n")   
                    write(buffer, "                    $OUT_cvgrad $eq $v1_cvgrad * 2*midcv\n")  
                    write(buffer, "                else\n") 
                    write(buffer, "                    $OUT_cvgrad $eq 0.0\n")  
                    write(buffer, "                end\n")
                    write(buffer, "                if cc_id==Int32(1)\n")   
                    write(buffer, "                    $OUT_ccgrad $eq $v1_ccgrad * 2*midcc\n")  
                    write(buffer, "                elseif cc_id==Int32(2)\n")   
                    write(buffer, "                    $OUT_ccgrad $eq $v1_cvgrad * 2*midcc\n")  
                    write(buffer, "                else\n") 
                    write(buffer, "                    $OUT_ccgrad $eq 0.0\n")  
                    write(buffer, "                end\n")
                end
                write(buffer, "                col += Int32(1)\n")  
                write(buffer, "            end\n")  
                write(buffer, "        else\n") 
                write(buffer, "            $OUT_cv $eq midcv*midcv\n")   
                write(buffer, "            $OUT_cc $eq ($v1_lo^2*($v1_hi - midcc) + $v1_hi^2*(midcc - $v1_lo))/($v1_hi - $v1_lo)\n")   
                write(buffer, "            while col <= colmax\n")  
                if sparsity_case == 1
                    write(buffer, "                if $sparsity_string\n")   
                    write(buffer, "                    if cv_id==Int32(1)\n")   
                    write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * 2*midcv\n")  
                    write(buffer, "                    elseif cv_id==Int32(2)\n")   
                    write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * 2*midcv\n")  
                    write(buffer, "                    else\n") 
                    write(buffer, "                        $OUT_cvgrad $eq 0.0\n")  
                    write(buffer, "                    end\n")  
                    write(buffer, "                    if cc_id==Int32(1)\n")   
                    write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * ($v1_hi^2 - $v1_lo^2)/($v1_hi - $v1_lo)\n")    
                    write(buffer, "                    elseif cc_id==Int32(2)\n")   
                    write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * ($v1_hi^2 - $v1_lo^2)/($v1_hi - $v1_lo)\n")    
                    write(buffer, "                    else\n") 
                    write(buffer, "                        $OUT_ccgrad $eq 0.0\n")  
                    write(buffer, "                    end\n")
                    write(buffer, "                else\n")  
                    write(buffer, "                    $OUT_cvgrad $eq 0.0\n")  
                    write(buffer, "                    $OUT_ccgrad $eq 0.0\n")  
                    write(buffer, "                end\n")  
                elseif sparsity_case == 2
                    write(buffer, "                if $antisparsity_string\n")   
                    write(buffer, "                    $OUT_cvgrad $eq 0.0\n")  
                    write(buffer, "                    $OUT_ccgrad $eq 0.0\n")  
                    write(buffer, "                else\n")   
                    write(buffer, "                    if cv_id==Int32(1)\n")   
                    write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * 2*midcv\n")  
                    write(buffer, "                    elseif cv_id==Int32(2)\n")   
                    write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * 2*midcv\n")  
                    write(buffer, "                    else\n") 
                    write(buffer, "                        $OUT_cvgrad $eq 0.0\n")  
                    write(buffer, "                    end\n")  
                    write(buffer, "                    if cc_id==Int32(1)\n")   
                    write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * ($v1_hi^2 - $v1_lo^2)/($v1_hi - $v1_lo)\n")    
                    write(buffer, "                    elseif cc_id==Int32(2)\n")   
                    write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * ($v1_hi^2 - $v1_lo^2)/($v1_hi - $v1_lo)\n")    
                    write(buffer, "                    else\n") 
                    write(buffer, "                        $OUT_ccgrad $eq 0.0\n")  
                    write(buffer, "                    end\n")
                    write(buffer, "                end\n")  
                else
                    write(buffer, "                if cv_id==Int32(1)\n")   
                    write(buffer, "                    $OUT_cvgrad $eq $v1_ccgrad * 2*midcv\n")  
                    write(buffer, "                elseif cv_id==Int32(2)\n")   
                    write(buffer, "                    $OUT_cvgrad $eq $v1_cvgrad * 2*midcv\n")  
                    write(buffer, "                else\n") 
                    write(buffer, "                    $OUT_cvgrad $eq 0.0\n")  
                    write(buffer, "                end\n")  
                    write(buffer, "                if cc_id==Int32(1)\n")   
                    write(buffer, "                    $OUT_ccgrad $eq $v1_ccgrad * ($v1_hi^2 - $v1_lo^2)/($v1_hi - $v1_lo)\n")    
                    write(buffer, "                elseif cc_id==Int32(2)\n")   
                    write(buffer, "                    $OUT_ccgrad $eq $v1_cvgrad * ($v1_hi^2 - $v1_lo^2)/($v1_hi - $v1_lo)\n")    
                    write(buffer, "                else\n") 
                    write(buffer, "                    $OUT_ccgrad $eq 0.0\n")  
                    write(buffer, "                end\n")
                end
                write(buffer, "                col += Int32(1)\n")  
                write(buffer, "            end\n")  
                write(buffer, "        end\n")
            else
                write(buffer, "        if $v1_lo == $v1_hi\n")  
                write(buffer, "            $OUT_cv $eq midcv*midcv^$(POW-1)\n")   
                write(buffer, "            $OUT_cc $eq midcc^$POW\n") 
                write(buffer, "            while col <= colmax\n")  
                if sparsity_case == 1
                    write(buffer, "                if $sparsity_string\n")  
                    write(buffer, "                    if cv_id==Int32(1)\n")   
                    write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")  
                    write(buffer, "                    elseif cv_id==Int32(2)\n")   
                    write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")  
                    write(buffer, "                    else\n") 
                    write(buffer, "                        $OUT_cvgrad $eq 0.0\n")  
                    write(buffer, "                    end\n") 
                    write(buffer, "                    if cc_id==Int32(1)\n")   
                    write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * $POW*midcc^$(POW-1)\n")  
                    write(buffer, "                    elseif cc_id==Int32(2)\n")   
                    write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * $POW*midcc^$(POW-1)\n")  
                    write(buffer, "                    else\n") 
                    write(buffer, "                        $OUT_ccgrad $eq 0.0\n")  
                    write(buffer, "                    end\n")
                    write(buffer, "                else\n")  
                    write(buffer, "                    $OUT_cvgrad $eq 0.0\n") 
                    write(buffer, "                    $OUT_ccgrad $eq 0.0\n")   
                    write(buffer, "                end\n")  
                elseif sparsity_case == 2
                    write(buffer, "                if $antisparsity_string\n") 
                    write(buffer, "                    $OUT_cvgrad $eq 0.0\n") 
                    write(buffer, "                    $OUT_ccgrad $eq 0.0\n")   
                    write(buffer, "                else\n")
                    write(buffer, "                    if cv_id==Int32(1)\n")   
                    write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")  
                    write(buffer, "                    elseif cv_id==Int32(2)\n")   
                    write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")  
                    write(buffer, "                    else\n") 
                    write(buffer, "                        $OUT_cvgrad $eq 0.0\n")  
                    write(buffer, "                    end\n") 
                    write(buffer, "                    if cc_id==Int32(1)\n")   
                    write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * $POW*midcc^$(POW-1)\n")  
                    write(buffer, "                    elseif cc_id==Int32(2)\n")   
                    write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * $POW*midcc^$(POW-1)\n")  
                    write(buffer, "                    else\n") 
                    write(buffer, "                        $OUT_ccgrad $eq 0.0\n")  
                    write(buffer, "                    end\n")
                    write(buffer, "                end\n")  
                else
                    write(buffer, "                if cv_id==Int32(1)\n")   
                    write(buffer, "                    $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")  
                    write(buffer, "                elseif cv_id==Int32(2)\n")   
                    write(buffer, "                    $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")  
                    write(buffer, "                else\n") 
                    write(buffer, "                    $OUT_cvgrad $eq 0.0\n")  
                    write(buffer, "                end\n") 
                    write(buffer, "                if cc_id==Int32(1)\n")   
                    write(buffer, "                    $OUT_ccgrad $eq $v1_ccgrad * $POW*midcc^$(POW-1)\n")  
                    write(buffer, "                elseif cc_id==Int32(2)\n")   
                    write(buffer, "                    $OUT_ccgrad $eq $v1_cvgrad * $POW*midcc^$(POW-1)\n")  
                    write(buffer, "                else\n") 
                    write(buffer, "                    $OUT_ccgrad $eq 0.0\n")  
                    write(buffer, "                end\n")
                end
                write(buffer, "                col += Int32(1)\n")  
                write(buffer, "            end\n")  
                write(buffer, "        else\n") 
                write(buffer, "            $OUT_cv $eq midcv*midcv^$(POW-1)\n")   
                write(buffer, "            $OUT_cc $eq ($v1_lo^$POW*($v1_hi - midcc) + $v1_hi^$POW*(midcc - $v1_lo))/($v1_hi - $v1_lo)\n")   
                write(buffer, "            while col <= colmax\n")  
                if sparsity_case == 1
                    write(buffer, "                if $sparsity_string\n")  
                    write(buffer, "                    if cv_id==Int32(1)\n")   
                    write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")  
                    write(buffer, "                    elseif cv_id==Int32(2)\n")   
                    write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")  
                    write(buffer, "                    else\n") 
                    write(buffer, "                        $OUT_cvgrad $eq 0.0\n")  
                    write(buffer, "                    end\n")  
                    write(buffer, "                    if cc_id==Int32(1)\n")   
                    write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")    
                    write(buffer, "                    elseif cc_id==Int32(2)\n")   
                    write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")    
                    write(buffer, "                    else\n") 
                    write(buffer, "                        $OUT_ccgrad $eq 0.0\n")  
                    write(buffer, "                    end\n")
                    write(buffer, "                else\n")  
                    write(buffer, "                    $OUT_cvgrad $eq 0.0\n") 
                    write(buffer, "                    $OUT_ccgrad $eq 0.0\n")  
                    write(buffer, "                end\n")  
                elseif sparsity_case == 2
                    write(buffer, "                if $antisparsity_string\n")  
                    write(buffer, "                    $OUT_cvgrad $eq 0.0\n") 
                    write(buffer, "                    $OUT_ccgrad $eq 0.0\n")
                    write(buffer, "                else\n")   
                    write(buffer, "                    if cv_id==Int32(1)\n")   
                    write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")  
                    write(buffer, "                    elseif cv_id==Int32(2)\n")   
                    write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")  
                    write(buffer, "                    else\n") 
                    write(buffer, "                        $OUT_cvgrad $eq 0.0\n")  
                    write(buffer, "                    end\n")  
                    write(buffer, "                    if cc_id==Int32(1)\n")   
                    write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")    
                    write(buffer, "                    elseif cc_id==Int32(2)\n")   
                    write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")    
                    write(buffer, "                    else\n") 
                    write(buffer, "                        $OUT_ccgrad $eq 0.0\n")  
                    write(buffer, "                    end\n") 
                    write(buffer, "                end\n")  
                else
                    write(buffer, "                if cv_id==Int32(1)\n")   
                    write(buffer, "                    $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")  
                    write(buffer, "                elseif cv_id==Int32(2)\n")   
                    write(buffer, "                    $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")  
                    write(buffer, "                else\n") 
                    write(buffer, "                    $OUT_cvgrad $eq 0.0\n")  
                    write(buffer, "                end\n")  
                    write(buffer, "                if cc_id==Int32(1)\n")   
                    write(buffer, "                    $OUT_ccgrad $eq $v1_ccgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")    
                    write(buffer, "                elseif cc_id==Int32(2)\n")   
                    write(buffer, "                    $OUT_ccgrad $eq $v1_cvgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")    
                    write(buffer, "                else\n") 
                    write(buffer, "                    $OUT_ccgrad $eq 0.0\n")  
                    write(buffer, "                end\n")
                end
                write(buffer, "                col += Int32(1)\n")  
                write(buffer, "            end\n")  
                write(buffer, "        end\n")
            end
            write(buffer, "\n")
            write(buffer, "        # Cut\n")    
            write(buffer, "        if $OUT_cv < $OUT_lo\n")   
            write(buffer, "            $OUT_cv $eq $OUT_lo\n")  
            write(buffer, "            col = Int32(1)\n")   
            write(buffer, "            while col <= colmax\n")  
            write(buffer, "                $OUT_cvgrad $eq 0.0\n")  
            write(buffer, "                col += Int32(1)\n")  
            write(buffer, "            end\n")  
            write(buffer, "        end\n")  
            write(buffer, "        if $OUT_cc > $OUT_hi\n")   
            write(buffer, "            $OUT_cc $eq $OUT_hi\n")  
            write(buffer, "            col = Int32(1)\n")   
            write(buffer, "            while col <= colmax\n")  
            write(buffer, "                $OUT_ccgrad $eq 0.0\n")  
            write(buffer, "                col += Int32(1)\n")  
            write(buffer, "            end\n")  
            write(buffer, "        end\n")  
            write(buffer, "\n")
        else
            if POW==3
                write(buffer, "        ###########\n")
                write(buffer, "        ## Cubed ##\n")
                write(buffer, "        ###########\n")
                write(buffer, "\n")
            else
                L = length(string(POW))
                write(buffer, "        ##############$("#"^L)#####\n")
                write(buffer, "        ## Odd Power ($POW) ##\n")
                write(buffer, "        ##############$("#"^L)#####\n")
                write(buffer, "\n")
            end
            write(buffer, "        # Reset the column counter\n")
            write(buffer, "        col = Int32(1)\n")
            write(buffer, "\n")
            write(buffer, "        $OUT_lo $eq $v1_lo^$POW\n")
            write(buffer, "        $OUT_hi $eq $v1_hi^$POW\n")
            write(buffer, "\n")
            write(buffer, "        if $v1_cc >= $v1_cv\n")
            write(buffer, "            if $v1_cv == $v1_cc\n")
            write(buffer, "                midcv = $v1_cv\n")
            write(buffer, "                cv_id = Int32(2)\n")
            write(buffer, "                midcc = $v1_cv\n")
            write(buffer, "                cc_id = Int32(2)\n")
            write(buffer, "            elseif $v1_cv >= $v1_hi\n")
            write(buffer, "                if $v1_cv >= $v1_lo\n")
            write(buffer, "                    midcv = $v1_cv\n")
            write(buffer, "                    cv_id = Int32(2)\n")
            write(buffer, "                    midcc = $v1_cv\n")
            write(buffer, "                    cc_id = Int32(2)\n")
            write(buffer, "                elseif $v1_lo >= $v1_cc\n")
            write(buffer, "                    midcv = $v1_cc\n")
            write(buffer, "                    cv_id = Int32(1)\n")
            write(buffer, "                    midcc = $v1_cv\n")
            write(buffer, "                    cc_id = Int32(2)\n")
            write(buffer, "                else\n")
            write(buffer, "                    midcv = $v1_lo\n")
            write(buffer, "                    cv_id = Int32(3)\n")
            write(buffer, "                    midcc = $v1_cv\n")
            write(buffer, "                    cc_id = Int32(2)\n")
            write(buffer, "                end\n")
            write(buffer, "            elseif $v1_hi >= $v1_cc\n")
            write(buffer, "                if $v1_cv >= $v1_lo\n")
            write(buffer, "                    midcv = $v1_cv\n")
            write(buffer, "                    cv_id = Int32(2)\n")
            write(buffer, "                    midcc = $v1_cc\n")
            write(buffer, "                    cc_id = Int32(1)\n")
            write(buffer, "                elseif $v1_lo >= $v1_cc\n")
            write(buffer, "                    midcv = $v1_cc\n")
            write(buffer, "                    cv_id = Int32(1)\n")
            write(buffer, "                    midcc = $v1_cc\n")
            write(buffer, "                    cc_id = Int32(1)\n")
            write(buffer, "                else\n")
            write(buffer, "                    midcv = $v1_lo\n")
            write(buffer, "                    cv_id = Int32(3)\n")
            write(buffer, "                    midcc = $v1_cc\n")
            write(buffer, "                    cc_id = Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            else\n")
            write(buffer, "                if $v1_cv >= $v1_lo\n")
            write(buffer, "                    midcv = $v1_cv\n")
            write(buffer, "                    cv_id = Int32(2)\n")
            write(buffer, "                    midcc = $v1_hi\n")
            write(buffer, "                    cc_id = Int32(3)\n")
            write(buffer, "                elseif $v1_lo >= $v1_cc\n")
            write(buffer, "                    midcv = $v1_cc\n")
            write(buffer, "                    cv_id = Int32(1)\n")
            write(buffer, "                    midcc = $v1_hi\n")
            write(buffer, "                    cc_id = Int32(3)\n")
            write(buffer, "                else\n")
            write(buffer, "                    midcv = $v1_lo\n")
            write(buffer, "                    cv_id = Int32(3)\n")
            write(buffer, "                    midcc = $v1_hi\n")
            write(buffer, "                    cc_id = Int32(3)\n")
            write(buffer, "                end\n")
            write(buffer, "            end\n")
            write(buffer, "        elseif $v1_hi >= $v1_cv\n")
            write(buffer, "            if $v1_lo >= $v1_cv\n")
            write(buffer, "                midcv = $v1_cv\n")
            write(buffer, "                cv_id = Int32(2)\n")
            write(buffer, "                midcc = $v1_cv\n")
            write(buffer, "                cc_id = Int32(2)\n")
            write(buffer, "            elseif $v1_cc >= $v1_lo\n")
            write(buffer, "                midcv = $v1_cc\n")
            write(buffer, "                cv_id = Int32(1)\n")
            write(buffer, "                midcc = $v1_cv\n")
            write(buffer, "                cc_id = Int32(2)\n")
            write(buffer, "            else\n")
            write(buffer, "                midcv = $v1_lo\n")
            write(buffer, "                cv_id = Int32(3)\n")
            write(buffer, "                midcc = $v1_cv\n")
            write(buffer, "                cc_id = Int32(2)\n")
            write(buffer, "            end\n")
            write(buffer, "        elseif $v1_cc >= $v1_hi\n")
            write(buffer, "            if $v1_lo >= $v1_cv\n")
            write(buffer, "                midcv = $v1_cv\n")
            write(buffer, "                cv_id = Int32(2)\n")
            write(buffer, "                midcc = $v1_cc\n")
            write(buffer, "                cc_id = Int32(1)\n")
            write(buffer, "            elseif $v1_cc >= $v1_lo\n")
            write(buffer, "                midcv = $v1_cc\n")
            write(buffer, "                cv_id = Int32(1)\n")
            write(buffer, "                midcc = $v1_cc\n")
            write(buffer, "                cc_id = Int32(1)\n")
            write(buffer, "            else\n")
            write(buffer, "                midcv = $v1_lo\n")
            write(buffer, "                cv_id = Int32(3)\n")
            write(buffer, "                midcc = $v1_cc\n")
            write(buffer, "                cc_id = Int32(1)\n")
            write(buffer, "            end\n")
            write(buffer, "        else\n")
            write(buffer, "            if $v1_lo >= $v1_cv\n")
            write(buffer, "                midcv = $v1_cv\n")
            write(buffer, "                cv_id = Int32(2)\n")
            write(buffer, "                midcc = $v1_hi\n")
            write(buffer, "                cc_id = Int32(3)\n")
            write(buffer, "            elseif $v1_cc >= $v1_lo\n")
            write(buffer, "                midcv = $v1_cc\n")
            write(buffer, "                cv_id = Int32(1)\n")
            write(buffer, "                midcc = $v1_hi\n")
            write(buffer, "                cc_id = Int32(3)\n")
            write(buffer, "            else\n")
            write(buffer, "                midcv = $v1_lo\n")
            write(buffer, "                cv_id = Int32(3)\n")
            write(buffer, "                midcc = $v1_hi\n")
            write(buffer, "                cc_id = Int32(3)\n")
            write(buffer, "            end\n")
            write(buffer, "        end\n")
            write(buffer, "\n")
            write(buffer, "        if $v1_hi <= 0.0\n")
            write(buffer, "            if $v1_lo==$v1_hi\n")
            write(buffer, "                $OUT_cv $eq midcv^$POW\n")
            write(buffer, "                $OUT_cc $eq midcc^$POW\n")
            write(buffer, "                while col <= colmax\n")
            if sparsity_case == 1
                write(buffer, "                    if $sparsity_string\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            elseif sparsity_case == 2
                write(buffer, "                    if $antisparsity_string\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    else\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
            else
                write(buffer, "                    if cv_id==Int32(1)\n")
                write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                    elseif cv_id==Int32(2)\n")
                write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                    end\n")
                write(buffer, "                    if cc_id==Int32(1)\n")
                write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                    elseif cc_id==Int32(2)\n")
                write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            end
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            else\n")
            write(buffer, "                $OUT_cv $eq ($v1_lo^$POW*($v1_hi - midcv) + $v1_hi^$POW*(midcv - $v1_lo))/($v1_hi - $v1_lo)\n")
            write(buffer, "                $OUT_cc $eq midcc^$POW\n")
            write(buffer, "                while col <= colmax\n")
            if sparsity_case == 1
                write(buffer, "                    if $sparsity_string\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            elseif sparsity_case == 2
                write(buffer, "                    if $antisparsity_string\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    else\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
            else
                write(buffer, "                    if cv_id==Int32(1)\n")
                write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                    elseif cv_id==Int32(2)\n")
                write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                    end\n")
                write(buffer, "                    if cc_id==Int32(1)\n")
                write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                    elseif cc_id==Int32(2)\n")
                write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            end
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            end\n")
            write(buffer, "        elseif 0.0 <= $v1_lo\n")
            write(buffer, "            if $v1_lo==$v1_hi\n")
            write(buffer, "                $OUT_cv $eq midcv^$POW\n")
            write(buffer, "                $OUT_cc $eq midcc^$POW\n")
            write(buffer, "                while col <= colmax\n")

            if sparsity_case == 1
                write(buffer, "                    if $sparsity_string\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            elseif sparsity_case == 2
                write(buffer, "                    if $antisparsity_string\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    else\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
            else
                write(buffer, "                    if cv_id==Int32(1)\n")
                write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                    elseif cv_id==Int32(2)\n")
                write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                    end\n")
                write(buffer, "                    if cc_id==Int32(1)\n")
                write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                    elseif cc_id==Int32(2)\n")
                write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            end
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            else\n")
            write(buffer, "                $OUT_cv $eq midcv^$POW\n")
            write(buffer, "                $OUT_cc $eq ($v1_lo^$POW*($v1_hi - midcc) + $v1_hi^$POW*(midcc - $v1_lo))/($v1_hi - $v1_lo)\n")
            write(buffer, "                while col <= colmax\n")
            if sparsity_case == 1
                write(buffer, "                    if $sparsity_string\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            elseif sparsity_case == 2
                write(buffer, "                    if $antisparsity_string\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    else\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
            else
                write(buffer, "                    if cv_id==Int32(1)\n")
                write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                    elseif cv_id==Int32(2)\n")
                write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                    end\n")
                write(buffer, "                    if cc_id==Int32(1)\n")
                write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                    elseif cc_id==Int32(2)\n")
                write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            end
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            end\n")
            write(buffer, "        else\n")
            write(buffer, "\n")
            if POW==3
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.5*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.5*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==5
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.6058295861882683*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.6058295861882683*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==7
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.6703320476030968*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.6703320476030968*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==9
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.7145377271673349*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.7145377271673349*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==11
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.7470540748651559*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.7470540748651559*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==13
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.7721416355234655*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.7721416355234655*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==15
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.7921778546056709*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.7921778546056709*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==17
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8086048978723027*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8086048978723027*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==19
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8223534102385287*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8223534102385287*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==21
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8340533675507736*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8340533675507736*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==23
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8441478047418446*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8441478047418446*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==25
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8529581643906964*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8529581643906964*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==27
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8607238145679608*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8607238145679608*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==29
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8676269762720762*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8676269762720762*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==31
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8738090154215446*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8738090154215446*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==33
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8793814183583145*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8793814183583145*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==35
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8844333818207290*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8844333818207290*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==37
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8890371830149935*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8890371830149935*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==39
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8932520563312301*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8932520563312301*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==41
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8971270424799359*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8971270424799359*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==43
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.9007031161732270*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.9007031161732270*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==45
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.9040147980608216*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.9040147980608216*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==47
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.9070913919345662*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.9070913919345662*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==49
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.9099579456198456*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.9099579456198456*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            else
                write(buffer, "            # Apply Newton/golden section methods for the convex part,\n")
                write(buffer, "            # to get x_cv (the inflection point for the convex relaxation)\n")
                write(buffer, "            dfk = 0.0\n")
                write(buffer, "            xk_cv = max(0.0, $v1_hi)\n")
                write(buffer, "            fk = (xk_cv^$POW - $v1_lo^$POW) - (xk_cv-$v1_lo)*$POW*(xk_cv^$(POW-1))\n")
                write(buffer, "            flag = true\n")
                write(buffer, "            iter = Int32(1)\n")
                write(buffer, "            while iter <= Int32(100)\n")
                write(buffer, "                dfk = $(POW-1)*$POW*xk_cv^$(POW-2)*($v1_lo-xk_cv);\n")
                write(buffer, "                if abs(fk) < 1e-10\n")
                write(buffer, "                    flag = false\n")
                write(buffer, "                    break # use xk_cv\n")
                write(buffer, "                end\n")
                write(buffer, "                if iszero(dfk)\n")
                write(buffer, "                    xk_cv = 0.0\n")
                write(buffer, "                    break # Need to do golden section\n")
                write(buffer, "                end\n")
                write(buffer, "                if (xk_cv == 0.0) && (fk/dfk > 0.0)\n")
                write(buffer, "                    flag = false\n")
                write(buffer, "                    break # use xk_cv\n")
                write(buffer, "                elseif (xk_cv == $v1_hi) && (fk/dfk < 0.0)\n")
                write(buffer, "                    flag = false\n")
                write(buffer, "                    break # use xk_cv\n")
                write(buffer, "                end\n")
                write(buffer, "                xk_cv = max(0.0, min($v1_hi, xk_cv - fk/dfk))\n")
                write(buffer, "                fk = (xk_cv^$POW - $v1_lo^$POW) - (xk_cv-$v1_lo)*$POW*(xk_cv^$(POW-1))\n")
                write(buffer, "                iter += Int32(1)\n")
                write(buffer, "            end\n")
                write(buffer, "\n")
                write(buffer, "            # If flag, we need to do golden section instead\n")
                write(buffer, "            if flag\n")
                write(buffer, "                a_golden = $v1_lo\n")
                write(buffer, "                fa_golden = (a_golden^$POW - $v1_lo^$POW) - (a_golden-$v1_lo)*$POW*(a_golden^$(POW-1))\n")
                write(buffer, "                c_golden = $v1_hi\n")
                write(buffer, "                fc_golden = (c_golden^$POW - $v1_lo^$POW) - (c_golden-$v1_lo)*$POW*(c_golden^$(POW-1))\n")
                write(buffer, "\n")
                write(buffer, "                if fa_golden*fc_golden > 0\n")
                write(buffer, "                    xk_cv = NaN\n")
                write(buffer, "                end\n")
                write(buffer, "\n")
                write(buffer, "                b_golden = $v1_hi - (2.0 - Base.MathConstants.golden)*($v1_hi - $v1_lo)\n")
                write(buffer, "                fb_golden = (b_golden^$POW - $v1_lo^$POW) - (b_golden-$v1_lo)*$POW*(b_golden^$(POW-1))\n")
                write(buffer, "\n")
                write(buffer, "                iter = Int32(1)\n")
                write(buffer, "                while iter <= Int32(100)\n")
                write(buffer, "                    if (c_golden - b_golden > b_golden - a_golden)\n")
                write(buffer, "                        x_golden = b_golden + (2.0 - Base.MathConstants.golden)*(c_golden - b_golden)\n")
                write(buffer, "                        if abs(c_golden-a_golden) < 1.0e-10*(abs(b_golden) + abs(x_golden)) || iter == Int32(100)\n")
                write(buffer, "                            xk_cv = (c_golden + a_golden)/2.0\n")
                write(buffer, "                            break\n")
                write(buffer, "                        end\n")
                write(buffer, "                        iter += Int32(1)\n")
                write(buffer, "                        fx_golden = (x_golden^$POW - $v1_lo^$POW) - (x_golden-$v1_lo)*$POW*(x_golden^$(POW-1))\n")
                write(buffer, "                        if fa_golden*fx_golden < 0.0\n")
                write(buffer, "                            c_golden = x_golden\n")
                write(buffer, "                            fc_golden = fx_golden\n")
                write(buffer, "                        else\n")
                write(buffer, "                            a_golden = b_golden\n")
                write(buffer, "                            fa_golden = fb_golden\n")
                write(buffer, "                            b_golden = x_golden\n")
                write(buffer, "                            fb_golden = fx_golden\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        x_golden = b_golden - (2.0 - Base.MathConstants.golden)*(b_golden - a_golden)\n")
                write(buffer, "                        if abs(c_golden-a_golden) < 1.0e-10*(abs(b_golden) + abs(x_golden)) || iter == Int32(100)\n")
                write(buffer, "                            xk_cv = (c_golden + a_golden)/2.0\n")
                write(buffer, "                            break\n")
                write(buffer, "                        end\n")
                write(buffer, "                        iter += Int32(1)\n")
                write(buffer, "                        fx_golden = (x_golden^$POW - $v1_lo^$POW) - (x_golden-$v1_lo)*$POW*(x_golden^$(POW-1))\n")
                write(buffer, "                        if fa_golden*fb_golden < 0.0\n")
                write(buffer, "                            c_golden = b_golden\n")
                write(buffer, "                            fc_golden = fb_golden\n")
                write(buffer, "                            b_golden = x_golden\n")
                write(buffer, "                            fb_golden = fx_golden\n")
                write(buffer, "                        else\n")
                write(buffer, "                            a_golden = x_golden\n")
                write(buffer, "                            fa_golden = fx_golden\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
                write(buffer, "                end\n")
                write(buffer, "            end\n")
                write(buffer, "\n")
                write(buffer, "            # Apply Newton/golden section methods for the concave part,\n")
                write(buffer, "            # to get x_cc (the inflection point for the concave relaxation)\n")
                write(buffer, "            dfk = 0.0\n")
                write(buffer, "            xk_cc = $v1_lo\n")
                write(buffer, "            fk = ($v1_hi^$POW-xk_cc^$POW) - ($v1_hi-xk_cc)*$POW*(xk_cc^$(POW-1))\n")
                write(buffer, "            flag = true\n")
                write(buffer, "            iter = Int32(1)\n")
                write(buffer, "            while iter <= Int32(100)\n")
                write(buffer, "                dfk = $(POW-1)*$POW*xk_cc^$(POW-2)*(xk_cc-$v1_hi);\n")
                write(buffer, "                if abs(fk) < 1e-10\n")
                write(buffer, "                    flag = false\n")
                write(buffer, "                    break # use xk_cc\n")
                write(buffer, "                end\n")
                write(buffer, "                if iszero(dfk)\n")
                write(buffer, "                    xk_cc = 0.0\n")
                write(buffer, "                    break # Need to do golden section\n")
                write(buffer, "                end\n")
                write(buffer, "                if (xk_cc == $v1_lo) && (fk/dfk > 0.0)\n")
                write(buffer, "                    flag = false\n")
                write(buffer, "                    break # use xk_cc\n")
                write(buffer, "                elseif (xk_cc == 0.0) && (fk/dfk < 0.0)\n")
                write(buffer, "                    flag = false\n")
                write(buffer, "                    break # use xk_cc\n")
                write(buffer, "                end\n")
                write(buffer, "                xk_cc = max($v1_lo, min(0.0, xk_cc - fk/dfk))\n")
                write(buffer, "                fk = ($v1_hi^$POW-xk_cc^$POW) - ($v1_hi-xk_cc)*$POW*(xk_cc^$(POW-1))\n")
                write(buffer, "                iter += Int32(1)\n")
                write(buffer, "            end\n")
                write(buffer, "\n")
                write(buffer, "            # If flag, we need to do golden section instead\n")
                write(buffer, "            if flag\n")
                write(buffer, "                a_golden = $v1_lo\n")
                write(buffer, "                fa_golden = ($v1_hi^$POW-$v1_lo^$POW) - ($v1_hi-$v1_lo)*$POW*($v1_lo^$(POW-1))\n")
                write(buffer, "                c_golden = $v1_hi\n")
                write(buffer, "                fc_golden = 0.0\n")
                write(buffer, "\n")
                write(buffer, "                if fa_golden*fc_golden > 0\n")
                write(buffer, "                    xk_cc = NaN\n")
                write(buffer, "                end\n")
                write(buffer, "\n")
                write(buffer, "                b_golden = $v1_hi - (2.0 - Base.MathConstants.golden)*($v1_hi - $v1_lo)\n")
                write(buffer, "                fb_golden = ($v1_hi^$POW-b_golden^$POW) - ($v1_hi-b_golden)*$POW*(b_golden^$(POW-1))\n")
                write(buffer, "\n")
                write(buffer, "                iter = Int32(1)\n")
                write(buffer, "                while iter <= Int32(100)\n")
                write(buffer, "                    if (c_golden - b_golden > b_golden - a_golden)\n")
                write(buffer, "                        x_golden = b_golden + (2.0 - Base.MathConstants.golden)*(c_golden - b_golden)\n")
                write(buffer, "                        if abs(c_golden-a_golden) < 1.0e-10*(abs(b_golden) + abs(x_golden)) || iter == Int32(100)\n")
                write(buffer, "                            xk_cc = (c_golden + a_golden)/2.0\n")
                write(buffer, "                            break\n")
                write(buffer, "                        end\n")
                write(buffer, "                        iter += Int32(1)\n")
                write(buffer, "                        fx_golden = ($v1_hi^$POW-x_golden^$POW) - ($v1_hi-x_golden)*$POW*(x_golden^$(POW-1))\n")
                write(buffer, "                        if fa_golden*fx_golden < 0.0\n")
                write(buffer, "                            c_golden = x_golden\n")
                write(buffer, "                            fc_golden = fx_golden\n")
                write(buffer, "                        else\n")
                write(buffer, "                            a_golden = b_golden\n")
                write(buffer, "                            fa_golden = fb_golden\n")
                write(buffer, "                            b_golden = x_golden\n")
                write(buffer, "                            fb_golden = fx_golden\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        x_golden = b_golden - (2.0 - Base.MathConstants.golden)*(b_golden - a_golden)\n")
                write(buffer, "                        if abs(c_golden-a_golden) < 1.0e-10*(abs(b_golden) + abs(x_golden)) || iter == Int32(100)\n")
                write(buffer, "                            xk_cc = (c_golden + a_golden)/2.0\n")
                write(buffer, "                            break\n")
                write(buffer, "                        end\n")
                write(buffer, "                        iter += Int32(1)\n")
                write(buffer, "                        fx_golden = ($v1_hi^$POW-x_golden^$POW) - ($v1_hi-x_golden)*$POW*(x_golden^$(POW-1))\n")
                write(buffer, "                        if fa_golden*fb_golden < 0.0\n")
                write(buffer, "                            c_golden = b_golden\n")
                write(buffer, "                            fc_golden = fb_golden\n")
                write(buffer, "                            b_golden = x_golden\n")
                write(buffer, "                            fb_golden = fx_golden\n")
                write(buffer, "                        else\n")
                write(buffer, "                            a_golden = x_golden\n")
                write(buffer, "                            fa_golden = fx_golden\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
                write(buffer, "                end\n")
                write(buffer, "            end\n")
                write(buffer, "\n")
            end
            write(buffer, "            # Now we have the inflection points, so we either\n")
            write(buffer, "            # look at the line segment or the function itself\n")
            write(buffer, "            if (midcv <= xk_cv) && ($v1_lo != xk_cv) # cv uses line segment\n")
            write(buffer, "                $OUT_cv $eq ($v1_lo^$POW*(xk_cv - midcv) + xk_cv^$POW*(midcv - $v1_lo))/(xk_cv - $v1_lo)\n")
            write(buffer, "                while col <= colmax\n")
            if sparsity_case == 1
                write(buffer, "                    if $sparsity_string\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * (xk_cv^$POW - $v1_lo^$POW)/(xk_cv - $v1_lo)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (xk_cv^$POW - $v1_lo^$POW)/(xk_cv - $v1_lo)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            elseif sparsity_case == 2
                write(buffer, "                    if $antisparsity_string\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                    else\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * (xk_cv^$POW - $v1_lo^$POW)/(xk_cv - $v1_lo)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * (xk_cv^$POW - $v1_lo^$POW)/(xk_cv - $v1_lo)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
            else
                write(buffer, "                    if cv_id==Int32(1)\n")
                write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * (xk_cv^$POW - $v1_lo^$POW)/(xk_cv - $v1_lo)\n")
                write(buffer, "                    elseif cv_id==Int32(2)\n")
                write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * (xk_cv^$POW - $v1_lo^$POW)/(xk_cv - $v1_lo)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            end
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            else # cv uses the function itself\n")
            write(buffer, "                $OUT_cv $eq midcv^$POW\n")
            write(buffer, "                while col <= colmax\n")
            if sparsity_case == 1
                write(buffer, "                    if $sparsity_string\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            elseif sparsity_case == 2
                write(buffer, "                    if $antisparsity_string\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                    else\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
            else
                write(buffer, "                    if cv_id==Int32(1)\n")
                write(buffer, "                        $OUT_cvgrad $eq $v1_ccgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                    elseif cv_id==Int32(2)\n")
                write(buffer, "                        $OUT_cvgrad $eq $v1_cvgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            end
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            end\n")
            write(buffer, "\n")
            write(buffer, "            # Reset the column counter\n")
            write(buffer, "            col = Int32(1)\n")
            write(buffer, "\n")
            write(buffer, "            # Now do the cc side\n")
            write(buffer, "            if (midcc > xk_cc) && ($v1_hi != xk_cc)\n")
            write(buffer, "                $OUT_cc $eq (xk_cc^$POW*($v1_hi - midcc) + $v1_hi^$POW*(midcc - xk_cc))/($v1_hi - xk_cc)\n")
            write(buffer, "                while col <= colmax\n")
            if sparsity_case == 1
                write(buffer, "                    if $sparsity_string\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * ($v1_hi^$POW - xk_cc^$POW)/($v1_hi - xk_cc)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * ($v1_hi^$POW - xk_cc^$POW)/($v1_hi - xk_cc)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            elseif sparsity_case == 2
                write(buffer, "                    if $antisparsity_string\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    else\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * ($v1_hi^$POW - xk_cc^$POW)/($v1_hi - xk_cc)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * ($v1_hi^$POW - xk_cc^$POW)/($v1_hi - xk_cc)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
            else
                write(buffer, "                    if cc_id==Int32(1)\n")
                write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * ($v1_hi^$POW - xk_cc^$POW)/($v1_hi - xk_cc)\n")
                write(buffer, "                    elseif cc_id==Int32(2)\n")
                write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * ($v1_hi^$POW - xk_cc^$POW)/($v1_hi - xk_cc)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            end
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            else\n")
            write(buffer, "                $OUT_cc $eq midcc^$POW\n")
            write(buffer, "                while col <= colmax\n")
            if sparsity_case == 1
                write(buffer, "                    if $sparsity_string\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            elseif sparsity_case == 2
                write(buffer, "                    if $antisparsity_string\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    else\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_ccgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad $eq $v1_cvgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
            else
                write(buffer, "                    if cc_id==Int32(1)\n")
                write(buffer, "                        $OUT_ccgrad $eq $v1_ccgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                    elseif cc_id==Int32(2)\n")
                write(buffer, "                        $OUT_ccgrad $eq $v1_cvgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            end
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            end\n")
            write(buffer, "        end\n")
            write(buffer, "\n")
            write(buffer, "        # Cut\n")
            write(buffer, "        if $OUT_cv < $OUT_lo\n")
            write(buffer, "            $OUT_cv $eq $OUT_lo\n")
            write(buffer, "            col = Int32(1)\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
            write(buffer, "        end\n")
            write(buffer, "        if $OUT_cc > $OUT_hi\n")
            write(buffer, "            $OUT_cc $eq $OUT_hi\n")
            write(buffer, "            col = Int32(1)\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
            write(buffer, "        end\n")
            write(buffer, "\n")
        end
    else
        ID = findfirst(==(v1), varlist)
        isnothing(ID) && error("Empty varlist")
        if iseven(POW)
            if POW==2
                write(buffer, "        #############\n")
                write(buffer, "        ## Squared ##\n")
                write(buffer, "        #############\n")
                write(buffer, "\n")
            else 
                L = length(string(POW))
                write(buffer, "        ###############$("#"^L)#####\n")
                write(buffer, "        ## Even Power ($POW) ##\n")
                write(buffer, "        ###############$("#"^L)#####\n")
                write(buffer, "\n")
            end
            write(buffer, "        # Reset the column counter\n")
            write(buffer, "        col = Int32(1)\n")
            write(buffer, "\n")
            write(buffer, "        # Begin rule\n")
            write(buffer, "        if $v1_hi <= 0.0\n")   
            write(buffer, "            eps_min = $v1_hi\n")   
            write(buffer, "            eps_max = $v1_lo\n")   
            write(buffer, "        elseif $v1_lo >= 0.0\n")   
            write(buffer, "            eps_min = $v1_lo\n")   
            write(buffer, "            eps_max = $v1_hi\n")   
            write(buffer, "        elseif abs($v1_lo) >= abs($v1_hi)\n")    
            write(buffer, "            eps_min = 0.0\n")    
            write(buffer, "            eps_max = $v1_lo\n")   
            write(buffer, "        else\n") 
            write(buffer, "            eps_min = 0.0\n")    
            write(buffer, "            eps_max = $v1_hi\n")   
            write(buffer, "        end\n")  
            write(buffer, "        $OUT_lo $eq eps_min^$POW\n")   
            write(buffer, "        $OUT_hi $eq eps_max^$POW\n")   
            write(buffer, "\n") 
            if POW==2
                write(buffer, "        if $v1_lo == $v1_hi\n")  
                write(buffer, "            $OUT_cv $eq $v1_cv*$v1_cv\n")   
                write(buffer, "            $OUT_cc $eq $v1_cv^2\n") 
                write(buffer, "            while col <= colmax\n")
                write(buffer, "                if col == Int32($ID)\n") 
                write(buffer, "                    $OUT_cvgrad $eq 2*$v1_cv\n")    
                write(buffer, "                    $OUT_ccgrad $eq 2*$v1_cv\n")   
                write(buffer, "                else\n") 
                write(buffer, "                    $OUT_cvgrad $eq 0.0\n") 
                write(buffer, "                    $OUT_ccgrad $eq 0.0\n") 
                write(buffer, "                end\n") 
                write(buffer, "                col += Int32(1)\n")  
                write(buffer, "            end\n")  
                write(buffer, "        else\n") 
                write(buffer, "            $OUT_cv $eq $v1_cv*$v1_cv\n")   
                write(buffer, "            $OUT_cc $eq ($v1_lo^2*($v1_hi - $v1_cv) + $v1_hi^2*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")   
                write(buffer, "            while col <= colmax\n")  
                write(buffer, "                if col == Int32($ID)\n")  
                write(buffer, "                    $OUT_cvgrad $eq 2*$v1_cv\n") 
                write(buffer, "                    $OUT_ccgrad $eq ($v1_hi + $v1_lo)\n")
                write(buffer, "                else\n") 
                write(buffer, "                    $OUT_cvgrad $eq 0.0\n") 
                write(buffer, "                    $OUT_ccgrad $eq 0.0\n") 
                write(buffer, "                end\n")  
                write(buffer, "                col += Int32(1)\n")  
                write(buffer, "            end\n")  
                write(buffer, "        end\n")
            else
                write(buffer, "        if $v1_lo == $v1_hi\n")  
                write(buffer, "            $OUT_cv $eq $v1_cv*$v1_cv^$(POW-1)\n")   
                write(buffer, "            $OUT_cc $eq $v1_cv^$POW\n") 
                write(buffer, "            while col <= colmax\n")  
                write(buffer, "                if col == Int32($ID)\n") 
                write(buffer, "                    $OUT_cvgrad $eq $POW*$v1_cv^$(POW-1)\n")
                write(buffer, "                    $OUT_ccgrad $eq $POW*$v1_cv^$(POW-1)\n")
                write(buffer, "                else\n") 
                write(buffer, "                    $OUT_cvgrad $eq 0.0\n") 
                write(buffer, "                    $OUT_ccgrad $eq 0.0\n") 
                write(buffer, "                end\n")  
                write(buffer, "                col += Int32(1)\n")  
                write(buffer, "            end\n")  
                write(buffer, "        else\n") 
                write(buffer, "            $OUT_cv $eq $v1_cv*$v1_cv^$(POW-1)\n")   
                write(buffer, "            $OUT_cc $eq ($v1_lo^$POW*($v1_hi - $v1_cv) + $v1_hi^$POW*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")   
                write(buffer, "            while col <= colmax\n")  
                write(buffer, "                if col == Int32($ID)\n")   
                write(buffer, "                    $OUT_cvgrad $eq $POW*$v1_cv^$(POW-1)\n")   
                write(buffer, "                    $OUT_ccgrad $eq ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                else\n") 
                write(buffer, "                    $OUT_cvgrad $eq 0.0\n") 
                write(buffer, "                    $OUT_ccgrad $eq 0.0\n") 
                write(buffer, "                end\n")   
                write(buffer, "                col += Int32(1)\n")  
                write(buffer, "            end\n")  
                write(buffer, "        end\n")
            end
            write(buffer, "\n")
            write(buffer, "        # Cut\n")    
            write(buffer, "        if $OUT_cv < $OUT_lo\n")   
            write(buffer, "            $OUT_cv $eq $OUT_lo\n")  
            write(buffer, "            col = Int32(1)\n")   
            write(buffer, "            while col <= colmax\n")  
            write(buffer, "                $OUT_cvgrad $eq 0.0\n")  
            write(buffer, "                col += Int32(1)\n")  
            write(buffer, "            end\n")  
            write(buffer, "        end\n")  
            write(buffer, "        if $OUT_cc > $OUT_hi\n")   
            write(buffer, "            $OUT_cc $eq $OUT_hi\n")  
            write(buffer, "            col = Int32(1)\n")   
            write(buffer, "            while col <= colmax\n")  
            write(buffer, "                $OUT_ccgrad $eq 0.0\n")  
            write(buffer, "                col += Int32(1)\n")  
            write(buffer, "            end\n")  
            write(buffer, "        end\n")  
            write(buffer, "\n")
        else
            if POW==3
                write(buffer, "        ###########\n")
                write(buffer, "        ## Cubed ##\n")
                write(buffer, "        ###########\n")
                write(buffer, "\n")
            else
                L = length(string(POW))
                write(buffer, "        ##############$("#"^L)#####\n")
                write(buffer, "        ## Odd Power ($POW) ##\n")
                write(buffer, "        ##############$("#"^L)#####\n")
                write(buffer, "\n")
            end
            write(buffer, "        # Reset the column counter\n")
            write(buffer, "        col = Int32(1)\n")
            write(buffer, "\n")
            write(buffer, "        $OUT_lo $eq $v1_lo^$POW\n")
            write(buffer, "        $OUT_hi $eq $v1_hi^$POW\n")
            write(buffer, "\n")
            write(buffer, "        if $v1_hi <= 0.0\n")
            write(buffer, "            if $v1_lo==$v1_hi\n")
            write(buffer, "                $OUT_cv $eq $v1_cv^$POW\n")
            write(buffer, "                $OUT_cc $eq $v1_cv^$POW\n")
            write(buffer, "                while col <= colmax\n")
            write(buffer, "                    if col == Int32($ID)\n") 
            write(buffer, "                        $OUT_cvgrad $eq $POW*$v1_cv^$(POW-1)\n")
            write(buffer, "                        $OUT_ccgrad $eq $POW*$v1_cv^$(POW-1)\n")
            write(buffer, "                    else\n") 
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n") 
            write(buffer, "                        $OUT_ccgrad $eq 0.0\n") 
            write(buffer, "                    end\n") 
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            else\n")
            write(buffer, "                $OUT_cv $eq ($v1_lo^$POW*($v1_hi - $v1_cv) + $v1_hi^$POW*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
            write(buffer, "                $OUT_cc $eq $v1_cv^$POW\n")
            write(buffer, "                while col <= colmax\n")
            write(buffer, "                    if col == Int32($ID)\n") 
            write(buffer, "                        $OUT_cvgrad $eq ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
            write(buffer, "                        $OUT_ccgrad $eq $POW*$v1_cv^$(POW-1)\n")
            write(buffer, "                    else\n") 
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n") 
            write(buffer, "                        $OUT_ccgrad $eq 0.0\n") 
            write(buffer, "                    end\n") 
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            end\n")
            write(buffer, "        elseif 0.0 <= $v1_lo\n")
            write(buffer, "            if $v1_lo==$v1_hi\n")
            write(buffer, "                $OUT_cv $eq $v1_cv^$POW\n")
            write(buffer, "                $OUT_cc $eq $v1_cv^$POW\n")
            write(buffer, "                while col <= colmax\n")
            write(buffer, "                    if col == Int32($ID)\n")
            write(buffer, "                        $OUT_cvgrad $eq $POW*$v1_cv^$(POW-1)\n")
            write(buffer, "                        $OUT_ccgrad $eq $POW*$v1_cv^$(POW-1)\n")
            write(buffer, "                    else\n") 
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n") 
            write(buffer, "                        $OUT_ccgrad $eq 0.0\n") 
            write(buffer, "                    end\n")
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            else\n")
            write(buffer, "                $OUT_cv $eq $v1_cv^$POW\n")
            write(buffer, "                $OUT_cc $eq ($v1_lo^$POW*($v1_hi - $v1_cv) + $v1_hi^$POW*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
            write(buffer, "                while col <= colmax\n")
            write(buffer, "                    if col == Int32($ID)\n")
            write(buffer, "                        $OUT_cvgrad $eq $POW*$v1_cv^$(POW-1)\n")
            write(buffer, "                        $OUT_ccgrad $eq ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
            write(buffer, "                    else\n") 
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n") 
            write(buffer, "                        $OUT_ccgrad $eq 0.0\n") 
            write(buffer, "                    end\n")
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            end\n")
            write(buffer, "        else\n")
            write(buffer, "\n")
            if POW==3
                write(buffer, "            # We know inflection points algebraically\n") 
                write(buffer, "            xk_cv = min(-0.5*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.5*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==5
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.6058295861882683*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.6058295861882683*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==7
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.6703320476030968*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.6703320476030968*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==9
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.7145377271673349*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.7145377271673349*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==11
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.7470540748651559*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.7470540748651559*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==13
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.7721416355234655*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.7721416355234655*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==15
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.7921778546056709*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.7921778546056709*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==17
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8086048978723027*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8086048978723027*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==19
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8223534102385287*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8223534102385287*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==21
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8340533675507736*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8340533675507736*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==23
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8441478047418446*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8441478047418446*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==25
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8529581643906964*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8529581643906964*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==27
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8607238145679608*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8607238145679608*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==29
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8676269762720762*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8676269762720762*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==31
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8738090154215446*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8738090154215446*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==33
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8793814183583145*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8793814183583145*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==35
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8844333818207290*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8844333818207290*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==37
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8890371830149935*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8890371830149935*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==39
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8932520563312301*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8932520563312301*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==41
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.8971270424799359*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.8971270424799359*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==43
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.9007031161732270*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.9007031161732270*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==45
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.9040147980608216*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.9040147980608216*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==47
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.9070913919345662*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.9070913919345662*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            elseif POW==49
                write(buffer, "            # We know inflection points analytically\n") 
                write(buffer, "            xk_cv = min(-0.9099579456198456*$v1_lo, $v1_hi)\n")  
                write(buffer, "            xk_cc = max(-0.9099579456198456*$v1_hi, $v1_lo)\n")  
                write(buffer, "\n")
            else
                write(buffer, "            # Apply Newton/golden section methods for the convex part,\n")
                write(buffer, "            # to get x_cv (the inflection point for the convex relaxation)\n")
                write(buffer, "            dfk = 0.0\n")
                write(buffer, "            xk_cv = max(0.0, $v1_hi)\n")
                write(buffer, "            fk = (xk_cv^$POW - $v1_lo^$POW) - (xk_cv-$v1_lo)*$POW*(xk_cv^$(POW-1))\n")
                write(buffer, "            flag = true\n")
                write(buffer, "            iter = Int32(1)\n")
                write(buffer, "            while iter <= Int32(100)\n")
                write(buffer, "                dfk = $(POW-1)*$POW*xk_cv^$(POW-2)*($v1_lo-xk_cv);\n")
                write(buffer, "                if abs(fk) < 1e-10\n")
                write(buffer, "                    flag = false\n")
                write(buffer, "                    break # use xk_cv\n")
                write(buffer, "                end\n")
                write(buffer, "                if iszero(dfk)\n")
                write(buffer, "                    xk_cv = 0.0\n")
                write(buffer, "                    break # Need to do golden section\n")
                write(buffer, "                end\n")
                write(buffer, "                if (xk_cv == 0.0) && (fk/dfk > 0.0)\n")
                write(buffer, "                    flag = false\n")
                write(buffer, "                    break # use xk_cv\n")
                write(buffer, "                elseif (xk_cv == $v1_hi) && (fk/dfk < 0.0)\n")
                write(buffer, "                    flag = false\n")
                write(buffer, "                    break # use xk_cv\n")
                write(buffer, "                end\n")
                write(buffer, "                xk_cv = max(0.0, min($v1_hi, xk_cv - fk/dfk))\n")
                write(buffer, "                fk = (xk_cv^$POW - $v1_lo^$POW) - (xk_cv-$v1_lo)*$POW*(xk_cv^$(POW-1))\n")
                write(buffer, "                iter += Int32(1)\n")
                write(buffer, "            end\n")
                write(buffer, "\n")
                write(buffer, "            # If flag, we need to do golden section instead\n")
                write(buffer, "            if flag\n")
                write(buffer, "                a_golden = $v1_lo\n")
                write(buffer, "                fa_golden = (a_golden^$POW - $v1_lo^$POW) - (a_golden-$v1_lo)*$POW*(a_golden^$(POW-1))\n")
                write(buffer, "                c_golden = $v1_hi\n")
                write(buffer, "                fc_golden = (c_golden^$POW - $v1_lo^$POW) - (c_golden-$v1_lo)*$POW*(c_golden^$(POW-1))\n")
                write(buffer, "\n")
                write(buffer, "                if fa_golden*fc_golden > 0\n")
                write(buffer, "                    xk_cv = NaN\n")
                write(buffer, "                end\n")
                write(buffer, "\n")
                write(buffer, "                b_golden = $v1_hi - (2.0 - Base.MathConstants.golden)*($v1_hi - $v1_lo)\n")
                write(buffer, "                fb_golden = (b_golden^$POW - $v1_lo^$POW) - (b_golden-$v1_lo)*$POW*(b_golden^$(POW-1))\n")
                write(buffer, "\n")
                write(buffer, "                iter = Int32(1)\n")
                write(buffer, "                while iter <= Int32(100)\n")
                write(buffer, "                    if (c_golden - b_golden > b_golden - a_golden)\n")
                write(buffer, "                        x_golden = b_golden + (2.0 - Base.MathConstants.golden)*(c_golden - b_golden)\n")
                write(buffer, "                        if abs(c_golden-a_golden) < 1.0e-10*(abs(b_golden) + abs(x_golden)) || iter == Int32(100)\n")
                write(buffer, "                            xk_cv = (c_golden + a_golden)/2.0\n")
                write(buffer, "                            break\n")
                write(buffer, "                        end\n")
                write(buffer, "                        iter += Int32(1)\n")
                write(buffer, "                        fx_golden = (x_golden^$POW - $v1_lo^$POW) - (x_golden-$v1_lo)*$POW*(x_golden^$(POW-1))\n")
                write(buffer, "                        if fa_golden*fx_golden < 0.0\n")
                write(buffer, "                            c_golden = x_golden\n")
                write(buffer, "                            fc_golden = fx_golden\n")
                write(buffer, "                        else\n")
                write(buffer, "                            a_golden = b_golden\n")
                write(buffer, "                            fa_golden = fb_golden\n")
                write(buffer, "                            b_golden = x_golden\n")
                write(buffer, "                            fb_golden = fx_golden\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        x_golden = b_golden - (2.0 - Base.MathConstants.golden)*(b_golden - a_golden)\n")
                write(buffer, "                        if abs(c_golden-a_golden) < 1.0e-10*(abs(b_golden) + abs(x_golden)) || iter == Int32(100)\n")
                write(buffer, "                            xk_cv = (c_golden + a_golden)/2.0\n")
                write(buffer, "                            break\n")
                write(buffer, "                        end\n")
                write(buffer, "                        iter += Int32(1)\n")
                write(buffer, "                        fx_golden = (x_golden^$POW - $v1_lo^$POW) - (x_golden-$v1_lo)*$POW*(x_golden^$(POW-1))\n")
                write(buffer, "                        if fa_golden*fb_golden < 0.0\n")
                write(buffer, "                            c_golden = b_golden\n")
                write(buffer, "                            fc_golden = fb_golden\n")
                write(buffer, "                            b_golden = x_golden\n")
                write(buffer, "                            fb_golden = fx_golden\n")
                write(buffer, "                        else\n")
                write(buffer, "                            a_golden = x_golden\n")
                write(buffer, "                            fa_golden = fx_golden\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
                write(buffer, "                end\n")
                write(buffer, "            end\n")
                write(buffer, "\n")
                write(buffer, "            # Apply Newton/golden section methods for the concave part,\n")
                write(buffer, "            # to get x_cc (the inflection point for the concave relaxation)\n")
                write(buffer, "            dfk = 0.0\n")
                write(buffer, "            xk_cc = $v1_lo\n")
                write(buffer, "            fk = ($v1_hi^$POW-xk_cc^$POW) - ($v1_hi-xk_cc)*$POW*(xk_cc^$(POW-1))\n")
                write(buffer, "            flag = true\n")
                write(buffer, "            iter = Int32(1)\n")
                write(buffer, "            while iter <= Int32(100)\n") 
                write(buffer, "                dfk = $(POW-1)*$POW*xk_cc^$(POW-2)*(xk_cc-$v1_hi);\n")
                write(buffer, "                if abs(fk) < 1e-10\n")
                write(buffer, "                    flag = false\n")
                write(buffer, "                    break # use xk_cc\n")
                write(buffer, "                end\n")
                write(buffer, "                if iszero(dfk)\n")
                write(buffer, "                    xk_cc = 0.0\n")
                write(buffer, "                    break # Need to do golden section\n")
                write(buffer, "                end\n")
                write(buffer, "                if (xk_cc == $v1_lo) && (fk/dfk > 0.0)\n")
                write(buffer, "                    flag = false\n")
                write(buffer, "                    break # use xk_cc\n")
                write(buffer, "                elseif (xk_cc == 0.0) && (fk/dfk < 0.0)\n")
                write(buffer, "                    flag = false\n")
                write(buffer, "                    break # use xk_cc\n")
                write(buffer, "                end\n")
                write(buffer, "                xk_cc = max($v1_lo, min(0.0, xk_cc - fk/dfk))\n")
                write(buffer, "                fk = ($v1_hi^$POW-xk_cc^$POW) - ($v1_hi-xk_cc)*$POW*(xk_cc^$(POW-1))\n")
                write(buffer, "                iter += Int32(1)\n")
                write(buffer, "            end\n")
                write(buffer, "\n")
                write(buffer, "            # If flag, we need to do golden section instead\n")
                write(buffer, "            if flag\n")
                write(buffer, "                a_golden = $v1_lo\n")
                write(buffer, "                fa_golden = ($v1_hi^$POW-$v1_lo^$POW) - ($v1_hi-$v1_lo)*$POW*($v1_lo^$(POW-1))\n")
                write(buffer, "                c_golden = $v1_hi\n")
                write(buffer, "                fc_golden = 0.0\n")
                write(buffer, "\n")
                write(buffer, "                if fa_golden*fc_golden > 0\n")
                write(buffer, "                    xk_cc = NaN\n")
                write(buffer, "                end\n")
                write(buffer, "\n")
                write(buffer, "                b_golden = $v1_hi - (2.0 - Base.MathConstants.golden)*($v1_hi - $v1_lo)\n")
                write(buffer, "                fb_golden = ($v1_hi^$POW-b_golden^$POW) - ($v1_hi-b_golden)*$POW*(b_golden^$(POW-1))\n")
                write(buffer, "\n")
                write(buffer, "                iter = Int32(1)\n")
                write(buffer, "                while iter <= Int32(100)\n")
                write(buffer, "                    if (c_golden - b_golden > b_golden - a_golden)\n")
                write(buffer, "                        x_golden = b_golden + (2.0 - Base.MathConstants.golden)*(c_golden - b_golden)\n")
                write(buffer, "                        if abs(c_golden-a_golden) < 1.0e-10*(abs(b_golden) + abs(x_golden)) || iter == Int32(100)\n")
                write(buffer, "                            xk_cc = (c_golden + a_golden)/2.0\n")
                write(buffer, "                            break\n")
                write(buffer, "                        end\n")
                write(buffer, "                        iter += Int32(1)\n")
                write(buffer, "                        fx_golden = ($v1_hi^$POW-x_golden^$POW) - ($v1_hi-x_golden)*$POW*(x_golden^$(POW-1))\n")
                write(buffer, "                        if fa_golden*fx_golden < 0.0\n")
                write(buffer, "                            c_golden = x_golden\n")
                write(buffer, "                            fc_golden = fx_golden\n")
                write(buffer, "                        else\n")
                write(buffer, "                            a_golden = b_golden\n")
                write(buffer, "                            fa_golden = fb_golden\n")
                write(buffer, "                            b_golden = x_golden\n")
                write(buffer, "                            fb_golden = fx_golden\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        x_golden = b_golden - (2.0 - Base.MathConstants.golden)*(b_golden - a_golden)\n")
                write(buffer, "                        if abs(c_golden-a_golden) < 1.0e-10*(abs(b_golden) + abs(x_golden)) || iter == Int32(100)\n")
                write(buffer, "                            xk_cc = (c_golden + a_golden)/2.0\n")
                write(buffer, "                            break\n")
                write(buffer, "                        end\n")
                write(buffer, "                        iter += Int32(1)\n")
                write(buffer, "                        fx_golden = ($v1_hi^$POW-x_golden^$POW) - ($v1_hi-x_golden)*$POW*(x_golden^$(POW-1))\n")
                write(buffer, "                        if fa_golden*fb_golden < 0.0\n")
                write(buffer, "                            c_golden = b_golden\n")
                write(buffer, "                            fc_golden = fb_golden\n")
                write(buffer, "                            b_golden = x_golden\n")
                write(buffer, "                            fb_golden = fx_golden\n")
                write(buffer, "                        else\n")
                write(buffer, "                            a_golden = x_golden\n")
                write(buffer, "                            fa_golden = fx_golden\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
                write(buffer, "                end\n")
                write(buffer, "            end\n")
                write(buffer, "\n")
            end
            write(buffer, "            # Now we have the inflection points, so we either\n")
            write(buffer, "            # look at the line segment or the function itself\n")
            write(buffer, "            if ($v1_cv <= xk_cv) && ($v1_lo != xk_cv) # cv uses line segment\n")
            write(buffer, "                $OUT_cv $eq ($v1_lo^$POW*(xk_cv - $v1_cv) + xk_cv^$POW*($v1_cv - $v1_lo))/(xk_cv - $v1_lo)\n")
            write(buffer, "                while col <= colmax\n")
            write(buffer, "                    if col == Int32($ID)\n")
            write(buffer, "                        $OUT_cvgrad $eq (xk_cv^$POW - $v1_lo^$POW)/(xk_cv - $v1_lo)\n")
            write(buffer, "                    else\n") 
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                    end\n")
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            else # cv uses the function itself\n")
            write(buffer, "                $OUT_cv $eq $v1_cv^$POW\n")
            write(buffer, "                while col <= colmax\n")
            write(buffer, "                    if col == Int32($ID)\n")
            write(buffer, "                        $OUT_cvgrad $eq $POW*$v1_cv^$(POW-1)\n")
            write(buffer, "                    else\n") 
            write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                    end\n")
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            end\n")
            write(buffer, "\n")
            write(buffer, "            # Reset the column counter\n")
            write(buffer, "            col = Int32(1)\n")
            write(buffer, "\n")
            write(buffer, "            # Now do the cc side\n")
            write(buffer, "            if ($v1_cv > xk_cc) && ($v1_hi != xk_cc)\n")
            write(buffer, "                $OUT_cc $eq (xk_cc^$POW*($v1_hi - $v1_cv) + $v1_hi^$POW*($v1_cv - xk_cc))/($v1_hi - xk_cc)\n")
            write(buffer, "                while col <= colmax\n")
            write(buffer, "                    if col == Int32($ID)\n")
            write(buffer, "                        $OUT_ccgrad $eq ($v1_hi^$POW - xk_cc^$POW)/($v1_hi - xk_cc)\n")
            write(buffer, "                    else\n") 
            write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                    end\n")
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            else\n")
            write(buffer, "                $OUT_cc $eq $v1_cv^$POW\n")
            write(buffer, "                while col <= colmax\n")
            write(buffer, "                    if col == Int32($ID)\n")
            write(buffer, "                        $OUT_ccgrad $eq $POW*$v1_cv^$(POW-1)\n")
            write(buffer, "                    else\n") 
            write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                    end\n")
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
            write(buffer, "            end\n")
            write(buffer, "        end\n")
            write(buffer, "\n")
            write(buffer, "        # Cut\n")
            write(buffer, "        if $OUT_cv < $OUT_lo\n")
            write(buffer, "            $OUT_cv $eq $OUT_lo\n")
            write(buffer, "            col = Int32(1)\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
            write(buffer, "        end\n")
            write(buffer, "        if $OUT_cc > $OUT_hi\n")
            write(buffer, "            $OUT_cc $eq $OUT_hi\n")
            write(buffer, "            col = Int32(1)\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
            write(buffer, "        end\n")
            write(buffer, "\n")
        end
    end
    return String(take!(buffer))
end

# Positive floating-point powers
# max threads: ???
function SCMC_float_power_kernel(OUT::String, v1::String, POW::T, varlist::Vector{String}, sparsity::Vector{Int}; sum_output::Bool=false) where T<:Real
    if sum_output
        eq = "+="
    else
        eq = "="
    end
    
    if startswith(v1, "temp")
        v1_cv = "$(v1)_cv"
        v1_cc = "$(v1)_cc"
        v1_lo = "$(v1)_lo"
        v1_hi = "$(v1)_hi"
        v1_cvgrad = "$(v1)_cvgrad[col]"
        v1_ccgrad = "$(v1)_ccgrad[col]"
    elseif startswith(v1, "aux")
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,2]"
        v1_lo = "$(v1)[idx,3]"
        v1_hi = "$(v1)[idx,4]"
        v1_cvgrad = "$(v1)[idx,end-2*colmax+col]"
        v1_ccgrad = "$(v1)[idx,end-1*colmax+col]"
    else
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,1]"
        v1_lo = "$(v1)[idx,2]"
        v1_hi = "$(v1)[idx,3]"
    end
    if startswith(OUT, "temp")
        OUT_cv = "$(OUT)_cv"
        OUT_cc = "$(OUT)_cc"
        OUT_lo = "$(OUT)_lo"
        OUT_hi = "$(OUT)_hi"
        OUT_cvgrad = "$(OUT)_cvgrad[col]"
        OUT_ccgrad = "$(OUT)_ccgrad[col]"
    else
        OUT_cv = "$(OUT)[idx,1]"
        OUT_cc = "$(OUT)[idx,2]"
        OUT_lo = "$(OUT)[idx,3]"
        OUT_hi = "$(OUT)[idx,4]"
        OUT_cvgrad = "$(OUT)[idx,end-2*colmax+col]"
        OUT_ccgrad = "$(OUT)[idx,end-1*colmax+col]"
    end

    # Get the anti-sparsity list (elements NOT being used)
    antisparsity = collect(1:length(varlist))
    antisparsity = antisparsity[antisparsity .∉ Ref(sparsity)]  
    
    # Determine the sparsity case:
    # 1) Use sparsity list
    # 2) Use antisparsity list (because it's shorter than the sparsity list)
    # 3) Don't use either, simply calculate all elements
    if length(sparsity) <= length(antisparsity)
        sparsity_case = 1
        sparsity_string = join(["col == Int32($(x))" for x in sparsity], " || ")
    elseif length(antisparsity) > 0
        antisparsity_string = join(["col == Int32($(x))" for x in antisparsity], " || ")
        sparsity_case = 2
    else
        sparsity_case = 3
    end
    
    # Create the buffer that we will write to
    buffer = Base.IOBuffer()

    # Write all the lines to the buffer
    if startswith(v1, r"aux|temp")
        if POW==0.5
            write(buffer, "        #################\n")
            write(buffer, "        ## Square Root ##\n")
            write(buffer, "        #################\n")
            write(buffer, "\n")
        else
            L = length(string(POW))
            write(buffer, "        ###################$("#"^L)####\n")
            write(buffer, "        ## Floating Power ($POW) ##\n")
            write(buffer, "        ###################$("#"^L)####\n")
            write(buffer, "\n")
        end
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        if $v1_lo < 0.0\n")
        write(buffer, "            $OUT_lo = NaN\n")
        write(buffer, "            $OUT_hi = NaN\n")
        write(buffer, "            $OUT_cv = NaN\n")
        write(buffer, "            $OUT_cc = NaN\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = NaN\n")
        write(buffer, "                $OUT_ccgrad = NaN\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        else\n")
        write(buffer, "            if $v1_cc >= $v1_cv\n")
        write(buffer, "                if $v1_cv == $v1_cc\n")
        write(buffer, "                    midcv = $v1_cv \n")
        write(buffer, "                    cv_id = Int32(2)\n")
        write(buffer, "                    midcc = $v1_cv \n")
        write(buffer, "                    cc_id = Int32(2)\n")
        write(buffer, "                elseif $v1_cv >= $v1_hi\n")
        write(buffer, "                    if $v1_cv >= $v1_lo\n")
        write(buffer, "                        midcv = $v1_cv \n")
        write(buffer, "                        cv_id = Int32(2)\n")
        write(buffer, "                        midcc = $v1_cv \n")
        write(buffer, "                        cc_id = Int32(2)\n")
        write(buffer, "                    elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                        midcv = $v1_cc \n")
        write(buffer, "                        cv_id = Int32(1)\n")
        write(buffer, "                        midcc = $v1_cv \n")
        write(buffer, "                        cc_id = Int32(2)\n")
        write(buffer, "                    else\n")
        write(buffer, "                        midcv = $v1_lo \n")
        write(buffer, "                        cv_id = Int32(3)\n")
        write(buffer, "                        midcc = $v1_cv \n")
        write(buffer, "                        cc_id = Int32(2)\n")
        write(buffer, "                    end\n")
        write(buffer, "                elseif $v1_hi >= $v1_cc\n")
        write(buffer, "                    if $v1_cv >= $v1_lo\n")
        write(buffer, "                        midcv = $v1_cv \n")
        write(buffer, "                        cv_id = Int32(2)\n")
        write(buffer, "                        midcc = $v1_cc \n")
        write(buffer, "                        cc_id = Int32(1)\n")
        write(buffer, "                    elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                        midcv = $v1_cc \n")
        write(buffer, "                        cv_id = Int32(1)\n")
        write(buffer, "                        midcc = $v1_cc \n")
        write(buffer, "                        cc_id = Int32(1)\n")
        write(buffer, "                    else\n")
        write(buffer, "                        midcv = $v1_lo \n")
        write(buffer, "                        cv_id = Int32(3)\n")
        write(buffer, "                        midcc = $v1_cc \n")
        write(buffer, "                        cc_id = Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    if $v1_cv >= $v1_lo\n")
        write(buffer, "                        midcv = $v1_cv \n")
        write(buffer, "                        cv_id = Int32(2)\n")
        write(buffer, "                        midcc = $v1_hi \n")
        write(buffer, "                        cc_id = Int32(3)\n")
        write(buffer, "                    elseif $v1_lo >= $v1_cc\n")
        write(buffer, "                        midcv = $v1_cc \n")
        write(buffer, "                        cv_id = Int32(1)\n")
        write(buffer, "                        midcc = $v1_hi \n")
        write(buffer, "                        cc_id = Int32(3)\n")
        write(buffer, "                    else\n")
        write(buffer, "                        midcv = $v1_lo \n")
        write(buffer, "                        cv_id = Int32(3)\n")
        write(buffer, "                        midcc = $v1_hi \n")
        write(buffer, "                        cc_id = Int32(3)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_hi >= $v1_cv\n")
        write(buffer, "                if $v1_lo >= $v1_cv\n")
        write(buffer, "                    midcv = $v1_cv \n")
        write(buffer, "                    cv_id = Int32(2)\n")
        write(buffer, "                    midcc = $v1_cv \n")
        write(buffer, "                    cc_id = Int32(2)\n")
        write(buffer, "                elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                    midcv = $v1_cc \n")
        write(buffer, "                    cv_id = Int32(1)\n")
        write(buffer, "                    midcc = $v1_cv \n")
        write(buffer, "                    cc_id = Int32(2)\n")
        write(buffer, "                else\n")
        write(buffer, "                    midcv = $v1_lo \n")
        write(buffer, "                    cv_id = Int32(3)\n")
        write(buffer, "                    midcc = $v1_cv \n")
        write(buffer, "                    cc_id = Int32(2)\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v1_cc >= $v1_hi\n")
        write(buffer, "                if $v1_lo >= $v1_cv\n")
        write(buffer, "                    midcv = $v1_cv \n")
        write(buffer, "                    cv_id = Int32(2)\n")
        write(buffer, "                    midcc = $v1_cc \n")
        write(buffer, "                    cc_id = Int32(1)\n")
        write(buffer, "                elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                    midcv = $v1_cc \n")
        write(buffer, "                    cv_id = Int32(1)\n")
        write(buffer, "                    midcc = $v1_cc \n")
        write(buffer, "                    cc_id = Int32(1)\n")
        write(buffer, "                else\n")
        write(buffer, "                    midcv = $v1_lo \n")
        write(buffer, "                    cv_id = Int32(3)\n")
        write(buffer, "                    midcc = $v1_cc \n")
        write(buffer, "                    cc_id = Int32(1)\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                if $v1_lo >= $v1_cv\n")
        write(buffer, "                    midcv = $v1_cv \n")
        write(buffer, "                    cv_id = Int32(2)\n")
        write(buffer, "                    midcc = $v1_hi \n")
        write(buffer, "                    cc_id = Int32(3)\n")
        write(buffer, "                elseif $v1_cc >= $v1_lo\n")
        write(buffer, "                    midcv = $v1_cc \n")
        write(buffer, "                    cv_id = Int32(1)\n")
        write(buffer, "                    midcc = $v1_hi \n")
        write(buffer, "                    cc_id = Int32(3)\n")
        write(buffer, "                else\n")
        write(buffer, "                    midcv = $v1_lo \n")
        write(buffer, "                    cv_id = Int32(3)\n")
        write(buffer, "                    midcc = $v1_hi \n")
        write(buffer, "                    cc_id = Int32(3)\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "            if $v1_lo == $v1_hi\n")
        if POW==0.5
            write(buffer, "                $OUT_lo = sqrt($v1_lo)\n")
            write(buffer, "                $OUT_hi = sqrt($v1_hi)\n")
            write(buffer, "                $OUT_cv = sqrt($v1_cv)\n")
            write(buffer, "                $OUT_cc = sqrt($v1_cc)\n")
            write(buffer, "                while col <= colmax\n")
            if sparsity_case == 1
                write(buffer, "                    if $sparsity_string\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_ccgrad * 0.5 / sqrt($v1_cv)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_cvgrad * 0.5 / sqrt($v1_cv)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_ccgrad * 0.5 / sqrt($v1_cc)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_cvgrad * 0.5 / sqrt($v1_cc)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            elseif sparsity_case == 2
                write(buffer, "                    if $antisparsity_string\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    else\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_ccgrad * 0.5 / sqrt($v1_cv)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_cvgrad * 0.5 / sqrt($v1_cv)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_ccgrad * 0.5 / sqrt($v1_cc)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_cvgrad * 0.5 / sqrt($v1_cc)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
            else
                write(buffer, "                    if cv_id==Int32(1)\n")
                write(buffer, "                        $OUT_cvgrad = $v1_ccgrad * 0.5 / sqrt($v1_cv)\n")
                write(buffer, "                    elseif cv_id==Int32(2)\n")
                write(buffer, "                        $OUT_cvgrad = $v1_cvgrad * 0.5 / sqrt($v1_cv)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad = 0.0\n")
                write(buffer, "                    end\n")
                write(buffer, "                    if cc_id==Int32(1)\n")
                write(buffer, "                        $OUT_ccgrad = $v1_ccgrad * 0.5 / sqrt($v1_cc)\n")
                write(buffer, "                    elseif cc_id==Int32(2)\n")
                write(buffer, "                        $OUT_ccgrad = $v1_cvgrad * 0.5 / sqrt($v1_cc)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_ccgrad = 0.0\n")
                write(buffer, "                    end\n")
            end
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
        else
            write(buffer, "                $OUT_lo = $v1_lo^$POW\n")
            write(buffer, "                $OUT_hi = $v1_hi^$POW\n")
            write(buffer, "                $OUT_cv = $v1_cv^$POW\n")
            write(buffer, "                $OUT_cc = $v1_cc^$POW\n")
            write(buffer, "                while col <= colmax\n")
            if sparsity_case == 1
                write(buffer, "                    if $sparsity_string\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_ccgrad * $POW*$v1_cv^$(POW-1)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_cvgrad * $POW*$v1_cv^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_ccgrad * $POW*$v1_cc^$(POW-1)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_cvgrad * $POW*$v1_cc^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            elseif sparsity_case == 2
                write(buffer, "                    if $antisparsity_string\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    else\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_ccgrad * $POW*$v1_cv^$(POW-1)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_cvgrad * $POW*$v1_cv^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_ccgrad * $POW*$v1_cc^$(POW-1)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_cvgrad * $POW*$v1_cc^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
            else
                write(buffer, "                    if cv_id==Int32(1)\n")
                write(buffer, "                        $OUT_cvgrad = $v1_ccgrad * $POW*$v1_cv^$(POW-1)\n")
                write(buffer, "                    elseif cv_id==Int32(2)\n")
                write(buffer, "                        $OUT_cvgrad = $v1_cvgrad * $POW*$v1_cv^$(POW-1)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad = 0.0\n")
                write(buffer, "                    end\n")
                write(buffer, "                    if cc_id==Int32(1)\n")
                write(buffer, "                        $OUT_ccgrad = $v1_ccgrad * $POW*$v1_cc^$(POW-1)\n")
                write(buffer, "                    elseif cc_id==Int32(2)\n")
                write(buffer, "                        $OUT_ccgrad = $v1_cvgrad * $POW*$v1_cc^$(POW-1)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_ccgrad = 0.0\n")
                write(buffer, "                    end\n")
            end
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
        end
        write(buffer, "            else\n")
        if POW==0.5
            write(buffer, "                $OUT_lo = sqrt($v1_lo)\n")
            write(buffer, "                $OUT_hi = sqrt($v1_hi)\n")
            write(buffer, "                $OUT_cv = (sqrt($v1_lo)*($v1_hi - midcv) + sqrt($v1_hi)*(midcv - $v1_lo))/($v1_hi - $v1_lo)\n")
            write(buffer, "                $OUT_cc = sqrt(midcc)\n")
            write(buffer, "                while col <= colmax\n")
            if sparsity_case == 1
                write(buffer, "                    if $sparsity_string\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_ccgrad * (sqrt($v1_hi) - sqrt($v1_lo))/($v1_hi - $v1_lo)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_cvgrad * (sqrt($v1_hi) - sqrt($v1_lo))/($v1_hi - $v1_lo)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_ccgrad * 0.5 / sqrt(midcc)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_cvgrad * 0.5 / sqrt(midcc)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            elseif sparsity_case == 2
                write(buffer, "                    if $antisparsity_string\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    else\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_ccgrad * (sqrt($v1_hi) - sqrt($v1_lo))/($v1_hi - $v1_lo)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_cvgrad * (sqrt($v1_hi) - sqrt($v1_lo))/($v1_hi - $v1_lo)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_ccgrad * 0.5 / sqrt(midcc)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_cvgrad * 0.5 / sqrt(midcc)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
            else
                write(buffer, "                    if cv_id==Int32(1)\n")
                write(buffer, "                        $OUT_cvgrad = $v1_ccgrad * (sqrt($v1_hi) - sqrt($v1_lo))/($v1_hi - $v1_lo)\n")
                write(buffer, "                    elseif cv_id==Int32(2)\n")
                write(buffer, "                        $OUT_cvgrad = $v1_cvgrad * (sqrt($v1_hi) - sqrt($v1_lo))/($v1_hi - $v1_lo)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad = 0.0\n")
                write(buffer, "                    end\n")
                write(buffer, "                    if cc_id==Int32(1)\n")
                write(buffer, "                        $OUT_ccgrad = $v1_ccgrad * 0.5 / sqrt(midcc)\n")
                write(buffer, "                    elseif cc_id==Int32(2)\n")
                write(buffer, "                        $OUT_ccgrad = $v1_cvgrad * 0.5 / sqrt(midcc)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_ccgrad = 0.0\n")
                write(buffer, "                    end\n")
            end
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
        elseif POW < 1.0
            write(buffer, "                $OUT_lo = $v1_lo^$POW\n")
            write(buffer, "                $OUT_hi = $v1_hi^$POW\n")
            write(buffer, "                $OUT_cv = ($v1_lo^$POW*($v1_hi - midcv) + $v1_hi^$POW*(midcv - $v1_lo))/($v1_hi - $v1_lo)\n")
            write(buffer, "                $OUT_cc = midcc^$POW\n")
            write(buffer, "                while col <= colmax\n")
            if sparsity_case == 1
                write(buffer, "                    if $sparsity_string\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_ccgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_cvgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_ccgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_cvgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            elseif sparsity_case == 2
                write(buffer, "                    if $antisparsity_string\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    else\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_ccgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_cvgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_ccgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_cvgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
            else
                write(buffer, "                    if cv_id==Int32(1)\n")
                write(buffer, "                        $OUT_cvgrad = $v1_ccgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                    elseif cv_id==Int32(2)\n")
                write(buffer, "                        $OUT_cvgrad = $v1_cvgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad = 0.0\n")
                write(buffer, "                    end\n")
                write(buffer, "                    if cc_id==Int32(1)\n")
                write(buffer, "                        $OUT_ccgrad = $v1_ccgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                    elseif cc_id==Int32(2)\n")
                write(buffer, "                        $OUT_ccgrad = $v1_cvgrad * $POW*midcc^$(POW-1)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_ccgrad = 0.0\n")
                write(buffer, "                    end\n")
            end
            write(buffer, "                    col += Int32(1)\n")
            write(buffer, "                end\n")
        else
            write(buffer, "                $OUT_lo = $v1_lo^$POW\n")
            write(buffer, "                $OUT_hi = $v1_hi^$POW\n")
            write(buffer, "                $OUT_cv = midcv^$POW\n")
            write(buffer, "                $OUT_cc = ($v1_lo^$POW*($v1_hi - midcc) + $v1_hi^$POW*(midcc - $v1_lo))/($v1_hi - $v1_lo)\n")
            write(buffer, "                while col <= colmax\n")
            if sparsity_case == 1
                write(buffer, "                    if $sparsity_string\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_ccgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_cvgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_ccgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_cvgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    end\n")
            elseif sparsity_case == 2
                write(buffer, "                    if $antisparsity_string\n")
                write(buffer, "                        $OUT_cvgrad $eq 0.0\n")
                write(buffer, "                        $OUT_ccgrad $eq 0.0\n")
                write(buffer, "                    else\n")
                write(buffer, "                        if cv_id==Int32(1)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_ccgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        elseif cv_id==Int32(2)\n")
                write(buffer, "                            $OUT_cvgrad = $v1_cvgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_cvgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                        if cc_id==Int32(1)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_ccgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                        elseif cc_id==Int32(2)\n")
                write(buffer, "                            $OUT_ccgrad = $v1_cvgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                        else\n")
                write(buffer, "                            $OUT_ccgrad = 0.0\n")
                write(buffer, "                        end\n")
                write(buffer, "                    end\n")
            else
                write(buffer, "                    if cv_id==Int32(1)\n")
                write(buffer, "                        $OUT_cvgrad = $v1_ccgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                    elseif cv_id==Int32(2)\n")
                write(buffer, "                        $OUT_cvgrad = $v1_cvgrad * $POW*midcv^$(POW-1)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_cvgrad = 0.0\n")
                write(buffer, "                    end\n")
                write(buffer, "                    if cc_id==Int32(1)\n")
                write(buffer, "                        $OUT_ccgrad = $v1_ccgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                    elseif cc_id==Int32(2)\n")
                write(buffer, "                        $OUT_ccgrad = $v1_cvgrad * ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
                write(buffer, "                    else\n")
                write(buffer, "                        $OUT_ccgrad = 0.0\n")
                write(buffer, "                    end\n")
            end
        write(buffer, "                    col += Int32(1)\n")
        write(buffer, "                end\n")
        end
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv $eq $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc $eq $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    else
        ID = findfirst(==(v1), varlist)
        isnothing(ID) && error("Empty varlist")
        if POW==0.5
            write(buffer, "        #################\n")
            write(buffer, "        ## Square Root ##\n")
            write(buffer, "        #################\n")
            write(buffer, "\n")
        else
            L = length(string(POW))
            write(buffer, "        ###################$("#"^L)####\n")
            write(buffer, "        ## Floating Power ($POW) ##\n")
            write(buffer, "        ###################$("#"^L)####\n")
            write(buffer, "\n")
        end
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        if $v1_lo < 0.0\n")
        write(buffer, "            $OUT_lo = NaN\n")
        write(buffer, "            $OUT_hi = NaN\n")
        write(buffer, "            $OUT_cv = NaN\n")
        write(buffer, "            $OUT_cc = NaN\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = NaN\n")
        write(buffer, "                $OUT_ccgrad = NaN\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        elseif $v1_lo == $v1_hi\n")
        if POW==0.5
            write(buffer, "            $OUT_lo = sqrt($v1_lo)\n")
            write(buffer, "            $OUT_hi = sqrt($v1_hi)\n")
            write(buffer, "            $OUT_cv = sqrt($v1_cv)\n")
            write(buffer, "            $OUT_cc = sqrt($v1_cc)\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                if col == Int32($ID)\n")
            write(buffer, "                    $OUT_cvgrad = 0.5 / sqrt($v1_cv)\n")
            write(buffer, "                    $OUT_ccgrad = 0.5 / sqrt($v1_cc)\n")
            write(buffer, "                else\n")
            write(buffer, "                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                end\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
        else
            write(buffer, "            $OUT_lo = $v1_lo^$POW\n")
            write(buffer, "            $OUT_hi = $v1_hi^$POW\n")
            write(buffer, "            $OUT_cv = $v1_cv^$POW\n")
            write(buffer, "            $OUT_cc = $v1_cc^$POW\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                if col == Int32($ID)\n")
            write(buffer, "                    $OUT_cvgrad = $POW*$v1_cv^$(POW-1)\n")
            write(buffer, "                    $OUT_ccgrad = $POW*$v1_cc^$(POW-1)\n")
            write(buffer, "                else\n")
            write(buffer, "                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                end\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
        end
        write(buffer, "        else\n")
        if POW==0.5
            write(buffer, "            $OUT_lo = sqrt($v1_lo)\n")
            write(buffer, "            $OUT_hi = sqrt($v1_hi)\n")
            write(buffer, "            $OUT_cv = (sqrt($v1_lo)*($v1_hi - $v1_cv) + sqrt($v1_hi)*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
            write(buffer, "            $OUT_cc = sqrt($v1_cv)\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                if col == Int32($ID)\n")
            write(buffer, "                    $OUT_cvgrad = (sqrt($v1_hi) - sqrt($v1_lo))/($v1_hi - $v1_lo)\n")
            write(buffer, "                    $OUT_ccgrad = 0.5 / sqrt($v1_cv)\n")
            write(buffer, "                else\n")
            write(buffer, "                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                end\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
        elseif POW < 1.0
            write(buffer, "            $OUT_lo = $v1_lo^$POW\n")
            write(buffer, "            $OUT_hi = $v1_hi^$POW\n")
            write(buffer, "            $OUT_cv = ($v1_lo^$POW*($v1_hi - $v1_cv) + $v1_hi^$POW*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
            write(buffer, "            $OUT_cc = $v1_cv^$POW\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                if col == Int32($ID)\n")
            write(buffer, "                    $OUT_cvgrad = ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
            write(buffer, "                    $OUT_ccgrad = $POW*$v1_cv^$(POW-1)\n")
            write(buffer, "                else\n")
            write(buffer, "                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                end\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
        else
            write(buffer, "            $OUT_lo = $v1_lo^$POW\n")
            write(buffer, "            $OUT_hi = $v1_hi^$POW\n")
            write(buffer, "            $OUT_cv = $v1_cv^$POW\n")
            write(buffer, "            $OUT_cc = ($v1_lo^$POW*($v1_hi - $v1_cv) + $v1_hi^$POW*($v1_cv - $v1_lo))/($v1_hi - $v1_lo)\n")
            write(buffer, "            while col <= colmax\n")
            write(buffer, "                if col == Int32($ID)\n")
            write(buffer, "                    $OUT_cvgrad = $POW*$v1_cv^$(POW-1)\n")
            write(buffer, "                    $OUT_ccgrad = ($v1_hi^$POW - $v1_lo^$POW)/($v1_hi - $v1_lo)\n")
            write(buffer, "                else\n")
            write(buffer, "                    $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                    $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                end\n")
            write(buffer, "                col += Int32(1)\n")
            write(buffer, "            end\n")
        end
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv $eq $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc $eq $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    end
    return String(take!(buffer))
end

#=
Binary Rules
=#
# Multiplication of two variables
# max threads: 384
function SCMC_mult_kernel(OUT::String, v1::String, v2::String, varlist::Vector{String}, sparsity::Vector{Int}; sum_output::Bool=false)
    if sum_output
        eq = "+="
    else
        eq = "="
    end

    if startswith(v1, "temp")
        v1_cv = "$(v1)_cv"
        v1_cc = "$(v1)_cc"
        v1_lo = "$(v1)_lo"
        v1_hi = "$(v1)_hi"
        v1_cvgrad = "$(v1)_cvgrad[col]"
        v1_ccgrad = "$(v1)_ccgrad[col]"
    elseif startswith(v1, "aux")
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,2]"
        v1_lo = "$(v1)[idx,3]"
        v1_hi = "$(v1)[idx,4]"
        v1_cvgrad = "$(v1)[idx,end-2*colmax+col]"
        v1_ccgrad = "$(v1)[idx,end-1*colmax+col]"
    else
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,1]"
        v1_lo = "$(v1)[idx,2]"
        v1_hi = "$(v1)[idx,3]"
    end
    if startswith(v2, "temp")
        v2_cv = "$(v2)_cv"
        v2_cc = "$(v2)_cc"
        v2_lo = "$(v2)_lo"
        v2_hi = "$(v2)_hi"
        v2_cvgrad = "$(v2)_cvgrad[col]"
        v2_ccgrad = "$(v2)_ccgrad[col]"
    elseif startswith(v2, "aux")
        v2_cv = "$(v2)[idx,1]"
        v2_cc = "$(v2)[idx,2]"
        v2_lo = "$(v2)[idx,3]"
        v2_hi = "$(v2)[idx,4]"
        v2_cvgrad = "$(v2)[idx,end-2*colmax+col]"
        v2_ccgrad = "$(v2)[idx,end-1*colmax+col]"
    else
        v2_cv = "$(v2)[idx,1]"
        v2_cc = "$(v2)[idx,1]"
        v2_lo = "$(v2)[idx,2]"
        v2_hi = "$(v2)[idx,3]"
    end
    if startswith(OUT, "temp")
        OUT_cv = "$(OUT)_cv"
        OUT_cc = "$(OUT)_cc"
        OUT_lo = "$(OUT)_lo"
        OUT_hi = "$(OUT)_hi"
        OUT_cvgrad = "$(OUT)_cvgrad[col]"
        OUT_ccgrad = "$(OUT)_ccgrad[col]"
    else
        OUT_cv = "$(OUT)[idx,1]"
        OUT_cc = "$(OUT)[idx,2]"
        OUT_lo = "$(OUT)[idx,3]"
        OUT_hi = "$(OUT)[idx,4]"
        OUT_cvgrad = "$(OUT)[idx,end-2*colmax+col]"
        OUT_ccgrad = "$(OUT)[idx,end-1*colmax+col]"
    end

    # Get the anti-sparsity list (elements NOT being used)
    antisparsity = collect(1:length(varlist))
    antisparsity = antisparsity[antisparsity .∉ Ref(sparsity)]  

    # Determine the sparsity case:
    # 1) Use sparsity list
    # 2) Use antisparsity list (because it's shorter than the sparsity list)
    # 3) Don't use either, simply calculate all elements
    if length(sparsity) <= length(antisparsity)
        sparsity_case = 1
        sparsity_string = join(["col == Int32($(x))" for x in sparsity], " || ")
    elseif length(antisparsity) > 0
        antisparsity_string = join(["col == Int32($(x))" for x in antisparsity], " || ")
        sparsity_case = 2
    else
        sparsity_case = 3
    end
    
    # Create the buffer that we will write to
    buffer = Base.IOBuffer()

    # Write all the lines to the buffer
    
    if (startswith(v1, r"aux|temp") && startswith(v2, r"aux|temp"))
        write(buffer, "        #####################################\n")
        write(buffer, "        ## Multiplication of Two Variables ##\n")
        write(buffer, "        #####################################\n")
        write(buffer, "\n")
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        # Begin rule\n")
        write(buffer, "        if $v1_lo >= 0.0\n")
        write(buffer, "            if $v2_lo >= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_lo*$v2_lo\n")
        write(buffer, "                $OUT_hi $eq $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_left = $v2_hi*$v1_cv + $v1_hi*$v2_cv - $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_right = $v2_lo*$v1_cv + $v1_lo*$v2_cv - $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cc_left = $v2_lo*$v1_cc + $v1_hi*$v2_cc - $v1_hi*$v2_lo\n")
        write(buffer, "                t1_cc_right = $v2_hi*$v1_cc + $v1_lo*$v2_cc - $v1_lo*$v2_hi\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi*$v2_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi*$v2_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi*$v2_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_lo*$v1_cvgrad + $v1_lo*$v2_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_lo*$v1_cvgrad + $v1_lo*$v2_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v2_lo*$v1_cvgrad + $v1_lo*$v2_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_lo*$v1_ccgrad + $v1_hi*$v2_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_lo*$v1_ccgrad + $v1_hi*$v2_ccgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq $v2_lo*$v1_ccgrad + $v1_hi*$v2_ccgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo*$v2_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo*$v2_ccgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo*$v2_ccgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v2_hi <= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_hi*$v2_lo\n")
        write(buffer, "                $OUT_hi $eq $v1_lo*$v2_hi\n")
        write(buffer, "                t1_cv_left = (-$v2_hi)*$v1_cc + $v1_hi*(-$v2_cv) - $v1_hi*(-$v2_hi)\n")
        write(buffer, "                t1_cv_right = (-$v2_lo)*$v1_cc + $v1_lo*(-$v2_cv) - $v1_lo*(-$v2_lo)\n")
        write(buffer, "                t1_cc_left = (-$v2_lo)*$v1_cv + $v1_hi*(-$v2_cc) - $v1_hi*(-$v2_lo)\n")
        write(buffer, "                t1_cc_right = (-$v2_hi)*$v1_cv + $v1_lo*(-$v2_cc) - $v1_lo*(-$v2_hi)\n")
        write(buffer, "                if t1_cv_left < t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq -((-$v2_hi)*$v1_ccgrad + $v1_hi*(-$v2_cvgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -((-$v2_hi)*$v1_ccgrad + $v1_hi*(-$v2_cvgrad))\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq -((-$v2_hi)*$v1_ccgrad + $v1_hi*(-$v2_cvgrad))\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq -((-$v2_lo)*$v1_ccgrad + $v1_lo*(-$v2_cvgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -((-$v2_lo)*$v1_ccgrad + $v1_lo*(-$v2_cvgrad))\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq -((-$v2_lo)*$v1_ccgrad + $v1_lo*(-$v2_cvgrad))\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left > t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v2_lo)*$v1_cvgrad + $v1_hi*(-$v2_ccgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v2_lo)*$v1_cvgrad + $v1_hi*(-$v2_ccgrad))\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq -((-$v2_lo)*$v1_cvgrad + $v1_hi*(-$v2_ccgrad))\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v2_hi)*$v1_cvgrad + $v1_lo*(-$v2_ccgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v2_hi)*$v1_cvgrad + $v1_lo*(-$v2_ccgrad))\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq -((-$v2_hi)*$v1_cvgrad + $v1_lo*(-$v2_ccgrad))\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_lo $eq $v1_hi*$v2_lo\n")
        write(buffer, "                $OUT_hi $eq $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_left = $v2_hi*$v1_cv + $v1_hi*$v2_cv - $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_right = $v2_lo*$v1_cc + $v1_lo*$v2_cv - $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cc_left = $v2_lo*$v1_cv + $v1_hi*$v2_cc - $v1_hi*$v2_lo\n")
        write(buffer, "                t1_cc_right = $v2_hi*$v1_cc + $v1_lo*$v2_cc - $v1_lo*$v2_hi\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi*$v2_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi*$v2_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi*$v2_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_lo*$v1_ccgrad + $v1_lo*$v2_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_lo*$v1_ccgrad + $v1_lo*$v2_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v2_lo*$v1_ccgrad + $v1_lo*$v2_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_lo*$v1_cvgrad + $v1_hi*$v2_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_lo*$v1_cvgrad + $v1_hi*$v2_ccgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq $v2_lo*$v1_cvgrad + $v1_hi*$v2_ccgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo*$v2_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo*$v2_ccgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo*$v2_ccgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        elseif $v1_hi <= 0.0\n")
        write(buffer, "            if $v2_lo >= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_lo*$v2_hi\n")
        write(buffer, "                $OUT_hi $eq $v1_hi*$v2_lo\n")
        write(buffer, "                t1_cv_left = $v2_lo*(-$v1_cv) + (-$v1_lo)*$v2_cc - (-$v1_lo)*$v2_lo\n")
        write(buffer, "                t1_cv_right = $v2_hi*(-$v1_cv) + (-$v1_hi)*$v2_cc - (-$v1_hi)*$v2_hi\n")
        write(buffer, "                t1_cc_left = $v2_hi*(-$v1_cc) + (-$v1_lo)*$v2_cv - (-$v1_lo)*$v2_hi\n")
        write(buffer, "                t1_cc_right = $v2_lo*(-$v1_cc) + (-$v1_hi)*$v2_cv - (-$v1_hi)*$v2_lo\n")
        write(buffer, "                if t1_cv_left < t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_lo*(-$v1_cvgrad) + (-$v1_lo)*$v2_ccgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_lo*(-$v1_cvgrad) + (-$v1_lo)*$v2_ccgrad)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq -($v2_lo*(-$v1_cvgrad) + (-$v1_lo)*$v2_ccgrad)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad) + (-$v1_hi)*$v2_ccgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad) + (-$v1_hi)*$v2_ccgrad)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad) + (-$v1_hi)*$v2_ccgrad)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left > t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq -($v2_hi*(-$v1_ccgrad) + (-$v1_lo)*$v2_cvgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -($v2_hi*(-$v1_ccgrad) + (-$v1_lo)*$v2_cvgrad)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq -($v2_hi*(-$v1_ccgrad) + (-$v1_lo)*$v2_cvgrad)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq -($v2_lo*(-$v1_ccgrad) + (-$v1_hi)*$v2_cvgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -($v2_lo*(-$v1_ccgrad) + (-$v1_hi)*$v2_cvgrad)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq -($v2_lo*(-$v1_ccgrad) + (-$v1_hi)*$v2_cvgrad)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v2_hi <= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_hi*$v2_hi\n")
        write(buffer, "                $OUT_hi $eq $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cv_left = $v2_lo*$v1_cc + $v1_lo*$v2_cc - $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cv_right = $v2_hi*$v1_cc + $v1_hi*$v2_cc - $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cc_left = $v2_hi*$v1_cv + $v1_lo*$v2_cv - $v1_lo*$v2_hi\n")
        write(buffer, "                t1_cc_right = $v2_lo*$v1_cv + $v1_hi*$v2_cv - $v1_hi*$v2_lo\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq (-$v2_lo)*(-$v1_ccgrad) + (-$v1_lo)*(-$v2_ccgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq (-$v2_lo)*(-$v1_ccgrad) + (-$v1_lo)*(-$v2_ccgrad)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq (-$v2_lo)*(-$v1_ccgrad) + (-$v1_lo)*(-$v2_ccgrad)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq (-$v2_hi)*(-$v1_ccgrad) + (-$v1_hi)*(-$v2_ccgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq (-$v2_hi)*(-$v1_ccgrad) + (-$v1_hi)*(-$v2_ccgrad)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq (-$v2_hi)*(-$v1_ccgrad) + (-$v1_hi)*(-$v2_ccgrad)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq (-$v2_hi)*(-$v1_cvgrad) + (-$v1_lo)*(-$v2_cvgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq (-$v2_hi)*(-$v1_cvgrad) + (-$v1_lo)*(-$v2_cvgrad)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq (-$v2_hi)*(-$v1_cvgrad) + (-$v1_lo)*(-$v2_cvgrad)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq (-$v2_lo)*(-$v1_cvgrad) + (-$v1_hi)*(-$v2_cvgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq (-$v2_lo)*(-$v1_cvgrad) + (-$v1_hi)*(-$v2_cvgrad)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq (-$v2_lo)*(-$v1_cvgrad) + (-$v1_hi)*(-$v2_cvgrad)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_lo $eq $v1_lo*$v2_hi\n")
        write(buffer, "                $OUT_hi $eq $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cv_left = $v2_lo*(-$v1_cc) + (-$v1_lo)*$v2_cc - (-$v1_lo)*$v2_lo\n")
        write(buffer, "                t1_cv_right = $v2_hi*(-$v1_cv) + (-$v1_hi)*$v2_cc - (-$v1_hi)*$v2_hi\n")
        write(buffer, "                t1_cc_left = $v2_hi*(-$v1_cc) + (-$v1_lo)*$v2_cv - (-$v1_lo)*$v2_hi\n")
        write(buffer, "                t1_cc_right = $v2_lo*(-$v1_cv) + (-$v1_hi)*$v2_cv - (-$v1_hi)*$v2_lo\n")
        write(buffer, "                if t1_cv_left < t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_lo*(-$v1_ccgrad) + (-$v1_lo)*$v2_ccgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_lo*(-$v1_ccgrad) + (-$v1_lo)*$v2_ccgrad)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq -($v2_lo*(-$v1_ccgrad) + (-$v1_lo)*$v2_ccgrad)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad) + (-$v1_hi)*$v2_ccgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad) + (-$v1_hi)*$v2_ccgrad)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad) + (-$v1_hi)*$v2_ccgrad)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left > t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v1_lo)*($v2_cvgrad) + ($v2_hi)*(-$v1_ccgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v1_lo)*($v2_cvgrad) + ($v2_hi)*(-$v1_ccgrad))\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq -((-$v1_lo)*($v2_cvgrad) + ($v2_hi)*(-$v1_ccgrad))\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v1_hi)*($v2_cvgrad) + ($v2_lo)*(-$v1_cvgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v1_hi)*($v2_cvgrad) + ($v2_lo)*(-$v1_cvgrad))\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq -((-$v1_hi)*($v2_cvgrad) + ($v2_lo)*(-$v1_cvgrad))\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        else\n")
        write(buffer, "            if $v2_lo >= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_lo*$v2_hi\n")
        write(buffer, "                $OUT_hi $eq $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_left = $v1_hi*$v2_cv + $v2_hi*$v1_cv - $v2_hi*$v1_hi\n")
        write(buffer, "                t1_cv_right = $v1_lo*$v2_cc + $v2_lo*$v1_cv - $v2_lo*$v1_lo\n")
        write(buffer, "                t1_cc_left = $v1_lo*$v2_cv + $v2_hi*$v1_cc - $v2_hi*$v1_lo\n")
        write(buffer, "                t1_cc_right = $v1_hi*$v2_cc + $v2_lo*$v1_cc - $v2_lo*$v1_hi\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq ($v1_hi)*($v2_cvgrad) + ($v2_hi)*($v1_cvgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq ($v1_hi)*($v2_cvgrad) + ($v2_hi)*($v1_cvgrad)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq ($v1_hi)*($v2_cvgrad) + ($v2_hi)*($v1_cvgrad)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq ($v1_lo)*($v2_ccgrad) + ($v2_lo)*($v1_cvgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq ($v1_lo)*($v2_ccgrad) + ($v2_lo)*($v1_cvgrad)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq ($v1_lo)*($v2_ccgrad) + ($v2_lo)*($v1_cvgrad)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq ($v1_lo)*($v2_cvgrad) + ($v2_hi)*($v1_ccgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq ($v1_lo)*($v2_cvgrad) + ($v2_hi)*($v1_ccgrad)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq ($v1_lo)*($v2_cvgrad) + ($v2_hi)*($v1_ccgrad)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq ($v1_hi)*($v2_ccgrad) + ($v2_lo)*($v1_ccgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq ($v1_hi)*($v2_ccgrad) + ($v2_lo)*($v1_ccgrad)\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq ($v1_hi)*($v2_ccgrad) + ($v2_lo)*($v1_ccgrad)\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v2_hi <= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_hi*$v2_lo\n")
        write(buffer, "                $OUT_hi $eq $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cv_left = $v1_lo*(-$v2_cc) + (-$v2_lo)*$v1_cc - (-$v2_lo)*$v1_lo\n")
        write(buffer, "                t1_cv_right = $v1_hi*(-$v2_cv) + (-$v2_hi)*$v1_cc - (-$v2_hi)*$v1_hi\n")
        write(buffer, "                t1_cc_left = $v1_hi*(-$v2_cc) + (-$v2_lo)*$v1_cv - (-$v2_lo)*$v1_hi\n")
        write(buffer, "                t1_cc_right = $v1_lo*(-$v2_cv) + (-$v2_hi)*$v1_cv - (-$v2_hi)*$v1_lo\n")
        write(buffer, "                if t1_cv_left < t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq -(($v1_lo)*(-$v2_ccgrad) + (-$v2_lo)*($v1_ccgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -(($v1_lo)*(-$v2_ccgrad) + (-$v2_lo)*($v1_ccgrad))\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq -(($v1_lo)*(-$v2_ccgrad) + (-$v2_lo)*($v1_ccgrad))\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq -(($v1_hi)*(-$v2_cvgrad) + (-$v2_hi)*($v1_ccgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -(($v1_hi)*(-$v2_cvgrad) + (-$v2_hi)*($v1_ccgrad))\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq -(($v1_hi)*(-$v2_cvgrad) + (-$v2_hi)*($v1_ccgrad))\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left > t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq -(($v1_hi)*(-$v2_ccgrad) + (-$v2_lo)*($v1_cvgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -(($v1_hi)*(-$v2_ccgrad) + (-$v2_lo)*($v1_cvgrad))\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq -(($v1_hi)*(-$v2_ccgrad) + (-$v2_lo)*($v1_cvgrad))\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq -(($v1_lo)*(-$v2_cvgrad) + (-$v2_hi)*($v1_cvgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -(($v1_lo)*(-$v2_cvgrad) + (-$v2_hi)*($v1_cvgrad))\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq -(($v1_lo)*(-$v2_cvgrad) + (-$v2_hi)*($v1_cvgrad))\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_lo $eq min($v1_lo*$v2_hi, $v1_hi*$v2_lo)\n")
        write(buffer, "                $OUT_hi $eq max($v1_lo*$v2_lo, $v1_hi*$v2_hi)\n")
        write(buffer, "                t1_cv_left = $v2_hi*$v1_cv + $v1_hi*$v2_cv - $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_right = $v2_lo*$v1_cc + $v1_lo*$v2_cc - $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cc_left = $v2_lo*$v1_cv + $v1_hi*$v2_cc - $v1_hi*$v2_lo\n")
        write(buffer, "                t1_cc_right = $v2_hi*$v1_cc + $v1_lo*$v2_cv - $v1_lo*$v2_hi\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi*$v2_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi*$v2_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi*$v2_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_lo*$v1_ccgrad + $v1_lo*$v2_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_lo*$v1_ccgrad + $v1_lo*$v2_ccgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_cvgrad $eq $v2_lo*$v1_ccgrad + $v1_lo*$v2_ccgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_lo*$v1_cvgrad + $v1_hi*$v2_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_lo*$v1_cvgrad + $v1_hi*$v2_ccgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq $v2_lo*$v1_cvgrad + $v1_hi*$v2_ccgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo*$v2_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo*$v2_cvgrad\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo*$v2_cvgrad\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv = $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc = $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    elseif (startswith(v1, r"aux|temp") && !startswith(v2, r"aux|temp"))
        ID = findfirst(==(v2), varlist)
        isnothing(ID) && error("Empty varlist")
        write(buffer, "        #####################################\n")
        write(buffer, "        ## Multiplication of Two Variables ##\n")
        write(buffer, "        #####################################\n")
        write(buffer, "\n")
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        # Begin rule\n")
        write(buffer, "        if $v1_lo >= 0.0\n")
        write(buffer, "            if $v2_lo >= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_lo*$v2_lo\n")
        write(buffer, "                $OUT_hi $eq $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_left = $v2_hi*$v1_cv + $v1_hi*$v2_cv - $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_right = $v2_lo*$v1_cv + $v1_lo*$v2_cv - $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cc_left = $v2_lo*$v1_cc + $v1_hi*$v2_cc - $v1_hi*$v2_lo\n")
        write(buffer, "                t1_cc_right = $v2_hi*$v1_cc + $v1_lo*$v2_cc - $v1_lo*$v2_hi\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi*$v1_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi*$v1_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_hi*$v1_cvgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo*$v1_cvgrad + $v1_lo\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo*$v1_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo*$v1_cvgrad + $v1_lo\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo*$v1_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_lo*$v1_cvgrad + $v1_lo\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_lo*$v1_cvgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo*$v1_ccgrad + $v1_hi\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo*$v1_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo*$v1_ccgrad + $v1_hi\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo*$v1_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_lo*$v1_ccgrad + $v1_hi\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_lo*$v1_ccgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi*$v1_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi*$v1_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_hi*$v1_ccgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v2_hi <= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_hi*$v2_lo\n")
        write(buffer, "                $OUT_hi $eq $v1_lo*$v2_hi\n")
        write(buffer, "                t1_cv_left = (-$v2_hi)*$v1_cc + $v1_hi*(-$v2_cv) - $v1_hi*(-$v2_hi)\n")
        write(buffer, "                t1_cv_right = (-$v2_lo)*$v1_cc + $v1_lo*(-$v2_cv) - $v1_lo*(-$v2_lo)\n")
        write(buffer, "                t1_cc_left = (-$v2_lo)*$v1_cv + $v1_hi*(-$v2_cc) - $v1_hi*(-$v2_lo)\n")
        write(buffer, "                t1_cc_right = (-$v2_hi)*$v1_cv + $v1_lo*(-$v2_cc) - $v1_lo*(-$v2_hi)\n")
        write(buffer, "                if t1_cv_left < t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -((-$v2_hi)*$v1_ccgrad + $v1_hi*(-1.0))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -((-$v2_hi)*$v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -((-$v2_hi)*$v1_ccgrad + $v1_hi*(-1.0))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -((-$v2_hi)*$v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq -((-$v2_hi)*$v1_ccgrad + $v1_hi*(-1.0))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -((-$v2_hi)*$v1_ccgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -((-$v2_lo)*$v1_ccgrad + $v1_lo*(-1.0))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -((-$v2_lo)*$v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -((-$v2_lo)*$v1_ccgrad + $v1_lo*(-1.0))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -((-$v2_lo)*$v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq -((-$v2_lo)*$v1_ccgrad + $v1_lo*(-1.0))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -((-$v2_lo)*$v1_ccgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left > t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v2_lo)*$v1_cvgrad + $v1_hi*(-1.0))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v2_lo)*$v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v2_lo)*$v1_cvgrad + $v1_hi*(-1.0))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v2_lo)*$v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v2_lo)*$v1_cvgrad + $v1_hi*(-1.0))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v2_lo)*$v1_cvgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v2_hi)*$v1_cvgrad + $v1_lo*(-1.0))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v2_hi)*$v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v2_hi)*$v1_cvgrad + $v1_lo*(-1.0))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v2_hi)*$v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v2_hi)*$v1_cvgrad + $v1_lo*(-1.0))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v2_hi)*$v1_cvgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_lo $eq $v1_hi*$v2_lo\n")
        write(buffer, "                $OUT_hi $eq $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_left = $v2_hi*$v1_cv + $v1_hi*$v2_cv - $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_right = $v2_lo*$v1_cc + $v1_lo*$v2_cv - $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cc_left = $v2_lo*$v1_cv + $v1_hi*$v2_cc - $v1_hi*$v2_lo\n")
        write(buffer, "                t1_cc_right = $v2_hi*$v1_cc + $v1_lo*$v2_cc - $v1_lo*$v2_hi\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi*$v1_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi*$v1_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_hi*$v1_cvgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo*$v1_ccgrad + $v1_lo\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo*$v1_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo*$v1_ccgrad + $v1_lo\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo*$v1_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_lo*$v1_ccgrad + $v1_lo\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_lo*$v1_ccgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo*$v1_cvgrad + $v1_hi\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo*$v1_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo*$v1_cvgrad + $v1_hi\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo*$v1_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_lo*$v1_cvgrad + $v1_hi\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_lo*$v1_cvgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi*$v1_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi*$v1_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_hi*$v1_ccgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        elseif $v1_hi <= 0.0\n")
        write(buffer, "            if $v2_lo >= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_lo*$v2_hi\n")
        write(buffer, "                $OUT_hi $eq $v1_hi*$v2_lo\n")
        write(buffer, "                t1_cv_left = $v2_lo*(-$v1_cv) + (-$v1_lo)*$v2_cc - (-$v1_lo)*$v2_lo\n")
        write(buffer, "                t1_cv_right = $v2_hi*(-$v1_cv) + (-$v1_hi)*$v2_cc - (-$v1_hi)*$v2_hi\n")
        write(buffer, "                t1_cc_left = $v2_hi*(-$v1_cc) + (-$v1_lo)*$v2_cv - (-$v1_lo)*$v2_hi\n")
        write(buffer, "                t1_cc_right = $v2_lo*(-$v1_cc) + (-$v1_hi)*$v2_cv - (-$v1_hi)*$v2_lo\n")
        write(buffer, "                if t1_cv_left < t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_lo*(-$v1_cvgrad) + (-$v1_lo))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_lo*(-$v1_cvgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_lo*(-$v1_cvgrad) + (-$v1_lo))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_lo*(-$v1_cvgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_lo*(-$v1_cvgrad) + (-$v1_lo))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_lo*(-$v1_cvgrad))\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad) + (-$v1_hi))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad) + (-$v1_hi))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad) + (-$v1_hi))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad))\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left > t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v2_hi*(-$v1_ccgrad) + (-$v1_lo))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v2_hi*(-$v1_ccgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v2_hi*(-$v1_ccgrad) + (-$v1_lo))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v2_hi*(-$v1_ccgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq -($v2_hi*(-$v1_ccgrad) + (-$v1_lo))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -($v2_hi*(-$v1_ccgrad))\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v2_lo*(-$v1_ccgrad) + (-$v1_hi))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v2_lo*(-$v1_ccgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v2_lo*(-$v1_ccgrad) + (-$v1_hi))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v2_lo*(-$v1_ccgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq -($v2_lo*(-$v1_ccgrad) + (-$v1_hi))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -($v2_lo*(-$v1_ccgrad))\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v2_hi <= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_hi*$v2_hi\n")
        write(buffer, "                $OUT_hi $eq $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cv_left = $v2_lo*$v1_cc + $v1_lo*$v2_cc - $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cv_right = $v2_hi*$v1_cc + $v1_hi*$v2_cc - $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cc_left = $v2_hi*$v1_cv + $v1_lo*$v2_cv - $v1_lo*$v2_hi\n")
        write(buffer, "                t1_cc_right = $v2_lo*$v1_cv + $v1_hi*$v2_cv - $v1_hi*$v2_lo\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq (-$v2_lo)*(-$v1_ccgrad) + (-$v1_lo)*(-1.0)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq (-$v2_lo)*(-$v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq (-$v2_lo)*(-$v1_ccgrad) + (-$v1_lo)*(-1.0)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq (-$v2_lo)*(-$v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq (-$v2_lo)*(-$v1_ccgrad) + (-$v1_lo)*(-1.0)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq (-$v2_lo)*(-$v1_ccgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq (-$v2_hi)*(-$v1_ccgrad) + (-$v1_hi)*(-1.0)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq (-$v2_hi)*(-$v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq (-$v2_hi)*(-$v1_ccgrad) + (-$v1_hi)*(-1.0)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq (-$v2_hi)*(-$v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq (-$v2_hi)*(-$v1_ccgrad) + (-$v1_hi)*(-1.0)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq (-$v2_hi)*(-$v1_ccgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq (-$v2_hi)*(-$v1_cvgrad) + (-$v1_lo)*(-1.0)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq (-$v2_hi)*(-$v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq (-$v2_hi)*(-$v1_cvgrad) + (-$v1_lo)*(-1.0)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq (-$v2_hi)*(-$v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq (-$v2_hi)*(-$v1_cvgrad) + (-$v1_lo)*(-1.0)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq (-$v2_hi)*(-$v1_cvgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq (-$v2_lo)*(-$v1_cvgrad) + (-$v1_hi)*(-1.0)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq (-$v2_lo)*(-$v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq (-$v2_lo)*(-$v1_cvgrad) + (-$v1_hi)*(-1.0)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq (-$v2_lo)*(-$v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq (-$v2_lo)*(-$v1_cvgrad) + (-$v1_hi)*(-1.0)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq (-$v2_lo)*(-$v1_cvgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_lo $eq $v1_lo*$v2_hi\n")
        write(buffer, "                $OUT_hi $eq $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cv_left = $v2_lo*(-$v1_cc) + (-$v1_lo)*$v2_cc - (-$v1_lo)*$v2_lo\n")
        write(buffer, "                t1_cv_right = $v2_hi*(-$v1_cv) + (-$v1_hi)*$v2_cc - (-$v1_hi)*$v2_hi\n")
        write(buffer, "                t1_cc_left = $v2_hi*(-$v1_cc) + (-$v1_lo)*$v2_cv - (-$v1_lo)*$v2_hi\n")
        write(buffer, "                t1_cc_right = $v2_lo*(-$v1_cv) + (-$v1_hi)*$v2_cv - (-$v1_hi)*$v2_lo\n")
        write(buffer, "                if t1_cv_left < t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_lo*(-$v1_ccgrad) + (-$v1_lo))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_lo*(-$v1_ccgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_lo*(-$v1_ccgrad) + (-$v1_lo))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_lo*(-$v1_ccgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_lo*(-$v1_ccgrad) + (-$v1_lo))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_lo*(-$v1_ccgrad))\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad) + (-$v1_hi))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad) + (-$v1_hi))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad) + (-$v1_hi))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_hi*(-$v1_cvgrad))\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left > t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v1_lo) + ($v2_hi)*(-$v1_ccgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v2_hi)*(-$v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v1_lo) + ($v2_hi)*(-$v1_ccgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v2_hi)*(-$v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v1_lo) + ($v2_hi)*(-$v1_ccgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -($v2_hi)*(-$v1_ccgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v1_hi) + ($v2_lo)*(-$v1_cvgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v2_lo)*(-$v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v1_hi) + ($v2_lo)*(-$v1_cvgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v2_lo)*(-$v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v1_hi) + ($v2_lo)*(-$v1_cvgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -($v2_lo)*(-$v1_cvgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        else\n")
        write(buffer, "            if $v2_lo >= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_lo*$v2_hi\n")
        write(buffer, "                $OUT_hi $eq $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_left = $v1_hi*$v2_cv + $v2_hi*$v1_cv - $v2_hi*$v1_hi\n")
        write(buffer, "                t1_cv_right = $v1_lo*$v2_cc + $v2_lo*$v1_cv - $v2_lo*$v1_lo\n")
        write(buffer, "                t1_cc_left = $v1_lo*$v2_cv + $v2_hi*$v1_cc - $v2_hi*$v1_lo\n")
        write(buffer, "                t1_cc_right = $v1_hi*$v2_cc + $v2_lo*$v1_cc - $v2_lo*$v1_hi\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq ($v1_hi) + ($v2_hi)*($v1_cvgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq ($v2_hi)*($v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq ($v1_hi) + ($v2_hi)*($v1_cvgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq ($v2_hi)*($v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq ($v1_hi) + ($v2_hi)*($v1_cvgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq ($v2_hi)*($v1_cvgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq ($v1_lo) + ($v2_lo)*($v1_cvgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq ($v2_lo)*($v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq ($v1_lo) + ($v2_lo)*($v1_cvgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq ($v2_lo)*($v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq ($v1_lo) + ($v2_lo)*($v1_cvgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq ($v2_lo)*($v1_cvgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq ($v1_lo) + ($v2_hi)*($v1_ccgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq ($v2_hi)*($v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq ($v1_lo) + ($v2_hi)*($v1_ccgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq ($v2_hi)*($v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq ($v1_lo) + ($v2_hi)*($v1_ccgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq ($v2_hi)*($v1_ccgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq ($v1_hi) + ($v2_lo)*($v1_ccgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq ($v2_lo)*($v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq ($v1_hi) + ($v2_lo)*($v1_ccgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq ($v2_lo)*($v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq ($v1_hi) + ($v2_lo)*($v1_ccgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq ($v2_lo)*($v1_ccgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v2_hi <= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_hi*$v2_lo\n")
        write(buffer, "                $OUT_hi $eq $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cv_left = $v1_lo*(-$v2_cc) + (-$v2_lo)*$v1_cc - (-$v2_lo)*$v1_lo\n")
        write(buffer, "                t1_cv_right = $v1_hi*(-$v2_cv) + (-$v2_hi)*$v1_cc - (-$v2_hi)*$v1_hi\n")
        write(buffer, "                t1_cc_left = $v1_hi*(-$v2_cc) + (-$v2_lo)*$v1_cv - (-$v2_lo)*$v1_hi\n")
        write(buffer, "                t1_cc_right = $v1_lo*(-$v2_cv) + (-$v2_hi)*$v1_cv - (-$v2_hi)*$v1_lo\n")
        write(buffer, "                if t1_cv_left < t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -(($v1_lo)*(-1.0) + (-$v2_lo)*($v1_ccgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -(-$v2_lo)*($v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -(($v1_lo)*(-1.0) + (-$v2_lo)*($v1_ccgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -(-$v2_lo)*($v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq -(($v1_lo)*(-1.0) + (-$v2_lo)*($v1_ccgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -(-$v2_lo)*($v1_ccgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -(($v1_hi)*(-1.0) + (-$v2_hi)*($v1_ccgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -(-$v2_hi)*($v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -(($v1_hi)*(-1.0) + (-$v2_hi)*($v1_ccgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -(-$v2_hi)*($v1_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq -(($v1_hi)*(-1.0) + (-$v2_hi)*($v1_ccgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -(-$v2_hi)*($v1_ccgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left > t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -(($v1_hi)*(-1.0) + (-$v2_lo)*($v1_cvgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -(-$v2_lo)*($v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -(($v1_hi)*(-1.0) + (-$v2_lo)*($v1_cvgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -(-$v2_lo)*($v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq -(($v1_hi)*(-1.0) + (-$v2_lo)*($v1_cvgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -(-$v2_lo)*($v1_cvgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -(($v1_lo)*(-1.0) + (-$v2_hi)*($v1_cvgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -(-$v2_hi)*($v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -(($v1_lo)*(-1.0) + (-$v2_hi)*($v1_cvgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -(-$v2_hi)*($v1_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq -(($v1_lo)*(-1.0) + (-$v2_hi)*($v1_cvgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -(-$v2_hi)*($v1_cvgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_lo $eq min($v1_lo*$v2_hi, $v1_hi*$v2_lo)\n")
        write(buffer, "                $OUT_hi $eq max($v1_lo*$v2_lo, $v1_hi*$v2_hi)\n")
        write(buffer, "                t1_cv_left = $v2_hi*$v1_cv + $v1_hi*$v2_cv - $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_right = $v2_lo*$v1_cc + $v1_lo*$v2_cc - $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cc_left = $v2_lo*$v1_cv + $v1_hi*$v2_cc - $v1_hi*$v2_lo\n")
        write(buffer, "                t1_cc_right = $v2_hi*$v1_cc + $v1_lo*$v2_cv - $v1_lo*$v2_hi\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi*$v1_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi*$v1_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_hi*$v1_cvgrad + $v1_hi\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_hi*$v1_cvgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo*$v1_ccgrad + $v1_lo\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo*$v1_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo*$v1_ccgrad + $v1_lo\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo*$v1_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_lo*$v1_ccgrad + $v1_lo\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_lo*$v1_ccgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo*$v1_cvgrad + $v1_hi\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo*$v1_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo*$v1_cvgrad + $v1_hi\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo*$v1_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_lo*$v1_cvgrad + $v1_hi\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_lo*$v1_cvgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi*$v1_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi*$v1_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_hi*$v1_ccgrad + $v1_lo\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_hi*$v1_ccgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv = $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc = $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    elseif (!startswith(v1, r"aux|temp") && startswith(v2, r"aux|temp"))
        ID = findfirst(==(v1), varlist)
        isnothing(ID) && error("Empty varlist")
        write(buffer, "        #####################################\n")
        write(buffer, "        ## Multiplication of Two Variables ##\n")
        write(buffer, "        #####################################\n")
        write(buffer, "\n")
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        # Begin rule\n")
        write(buffer, "        if $v1_lo >= 0.0\n")
        write(buffer, "            if $v2_lo >= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_lo*$v2_lo\n")
        write(buffer, "                $OUT_hi $eq $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_left = $v2_hi*$v1_cv + $v1_hi*$v2_cv - $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_right = $v2_lo*$v1_cv + $v1_lo*$v2_cv - $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cc_left = $v2_lo*$v1_cc + $v1_hi*$v2_cc - $v1_hi*$v2_lo\n")
        write(buffer, "                t1_cc_right = $v2_hi*$v1_cc + $v1_lo*$v2_cc - $v1_lo*$v2_hi\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi + $v1_hi*$v2_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_hi*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi + $v1_hi*$v2_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_hi*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_hi + $v1_hi*$v2_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_hi*$v2_cvgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo + $v1_lo*$v2_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_lo*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo + $v1_lo*$v2_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_lo*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_lo + $v1_lo*$v2_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_lo*$v2_cvgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo + $v1_hi*$v2_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_hi*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo + $v1_hi*$v2_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_hi*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_lo + $v1_hi*$v2_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_hi*$v2_ccgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi + $v1_lo*$v2_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_lo*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi + $v1_lo*$v2_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_lo*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_hi + $v1_lo*$v2_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_lo*$v2_ccgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v2_hi <= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_hi*$v2_lo\n")
        write(buffer, "                $OUT_hi $eq $v1_lo*$v2_hi\n")
        write(buffer, "                t1_cv_left = (-$v2_hi)*$v1_cc + $v1_hi*(-$v2_cv) - $v1_hi*(-$v2_hi)\n")
        write(buffer, "                t1_cv_right = (-$v2_lo)*$v1_cc + $v1_lo*(-$v2_cv) - $v1_lo*(-$v2_lo)\n")
        write(buffer, "                t1_cc_left = (-$v2_lo)*$v1_cv + $v1_hi*(-$v2_cc) - $v1_hi*(-$v2_lo)\n")
        write(buffer, "                t1_cc_right = (-$v2_hi)*$v1_cv + $v1_lo*(-$v2_cc) - $v1_lo*(-$v2_hi)\n")
        write(buffer, "                if t1_cv_left < t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -((-$v2_hi) + $v1_hi*(-$v2_cvgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v1_hi*(-$v2_cvgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -((-$v2_hi) + $v1_hi*(-$v2_cvgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v1_hi*(-$v2_cvgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq -((-$v2_hi) + $v1_hi*(-$v2_cvgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v1_hi*(-$v2_cvgrad))\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -((-$v2_lo) + $v1_lo*(-$v2_cvgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v1_lo*(-$v2_cvgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -((-$v2_lo) + $v1_lo*(-$v2_cvgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v1_lo*(-$v2_cvgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq -((-$v2_lo) + $v1_lo*(-$v2_cvgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v1_lo*(-$v2_cvgrad))\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left > t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v2_lo) + $v1_hi*(-$v2_ccgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v1_hi*(-$v2_ccgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v2_lo) + $v1_hi*(-$v2_ccgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v1_hi*(-$v2_ccgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v2_lo) + $v1_hi*(-$v2_ccgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -($v1_hi*(-$v2_ccgrad))\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v2_hi) + $v1_lo*(-$v2_ccgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v1_lo*(-$v2_ccgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v2_hi) + $v1_lo*(-$v2_ccgrad))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v1_lo*(-$v2_ccgrad))\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v2_hi) + $v1_lo*(-$v2_ccgrad))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -($v1_lo*(-$v2_ccgrad))\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_lo $eq $v1_hi*$v2_lo\n")
        write(buffer, "                $OUT_hi $eq $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_left = $v2_hi*$v1_cv + $v1_hi*$v2_cv - $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_right = $v2_lo*$v1_cc + $v1_lo*$v2_cv - $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cc_left = $v2_lo*$v1_cv + $v1_hi*$v2_cc - $v1_hi*$v2_lo\n")
        write(buffer, "                t1_cc_right = $v2_hi*$v1_cc + $v1_lo*$v2_cc - $v1_lo*$v2_hi\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi + $v1_hi*$v2_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_hi*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi + $v1_hi*$v2_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_hi*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_hi + $v1_hi*$v2_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_hi*$v2_cvgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo + $v1_lo*$v2_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_lo*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo + $v1_lo*$v2_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_lo*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_lo + $v1_lo*$v2_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_lo*$v2_cvgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo + $v1_hi*$v2_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_hi*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo + $v1_hi*$v2_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_hi*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_lo + $v1_hi*$v2_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_hi*$v2_ccgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi + $v1_lo*$v2_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_lo*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi + $v1_lo*$v2_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_lo*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_hi + $v1_lo*$v2_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_lo*$v2_ccgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        elseif $v1_hi <= 0.0\n")
        write(buffer, "            if $v2_lo >= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_lo*$v2_hi\n")
        write(buffer, "                $OUT_hi $eq $v1_hi*$v2_lo\n")
        write(buffer, "                t1_cv_left = $v2_lo*(-$v1_cv) + (-$v1_lo)*$v2_cc - (-$v1_lo)*$v2_lo\n")
        write(buffer, "                t1_cv_right = $v2_hi*(-$v1_cv) + (-$v1_hi)*$v2_cc - (-$v1_hi)*$v2_hi\n")
        write(buffer, "                t1_cc_left = $v2_hi*(-$v1_cc) + (-$v1_lo)*$v2_cv - (-$v1_lo)*$v2_hi\n")
        write(buffer, "                t1_cc_right = $v2_lo*(-$v1_cc) + (-$v1_hi)*$v2_cv - (-$v1_hi)*$v2_lo\n")
        write(buffer, "                if t1_cv_left < t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_lo*(-1.0) + (-$v1_lo)*$v2_ccgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_lo*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_lo*(-1.0) + (-$v1_lo)*$v2_ccgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_lo*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_lo*(-1.0) + (-$v1_lo)*$v2_ccgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_lo*$v2_ccgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_hi*(-1.0) + (-$v1_hi)*$v2_ccgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_hi*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_hi*(-1.0) + (-$v1_hi)*$v2_ccgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_hi*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_hi*(-1.0) + (-$v1_hi)*$v2_ccgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_hi*$v2_ccgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left > t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v2_hi*(-1.0) + (-$v1_lo)*$v2_cvgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_lo*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v2_hi*(-1.0) + (-$v1_lo)*$v2_cvgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_lo*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq -($v2_hi*(-1.0) + (-$v1_lo)*$v2_cvgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_lo*$v2_cvgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v2_lo*(-1.0) + (-$v1_hi)*$v2_cvgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_hi*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v2_lo*(-1.0) + (-$v1_hi)*$v2_cvgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_hi*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq -($v2_lo*(-1.0) + (-$v1_hi)*$v2_cvgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_hi*$v2_cvgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v2_hi <= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_hi*$v2_hi\n")
        write(buffer, "                $OUT_hi $eq $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cv_left = $v2_lo*$v1_cc + $v1_lo*$v2_cc - $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cv_right = $v2_hi*$v1_cc + $v1_hi*$v2_cc - $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cc_left = $v2_hi*$v1_cv + $v1_lo*$v2_cv - $v1_lo*$v2_hi\n")
        write(buffer, "                t1_cc_right = $v2_lo*$v1_cv + $v1_hi*$v2_cv - $v1_hi*$v2_lo\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq (-$v2_lo)*(-1.0) + (-$v1_lo)*(-$v2_ccgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq (-$v1_lo)*(-$v2_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq (-$v2_lo)*(-1.0) + (-$v1_lo)*(-$v2_ccgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq (-$v1_lo)*(-$v2_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq (-$v2_lo)*(-1.0) + (-$v1_lo)*(-$v2_ccgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq (-$v1_lo)*(-$v2_ccgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq (-$v2_hi)*(-1.0) + (-$v1_hi)*(-$v2_ccgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq (-$v1_hi)*(-$v2_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq (-$v2_hi)*(-1.0) + (-$v1_hi)*(-$v2_ccgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq (-$v1_hi)*(-$v2_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq (-$v2_hi)*(-1.0) + (-$v1_hi)*(-$v2_ccgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq (-$v1_hi)*(-$v2_ccgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq (-$v2_hi)*(-1.0) + (-$v1_lo)*(-$v2_cvgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq (-$v1_lo)*(-$v2_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq (-$v2_hi)*(-1.0) + (-$v1_lo)*(-$v2_cvgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq (-$v1_lo)*(-$v2_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq (-$v2_hi)*(-1.0) + (-$v1_lo)*(-$v2_cvgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq (-$v1_lo)*(-$v2_cvgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq (-$v2_lo)*(-1.0) + (-$v1_hi)*(-$v2_cvgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq (-$v1_hi)*(-$v2_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq (-$v2_lo)*(-1.0) + (-$v1_hi)*(-$v2_cvgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq (-$v1_hi)*(-$v2_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq (-$v2_lo)*(-1.0) + (-$v1_hi)*(-$v2_cvgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq (-$v1_hi)*(-$v2_cvgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_lo $eq $v1_lo*$v2_hi\n")
        write(buffer, "                $OUT_hi $eq $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cv_left = $v2_lo*(-$v1_cc) + (-$v1_lo)*$v2_cc - (-$v1_lo)*$v2_lo\n")
        write(buffer, "                t1_cv_right = $v2_hi*(-$v1_cv) + (-$v1_hi)*$v2_cc - (-$v1_hi)*$v2_hi\n")
        write(buffer, "                t1_cc_left = $v2_hi*(-$v1_cc) + (-$v1_lo)*$v2_cv - (-$v1_lo)*$v2_hi\n")
        write(buffer, "                t1_cc_right = $v2_lo*(-$v1_cv) + (-$v1_hi)*$v2_cv - (-$v1_hi)*$v2_lo\n")
        write(buffer, "                if t1_cv_left < t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_lo*(-1.0) + (-$v1_lo)*$v2_ccgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_lo*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_lo*(-1.0) + (-$v1_lo)*$v2_ccgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_lo*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_lo*(-1.0) + (-$v1_lo)*$v2_ccgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_lo*$v2_ccgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_hi*(-1.0) + (-$v1_hi)*$v2_ccgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_hi*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v2_hi*(-1.0) + (-$v1_hi)*$v2_ccgrad)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_hi*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v2_hi*(-1.0) + (-$v1_hi)*$v2_ccgrad)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_hi*$v2_ccgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left > t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v1_lo)*($v2_cvgrad) + ($v2_hi)*(-1.0))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_lo*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v1_lo)*($v2_cvgrad) + ($v2_hi)*(-1.0))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_lo*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v1_lo)*($v2_cvgrad) + ($v2_hi)*(-1.0))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_lo*$v2_cvgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v1_hi)*($v2_cvgrad) + ($v2_lo)*(-1.0))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_hi*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -((-$v1_hi)*($v2_cvgrad) + ($v2_lo)*(-1.0))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_hi*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq -((-$v1_hi)*($v2_cvgrad) + ($v2_lo)*(-1.0))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_hi*$v2_cvgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        else\n")
        write(buffer, "            if $v2_lo >= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_lo*$v2_hi\n")
        write(buffer, "                $OUT_hi $eq $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_left = $v1_hi*$v2_cv + $v2_hi*$v1_cv - $v2_hi*$v1_hi\n")
        write(buffer, "                t1_cv_right = $v1_lo*$v2_cc + $v2_lo*$v1_cv - $v2_lo*$v1_lo\n")
        write(buffer, "                t1_cc_left = $v1_lo*$v2_cv + $v2_hi*$v1_cc - $v2_hi*$v1_lo\n")
        write(buffer, "                t1_cc_right = $v1_hi*$v2_cc + $v2_lo*$v1_cc - $v2_lo*$v1_hi\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq ($v1_hi)*($v2_cvgrad) + ($v2_hi)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq ($v1_hi)*($v2_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq ($v1_hi)*($v2_cvgrad) + ($v2_hi)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq ($v1_hi)*($v2_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq ($v1_hi)*($v2_cvgrad) + ($v2_hi)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq ($v1_hi)*($v2_cvgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq ($v1_lo)*($v2_ccgrad) + ($v2_lo)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq ($v1_lo)*($v2_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq ($v1_lo)*($v2_ccgrad) + ($v2_lo)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq ($v1_lo)*($v2_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq ($v1_lo)*($v2_ccgrad) + ($v2_lo)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq ($v1_lo)*($v2_ccgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq ($v1_lo)*($v2_cvgrad) + ($v2_hi)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq ($v1_lo)*($v2_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq ($v1_lo)*($v2_cvgrad) + ($v2_hi)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq ($v1_lo)*($v2_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq ($v1_lo)*($v2_cvgrad) + ($v2_hi)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq ($v1_lo)*($v2_cvgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq ($v1_hi)*($v2_ccgrad) + ($v2_lo)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq ($v1_hi)*($v2_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq ($v1_hi)*($v2_ccgrad) + ($v2_lo)\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq ($v1_hi)*($v2_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq ($v1_hi)*($v2_ccgrad) + ($v2_lo)\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq ($v1_hi)*($v2_ccgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v2_hi <= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_hi*$v2_lo\n")
        write(buffer, "                $OUT_hi $eq $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cv_left = $v1_lo*(-$v2_cc) + (-$v2_lo)*$v1_cc - (-$v2_lo)*$v1_lo\n")
        write(buffer, "                t1_cv_right = $v1_hi*(-$v2_cv) + (-$v2_hi)*$v1_cc - (-$v2_hi)*$v1_hi\n")
        write(buffer, "                t1_cc_left = $v1_hi*(-$v2_cc) + (-$v2_lo)*$v1_cv - (-$v2_lo)*$v1_hi\n")
        write(buffer, "                t1_cc_right = $v1_lo*(-$v2_cv) + (-$v2_hi)*$v1_cv - (-$v2_hi)*$v1_lo\n")
        write(buffer, "                if t1_cv_left < t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -(($v1_lo)*(-$v2_ccgrad) + (-$v2_lo))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v1_lo)*(-$v2_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -(($v1_lo)*(-$v2_ccgrad) + (-$v2_lo))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v1_lo)*(-$v2_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq -(($v1_lo)*(-$v2_ccgrad) + (-$v2_lo))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v1_lo)*(-$v2_ccgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -(($v1_hi)*(-$v2_cvgrad) + (-$v2_hi))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v1_hi)*(-$v2_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq -(($v1_hi)*(-$v2_cvgrad) + (-$v2_hi))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq -($v1_hi)*(-$v2_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq -(($v1_hi)*(-$v2_cvgrad) + (-$v2_hi))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq -($v1_hi)*(-$v2_cvgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left > t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -(($v1_hi)*(-$v2_ccgrad) + (-$v2_lo))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v1_hi)*(-$v2_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -(($v1_hi)*(-$v2_ccgrad) + (-$v2_lo))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v1_hi)*(-$v2_ccgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq -(($v1_hi)*(-$v2_ccgrad) + (-$v2_lo))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -($v1_hi)*(-$v2_ccgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -(($v1_lo)*(-$v2_cvgrad) + (-$v2_hi))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v1_lo)*(-$v2_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq -(($v1_lo)*(-$v2_cvgrad) + (-$v2_hi))\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq -($v1_lo)*(-$v2_cvgrad)\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq -(($v1_lo)*(-$v2_cvgrad) + (-$v2_hi))\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq -($v1_lo)*(-$v2_cvgrad)\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_lo $eq min($v1_lo*$v2_hi, $v1_hi*$v2_lo)\n")
        write(buffer, "                $OUT_hi $eq max($v1_lo*$v2_lo, $v1_hi*$v2_hi)\n")
        write(buffer, "                t1_cv_left = $v2_hi*$v1_cv + $v1_hi*$v2_cv - $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_right = $v2_lo*$v1_cc + $v1_lo*$v2_cc - $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cc_left = $v2_lo*$v1_cv + $v1_hi*$v2_cc - $v1_hi*$v2_lo\n")
        write(buffer, "                t1_cc_right = $v2_hi*$v1_cc + $v1_lo*$v2_cv - $v1_lo*$v2_hi\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi + $v1_hi*$v2_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_hi*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_hi + $v1_hi*$v2_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_hi*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_hi + $v1_hi*$v2_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_hi*$v2_cvgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo + $v1_lo*$v2_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_lo*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_cvgrad $eq $v2_lo + $v1_lo*$v2_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_cvgrad $eq $v1_lo*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_cvgrad $eq $v2_lo + $v1_lo*$v2_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_cvgrad $eq $v1_lo*$v2_ccgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo + $v1_hi*$v2_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_hi*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_lo + $v1_hi*$v2_ccgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_hi*$v2_ccgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_lo + $v1_hi*$v2_ccgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_hi*$v2_ccgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "                        if $sparsity_string\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi + $v1_lo*$v2_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_lo*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        end\n")
        elseif sparsity_case == 2
            write(buffer, "                        if $antisparsity_string\n")
            write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
            write(buffer, "                        else\n")
            write(buffer, "                            if col == Int32($ID)\n")
            write(buffer, "                                $OUT_ccgrad $eq $v2_hi + $v1_lo*$v2_cvgrad\n")
            write(buffer, "                            else\n")
            write(buffer, "                                $OUT_ccgrad $eq $v1_lo*$v2_cvgrad\n")
            write(buffer, "                            end\n")
            write(buffer, "                        end\n")
        else
            write(buffer, "                        if col == Int32($ID)\n")
            write(buffer, "                            $OUT_ccgrad $eq $v2_hi + $v1_lo*$v2_cvgrad\n")
            write(buffer, "                        else\n")
            write(buffer, "                            $OUT_ccgrad $eq $v1_lo*$v2_cvgrad\n")
            write(buffer, "                        end\n")
        end
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv = $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc = $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    else
        ID1 = findfirst(==(v1), varlist)
        ID2 = findfirst(==(v2), varlist)
        (ID1 == ID2) && error("Multiplying same variable")
        isnothing(ID1) && error("Empty varlist")
        isnothing(ID2) && error("Empty varlist")
        write(buffer, "        #####################################\n")
        write(buffer, "        ## Multiplication of Two Variables ##\n")
        write(buffer, "        #####################################\n")
        write(buffer, "\n")
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        # Begin rule\n")
        write(buffer, "        if $v1_lo >= 0.0\n")
        write(buffer, "            if $v2_lo >= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_lo*$v2_lo\n")
        write(buffer, "                $OUT_hi $eq $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_left = $v2_hi*$v1_cv + $v1_hi*$v2_cv - $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_right = $v2_lo*$v1_cv + $v1_lo*$v2_cv - $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cc_left = $v2_lo*$v1_cc + $v1_hi*$v2_cc - $v1_hi*$v2_lo\n")
        write(buffer, "                t1_cc_right = $v2_hi*$v1_cc + $v1_lo*$v2_cc - $v1_lo*$v2_hi\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v2_hi <= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_hi*$v2_lo\n")
        write(buffer, "                $OUT_hi $eq $v1_lo*$v2_hi\n")
        write(buffer, "                t1_cv_left = (-$v2_hi)*$v1_cc + $v1_hi*(-$v2_cv) - $v1_hi*(-$v2_hi)\n")
        write(buffer, "                t1_cv_right = (-$v2_lo)*$v1_cc + $v1_lo*(-$v2_cv) - $v1_lo*(-$v2_lo)\n")
        write(buffer, "                t1_cc_left = (-$v2_lo)*$v1_cv + $v1_hi*(-$v2_cc) - $v1_hi*(-$v2_lo)\n")
        write(buffer, "                t1_cc_right = (-$v2_hi)*$v1_cv + $v1_lo*(-$v2_cc) - $v1_lo*(-$v2_hi)\n")
        write(buffer, "                if t1_cv_left < t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left > t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_lo $eq $v1_hi*$v2_lo\n")
        write(buffer, "                $OUT_hi $eq $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_left = $v2_hi*$v1_cv + $v1_hi*$v2_cv - $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_right = $v2_lo*$v1_cc + $v1_lo*$v2_cv - $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cc_left = $v2_lo*$v1_cv + $v1_hi*$v2_cc - $v1_hi*$v2_lo\n")
        write(buffer, "                t1_cc_right = $v2_hi*$v1_cc + $v1_lo*$v2_cc - $v1_lo*$v2_hi\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        elseif $v1_hi <= 0.0\n")
        write(buffer, "            if $v2_lo >= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_lo*$v2_hi\n")
        write(buffer, "                $OUT_hi $eq $v1_hi*$v2_lo\n")
        write(buffer, "                t1_cv_left = $v2_lo*(-$v1_cv) + (-$v1_lo)*$v2_cc - (-$v1_lo)*$v2_lo\n")
        write(buffer, "                t1_cv_right = $v2_hi*(-$v1_cv) + (-$v1_hi)*$v2_cc - (-$v1_hi)*$v2_hi\n")
        write(buffer, "                t1_cc_left = $v2_hi*(-$v1_cc) + (-$v1_lo)*$v2_cv - (-$v1_lo)*$v2_hi\n")
        write(buffer, "                t1_cc_right = $v2_lo*(-$v1_cc) + (-$v1_hi)*$v2_cv - (-$v1_hi)*$v2_lo\n")
        write(buffer, "                if t1_cv_left < t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left > t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v2_hi <= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_hi*$v2_hi\n")
        write(buffer, "                $OUT_hi $eq $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cv_left = $v2_lo*$v1_cc + $v1_lo*$v2_cc - $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cv_right = $v2_hi*$v1_cc + $v1_hi*$v2_cc - $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cc_left = $v2_hi*$v1_cv + $v1_lo*$v2_cv - $v1_lo*$v2_hi\n")
        write(buffer, "                t1_cc_right = $v2_lo*$v1_cv + $v1_hi*$v2_cv - $v1_hi*$v2_lo\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_lo $eq $v1_lo*$v2_hi\n")
        write(buffer, "                $OUT_hi $eq $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cv_left = $v2_lo*(-$v1_cc) + (-$v1_lo)*$v2_cc - (-$v1_lo)*$v2_lo\n")
        write(buffer, "                t1_cv_right = $v2_hi*(-$v1_cv) + (-$v1_hi)*$v2_cc - (-$v1_hi)*$v2_hi\n")
        write(buffer, "                t1_cc_left = $v2_hi*(-$v1_cc) + (-$v1_lo)*$v2_cv - (-$v1_lo)*$v2_hi\n")
        write(buffer, "                t1_cc_right = $v2_lo*(-$v1_cv) + (-$v1_hi)*$v2_cv - (-$v1_hi)*$v2_lo\n")
        write(buffer, "                if t1_cv_left < t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left > t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        else\n")
        write(buffer, "            if $v2_lo >= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_lo*$v2_hi\n")
        write(buffer, "                $OUT_hi $eq $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_left = $v1_hi*$v2_cv + $v2_hi*$v1_cv - $v2_hi*$v1_hi\n")
        write(buffer, "                t1_cv_right = $v1_lo*$v2_cc + $v2_lo*$v1_cv - $v2_lo*$v1_lo\n")
        write(buffer, "                t1_cc_left = $v1_lo*$v2_cv + $v2_hi*$v1_cc - $v2_hi*$v1_lo\n")
        write(buffer, "                t1_cc_right = $v1_hi*$v2_cc + $v2_lo*$v1_cc - $v2_lo*$v1_hi\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            elseif $v2_hi <= 0.0\n")
        write(buffer, "                $OUT_lo $eq $v1_hi*$v2_lo\n")
        write(buffer, "                $OUT_hi $eq $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cv_left = $v1_lo*(-$v2_cc) + (-$v2_lo)*$v1_cc - (-$v2_lo)*$v1_lo\n")
        write(buffer, "                t1_cv_right = $v1_hi*(-$v2_cv) + (-$v2_hi)*$v1_cc - (-$v2_hi)*$v1_hi\n")
        write(buffer, "                t1_cc_left = $v1_hi*(-$v2_cc) + (-$v2_lo)*$v1_cv - (-$v2_lo)*$v1_hi\n")
        write(buffer, "                t1_cc_right = $v1_lo*(-$v2_cv) + (-$v2_hi)*$v1_cv - (-$v2_hi)*$v1_lo\n")
        write(buffer, "                if t1_cv_left < t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq -t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left > t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq -t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_lo $eq min($v1_lo*$v2_hi, $v1_hi*$v2_lo)\n")
        write(buffer, "                $OUT_hi $eq max($v1_lo*$v2_lo, $v1_hi*$v2_hi)\n")
        write(buffer, "                t1_cv_left = $v2_hi*$v1_cv + $v1_hi*$v2_cv - $v1_hi*$v2_hi\n")
        write(buffer, "                t1_cv_right = $v2_lo*$v1_cc + $v1_lo*$v2_cc - $v1_lo*$v2_lo\n")
        write(buffer, "                t1_cc_left = $v2_lo*$v1_cv + $v1_hi*$v2_cc - $v1_hi*$v2_lo\n")
        write(buffer, "                t1_cc_right = $v2_hi*$v1_cc + $v1_lo*$v2_cv - $v1_lo*$v2_hi\n")
        write(buffer, "                if t1_cv_left > t1_cv_right\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cv $eq t1_cv_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_cvgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "                col = Int32(1)\n")
        write(buffer, "                if t1_cc_left < t1_cc_right\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_left\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_lo\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_hi\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                else\n")
        write(buffer, "                    $OUT_cc $eq t1_cc_right\n")
        write(buffer, "                    while col <= colmax\n")
        write(buffer, "                        if col == Int32($ID1)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v2_hi\n")
        write(buffer, "                        elseif col == Int32($ID2)\n")
        write(buffer, "                            $OUT_ccgrad $eq $v1_lo\n")
        write(buffer, "                        else\n")
        write(buffer, "                            $OUT_ccgrad $eq 0.0\n")
        write(buffer, "                        end\n")
        write(buffer, "                        col += Int32(1)\n")
        write(buffer, "                    end\n")
        write(buffer, "                end\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv = $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc = $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    end
    return String(take!(buffer))
end

# Addition of two variables
# max threads: 1024
function SCMC_add_kernel(OUT::String, v1::String, v2::String, varlist::Vector{String}, sparsity::Vector{Int}; sum_output::Bool=false)
    if sum_output
        eq = "+="
    else
        eq = "="
    end
    
    if startswith(v1, "temp")
        v1_cv = "$(v1)_cv"
        v1_cc = "$(v1)_cc"
        v1_lo = "$(v1)_lo"
        v1_hi = "$(v1)_hi"
        v1_cvgrad = "$(v1)_cvgrad[col]"
        v1_ccgrad = "$(v1)_ccgrad[col]"
    elseif startswith(v1, "aux")
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,2]"
        v1_lo = "$(v1)[idx,3]"
        v1_hi = "$(v1)[idx,4]"
        v1_cvgrad = "$(v1)[idx,end-2*colmax+col]"
        v1_ccgrad = "$(v1)[idx,end-1*colmax+col]"
    else
        v1_cv = "$(v1)[idx,1]"
        v1_cc = "$(v1)[idx,1]"
        v1_lo = "$(v1)[idx,2]"
        v1_hi = "$(v1)[idx,3]"
    end
    if startswith(v2, "temp")
        v2_cv = "$(v2)_cv"
        v2_cc = "$(v2)_cc"
        v2_lo = "$(v2)_lo"
        v2_hi = "$(v2)_hi"
        v2_cvgrad = "$(v2)_cvgrad[col]"
        v2_ccgrad = "$(v2)_ccgrad[col]"
    elseif startswith(v2, "aux")
        v2_cv = "$(v2)[idx,1]"
        v2_cc = "$(v2)[idx,2]"
        v2_lo = "$(v2)[idx,3]"
        v2_hi = "$(v2)[idx,4]"
        v2_cvgrad = "$(v2)[idx,end-2*colmax+col]"
        v2_ccgrad = "$(v2)[idx,end-1*colmax+col]"
    else
        v2_cv = "$(v2)[idx,1]"
        v2_cc = "$(v2)[idx,1]"
        v2_lo = "$(v2)[idx,2]"
        v2_hi = "$(v2)[idx,3]"
    end
    if startswith(OUT, "temp")
        OUT_cv = "$(OUT)_cv"
        OUT_cc = "$(OUT)_cc"
        OUT_lo = "$(OUT)_lo"
        OUT_hi = "$(OUT)_hi"
        OUT_cvgrad = "$(OUT)_cvgrad[col]"
        OUT_ccgrad = "$(OUT)_ccgrad[col]"
    else
        OUT_cv = "$(OUT)[idx,1]"
        OUT_cc = "$(OUT)[idx,2]"
        OUT_lo = "$(OUT)[idx,3]"
        OUT_hi = "$(OUT)[idx,4]"
        OUT_cvgrad = "$(OUT)[idx,end-2*colmax+col]"
        OUT_ccgrad = "$(OUT)[idx,end-1*colmax+col]"
    end

    # Get the anti-sparsity list (elements NOT being used)
    antisparsity = collect(1:length(varlist))
    antisparsity = antisparsity[antisparsity .∉ Ref(sparsity)]
    
    # Determine the sparsity case:
    # 1) Use sparsity list
    # 2) Use antisparsity list (because it's shorter than the sparsity list)
    # 3) Don't use either, simply calculate all elements
    if length(sparsity) <= length(antisparsity)
        sparsity_case = 1
        sparsity_string = join(["col == Int32($(x))" for x in sparsity], " || ")
    elseif length(antisparsity) > 0
        antisparsity_string = join(["col == Int32($(x))" for x in antisparsity], " || ")
        sparsity_case = 2
    else
        sparsity_case = 3
    end
    
    # Create the buffer that we will write to
    buffer = Base.IOBuffer()

    # Write all the lines to the buffer
    
    
    if (startswith(v1, r"aux|temp") && startswith(v2, r"aux|temp"))
        write(buffer, "        ###############################\n")
        write(buffer, "        ## Addition of Two Variables ##\n")
        write(buffer, "        ###############################\n")
        write(buffer, "\n")
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        # Begin rule\n")
        write(buffer, "        $OUT_cv $eq $v1_cv + $v2_cv\n")
        write(buffer, "        $OUT_cc $eq $v1_cc + $v2_cc\n")
        write(buffer, "        $OUT_lo $eq $v1_lo + $v2_lo\n")
        write(buffer, "        $OUT_hi $eq $v1_hi + $v2_hi\n")
        write(buffer, "        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "            if $sparsity_string\n")
            write(buffer, "                $OUT_cvgrad $eq $v1_cvgrad + $v2_cvgrad\n")
            write(buffer, "                $OUT_ccgrad $eq $v1_ccgrad + $v2_ccgrad\n")
            write(buffer, "            else\n")
            write(buffer, "                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "            end\n")
        elseif sparsity_case == 2
            write(buffer, "            if $antisparsity_string\n")
            write(buffer, "                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "            else\n")
            write(buffer, "                $OUT_cvgrad $eq $v1_cvgrad + $v2_cvgrad\n")
            write(buffer, "                $OUT_ccgrad $eq $v1_ccgrad + $v2_ccgrad\n")
            write(buffer, "            end\n")
        else
            write(buffer, "            $OUT_cvgrad $eq $v1_cvgrad + $v2_cvgrad\n")
            write(buffer, "            $OUT_ccgrad $eq $v1_ccgrad + $v2_ccgrad\n")
        end
        write(buffer, "            col += Int32(1)\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv = $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc = $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    elseif (startswith(v1, r"aux|temp") && !startswith(v2, r"aux|temp"))
        ID = findfirst(==(v2), varlist)
        isnothing(ID) && error("Empty varlist")
        write(buffer, "        ###############################\n")
        write(buffer, "        ## Addition of Two Variables ##\n")
        write(buffer, "        ###############################\n")
        write(buffer, "\n")
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        # Begin rule\n")
        write(buffer, "        $OUT_cv $eq $v1_cv + $v2_cv\n")
        write(buffer, "        $OUT_cc $eq $v1_cc + $v2_cc\n")
        write(buffer, "        $OUT_lo $eq $v1_lo + $v2_lo\n")
        write(buffer, "        $OUT_hi $eq $v1_hi + $v2_hi\n")
        write(buffer, "        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "            if $sparsity_string\n")
            write(buffer, "                if col == Int32($ID)\n")
            write(buffer, "                    $OUT_cvgrad $eq $v1_cvgrad + 1.0\n")
            write(buffer, "                    $OUT_ccgrad $eq $v1_ccgrad + 1.0\n")
            write(buffer, "                else\n")
            write(buffer, "                    $OUT_cvgrad $eq $v1_cvgrad\n")
            write(buffer, "                    $OUT_ccgrad $eq $v1_ccgrad\n")
            write(buffer, "                end\n")
            write(buffer, "            else\n")
            write(buffer, "                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "            end\n")
        elseif sparsity_case == 2
            write(buffer, "            if $antisparsity_string\n")
            write(buffer, "                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "            else\n")
            write(buffer, "                if col == Int32($ID)\n")
            write(buffer, "                    $OUT_cvgrad $eq $v1_cvgrad + 1.0\n")
            write(buffer, "                    $OUT_ccgrad $eq $v1_ccgrad + 1.0\n")
            write(buffer, "                else\n")
            write(buffer, "                    $OUT_cvgrad $eq $v1_cvgrad\n")
            write(buffer, "                    $OUT_ccgrad $eq $v1_ccgrad\n")
            write(buffer, "                end\n")
            write(buffer, "            end\n")
        else
            write(buffer, "            if col == Int32($ID)\n")
            write(buffer, "                $OUT_cvgrad $eq $v1_cvgrad + 1.0\n")
            write(buffer, "                $OUT_ccgrad $eq $v1_ccgrad + 1.0\n")
            write(buffer, "            else\n")
            write(buffer, "                $OUT_cvgrad $eq $v1_cvgrad\n")
            write(buffer, "                $OUT_ccgrad $eq $v1_ccgrad\n")
            write(buffer, "            end\n")
        end
        write(buffer, "            col += Int32(1)\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv = $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc = $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    elseif (!startswith(v1, r"aux|temp") && startswith(v2, r"aux|temp"))
        ID = findfirst(==(v1), varlist)
        isnothing(ID) && error("Empty varlist")
        write(buffer, "        ###############################\n")
        write(buffer, "        ## Addition of Two Variables ##\n")
        write(buffer, "        ###############################\n")
        write(buffer, "\n")
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        # Begin rule\n")
        write(buffer, "        $OUT_cv $eq $v1_cv + $v2_cv\n")
        write(buffer, "        $OUT_cc $eq $v1_cc + $v2_cc\n")
        write(buffer, "        $OUT_lo $eq $v1_lo + $v2_lo\n")
        write(buffer, "        $OUT_hi $eq $v1_hi + $v2_hi\n")
        write(buffer, "        while col <= colmax\n")
        if sparsity_case == 1
            write(buffer, "            if $sparsity_string\n")
            write(buffer, "                if col == Int32($ID)\n")
            write(buffer, "                    $OUT_cvgrad $eq 1.0 + $v2_cvgrad\n")
            write(buffer, "                    $OUT_ccgrad $eq 1.0 + $v2_ccgrad\n")
            write(buffer, "                else\n")
            write(buffer, "                    $OUT_cvgrad $eq $v2_cvgrad\n")
            write(buffer, "                    $OUT_ccgrad $eq $v2_ccgrad\n")
            write(buffer, "                end\n")
            write(buffer, "            else\n")
            write(buffer, "                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "            end\n")
        elseif sparsity_case == 2
            write(buffer, "            if $antisparsity_string\n")
            write(buffer, "                $OUT_cvgrad $eq 0.0\n")
            write(buffer, "                $OUT_ccgrad $eq 0.0\n")
            write(buffer, "            else\n")
            write(buffer, "                if col == Int32($ID)\n")
            write(buffer, "                    $OUT_cvgrad $eq 1.0 + $v2_cvgrad\n")
            write(buffer, "                    $OUT_ccgrad $eq 1.0 + $v2_ccgrad\n")
            write(buffer, "                else\n")
            write(buffer, "                    $OUT_cvgrad $eq $v2_cvgrad\n")
            write(buffer, "                    $OUT_ccgrad $eq $v2_ccgrad\n")
            write(buffer, "                end\n")
            write(buffer, "            end\n")
        else
            write(buffer, "            if col == Int32($ID)\n")
            write(buffer, "                $OUT_cvgrad $eq 1.0 + $v2_cvgrad\n")
            write(buffer, "                $OUT_ccgrad $eq 1.0 + $v2_ccgrad\n")
            write(buffer, "            else\n")
            write(buffer, "                $OUT_cvgrad $eq $v2_cvgrad\n")
            write(buffer, "                $OUT_ccgrad $eq $v2_ccgrad\n")
            write(buffer, "            end\n")
        end
        write(buffer, "            col += Int32(1)\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv = $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc = $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    else
        ID1 = findfirst(==(v1), varlist)
        ID2 = findfirst(==(v2), varlist)
        (ID1 == ID2) && error("Adding same variable")
        isnothing(ID1) && error("Empty varlist")
        isnothing(ID2) && error("Empty varlist")
        write(buffer, "        ###############################\n")
        write(buffer, "        ## Addition of Two Variables ##\n")
        write(buffer, "        ###############################\n")
        write(buffer, "\n")
        write(buffer, "        # Reset the column counter\n")
        write(buffer, "        col = Int32(1)\n")
        write(buffer, "\n")
        write(buffer, "        # Begin rule\n")
        write(buffer, "        $OUT_cv $eq $v1_cv + $v2_cv\n")
        write(buffer, "        $OUT_cc $eq $v1_cc + $v2_cc\n")
        write(buffer, "        $OUT_lo $eq $v1_lo + $v2_lo\n")
        write(buffer, "        $OUT_hi $eq $v1_hi + $v2_hi\n")
        write(buffer, "        while col <= colmax\n")
        write(buffer, "            if col == Int32($ID1)\n")
        write(buffer, "                $OUT_cvgrad $eq 1.0\n")
        write(buffer, "                $OUT_ccgrad $eq 1.0\n")
        write(buffer, "            elseif col == Int32($ID2)\n")
        write(buffer, "                $OUT_cvgrad $eq 1.0\n")
        write(buffer, "                $OUT_ccgrad $eq 1.0\n")
        write(buffer, "            else\n")
        write(buffer, "                $OUT_cvgrad $eq 0.0\n")
        write(buffer, "                $OUT_ccgrad $eq 0.0\n")
        write(buffer, "            end\n")
        write(buffer, "            col += Int32(1)\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
        write(buffer, "        # Cut\n")
        write(buffer, "        if $OUT_cv < $OUT_lo\n")
        write(buffer, "            $OUT_cv = $OUT_lo\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_cvgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "        if $OUT_cc > $OUT_hi\n")
        write(buffer, "            $OUT_cc = $OUT_hi\n")
        write(buffer, "            col = Int32(1)\n")
        write(buffer, "            while col <= colmax\n")
        write(buffer, "                $OUT_ccgrad = 0.0\n")
        write(buffer, "                col += Int32(1)\n")
        write(buffer, "            end\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    end
    return String(take!(buffer))
end

#=
Affine Quadratic Rules
=#

function SCMC_quadaff_initialize(CONST::Real)
    # Create the buffer that we will write to
    buffer = Base.IOBuffer()

    # Write the initialization of the quadratic constants
    # to the buffer
    write(buffer, "        #############################\n")
    write(buffer, "        ## Constant Initialization ##\n")
    write(buffer, "        #############################\n")
    write(buffer, "\n")
    write(buffer, "        intercept_cv = $(Float64(CONST))\n")
    write(buffer, "        intercept_cc = $(Float64(CONST))\n")
    write(buffer, "\n")
    return String(take!(buffer))
end

function SCMC_quadaff_affine(v1::String, COEFF::Real, varlist::Vector{String})
    # Create the buffer that we will write to
    buffer = Base.IOBuffer()

    # Identify the index of the variable
    ID = findfirst(==(v1), varlist)

    # Adjust the temporary subgradient fields for this variable
    # (NOTE: With affine quadratic relaxations, there is only
    #  ever a single temporary variable. Hence, `temp1` instead
    #  of `temp$(i)`.
    write(buffer, "        #################\n")
    write(buffer, "        ## Affine Term ##\n")
    write(buffer, "        #################\n")
    write(buffer, "\n")
    write(buffer, "        temp1_cvgrad[$(ID)] += $COEFF\n")
    write(buffer, "        temp1_ccgrad[$(ID)] += $COEFF\n")
    write(buffer, "\n")
    return String(take!(buffer))
end

function SCMC_quadaff_squared(v1::String, COEFF::Real, varlist::Vector{String})
    # Create the buffer that we will write to
    buffer = Base.IOBuffer()

    # Identify the index of the variable
    ID = findfirst(==(v1), varlist)

    # Adjust the temporary subgradient fields for this variable
    # (NOTE: With affine quadratic relaxations, there is only
    #  ever a single temporary variable. Hence, `temp1` instead
    #  of `temp$(i)`.
    if COEFF > 0.0
        write(buffer, "        ##################\n")
        write(buffer, "        ## Squared Term ##\n")
        write(buffer, "        ##################\n")
        write(buffer, "\n")
        write(buffer, "        intercept_cv -= $COEFF * $(v1)[idx,1] * $(v1)[idx,1]\n")
        write(buffer, "        intercept_cc -= $COEFF * $(v1)[idx,2] * $(v1)[idx,3]\n")
        write(buffer, "        temp1_cvgrad[$(ID)] += 2.0 * $COEFF * $(v1)[idx,1]\n")
        write(buffer, "        temp1_ccgrad[$(ID)] += $COEFF * ($(v1)[idx,2] + $(v1)[idx,3])\n")
        write(buffer, "\n")
    else
        write(buffer, "        ##################\n")
        write(buffer, "        ## Squared Term ##\n")
        write(buffer, "        ##################\n")
        write(buffer, "\n")
        write(buffer, "        intercept_cv -= $COEFF * $(v1)[idx,2] * $(v1)[idx,3]\n")
        write(buffer, "        intercept_cc -= $COEFF * $(v1)[idx,1] * $(v1)[idx,1]\n")
        write(buffer, "        temp1_cvgrad[$(ID)] += $COEFF * ($(v1)[idx,2] + $(v1)[idx,3])\n")
        write(buffer, "        temp1_ccgrad[$(ID)] += 2.0 * $COEFF * $(v1)[idx,1]\n")
        write(buffer, "\n")
    end

    return String(take!(buffer))
end

function SCMC_quadaff_binary(v1::String, v2::String, COEFF::Real, varlist::Vector{String})
    # Create the buffer that we will write to
    buffer = Base.IOBuffer()

    # Identify the indices of the variables
    ID1 = findfirst(==(v1), varlist)
    ID2 = findfirst(==(v2), varlist)

    # Adjust the temporary subgradient fields for this variable
    # (NOTE: With affine quadratic relaxations, there is only
    #  ever a single temporary variable. Hence, `temp1` instead
    #  of `temp$(i)`.
    if COEFF > 0.0
        write(buffer, "        #################\n")
        write(buffer, "        ## Binary Term ##\n")
        write(buffer, "        #################\n")
        write(buffer, "\n")
        write(buffer, "        if ($(v1)[idx,3] - $(v1)[idx,2])*$(v2)[idx,1] + ($(v2)[idx,3] - $(v2)[idx,2])*$(v1)[idx,1] <= $(v1)[idx,3]*$(v2)[idx,3] - $(v1)[idx,2]*$(v2)[idx,2]\n")
        write(buffer, "            intercept_cv -= $COEFF * $(v1)[idx,2] * $(v2)[idx,2]\n")
        write(buffer, "            temp1_cvgrad[$(ID1)] += $COEFF * $(v2)[idx,2]\n")
        write(buffer, "            temp1_cvgrad[$(ID2)] += $COEFF * $(v1)[idx,2]\n")
        write(buffer, "        else\n")
        write(buffer, "            intercept_cv -= $COEFF * $(v1)[idx,3] * $(v2)[idx,3]\n")
        write(buffer, "            temp1_cvgrad[$(ID1)] += $COEFF * $(v2)[idx,3]\n")
        write(buffer, "            temp1_cvgrad[$(ID2)] += $COEFF * $(v1)[idx,3]\n")
        write(buffer, "        end\n")
        write(buffer, "        if ($(v1)[idx,3] - $(v1)[idx,2])*$(v2)[idx,1] - ($(v2)[idx,3] - $(v2)[idx,2])*$(v1)[idx,1] <= $(v1)[idx,3]*$(v2)[idx,2] - $(v1)[idx,2]*$(v2)[idx,3]\n")
        write(buffer, "            intercept_cc -= $COEFF * $(v1)[idx,3] * $(v2)[idx,2]\n")
        write(buffer, "            temp1_ccgrad[$(ID1)] += $COEFF * $(v2)[idx,2]\n")
        write(buffer, "            temp1_ccgrad[$(ID2)] += $COEFF * $(v1)[idx,3]\n")
        write(buffer, "        else\n")
        write(buffer, "            intercept_cc -= $COEFF * $(v1)[idx,2] * $(v2)[idx,3]\n")
        write(buffer, "            temp1_ccgrad[$(ID1)] += $COEFF * $(v2)[idx,3]\n")
        write(buffer, "            temp1_ccgrad[$(ID2)] += $COEFF * $(v1)[idx,2]\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    else
        write(buffer, "        #################\n")
        write(buffer, "        ## Binary Term ##\n")
        write(buffer, "        #################\n")
        write(buffer, "\n")
        write(buffer, "        if ($(v1)[idx,3] - $(v1)[idx,2])*$(v2)[idx,1] - ($(v2)[idx,3] - $(v2)[idx,2])*$(v1)[idx,1] <= $(v1)[idx,3]*$(v2)[idx,2] - $(v1)[idx,2]*$(v2)[idx,3]\n")
        write(buffer, "            intercept_cv -= $COEFF * $(v1)[idx,3] * $(v2)[idx,2]\n")
        write(buffer, "            temp1_cvgrad[$(ID1)] += $COEFF * $(v2)[idx,2]\n")
        write(buffer, "            temp1_cvgrad[$(ID2)] += $COEFF * $(v1)[idx,3]\n")
        write(buffer, "        else\n")
        write(buffer, "            intercept_cv -= $COEFF * $(v1)[idx,2] * $(v2)[idx,3]\n")
        write(buffer, "            temp1_cvgrad[$(ID1)] += $COEFF * $(v2)[idx,3]\n")
        write(buffer, "            temp1_cvgrad[$(ID2)] += $COEFF * $(v1)[idx,2]\n")
        write(buffer, "        end\n")
        write(buffer, "        if ($(v1)[idx,3] - $(v1)[idx,2])*$(v2)[idx,1] + ($(v2)[idx,3] - $(v2)[idx,2])*$(v1)[idx,1] <= $(v1)[idx,3]*$(v2)[idx,3] - $(v1)[idx,2]*$(v2)[idx,2]\n")
        write(buffer, "            intercept_cc -= $COEFF * $(v1)[idx,2] * $(v2)[idx,2]\n")
        write(buffer, "            temp1_ccgrad[$(ID1)] += $COEFF * $(v2)[idx,2]\n")
        write(buffer, "            temp1_ccgrad[$(ID2)] += $COEFF * $(v1)[idx,2]\n")
        write(buffer, "        else\n")
        write(buffer, "            intercept_cc -= $COEFF * $(v1)[idx,3] * $(v2)[idx,3]\n")
        write(buffer, "            temp1_ccgrad[$(ID1)] += $COEFF * $(v2)[idx,3]\n")
        write(buffer, "            temp1_ccgrad[$(ID2)] += $COEFF * $(v1)[idx,3]\n")
        write(buffer, "        end\n")
        write(buffer, "\n")
    end

    return String(take!(buffer))
end
